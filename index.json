[{"categories":["OS"],"content":"Linuxのアクセス制御を完全に理解する。","date":"20200-03-03","objectID":"/junior-engineers-learning-journal/os-linux-access-controle/","tags":["OS"],"title":"Linuxのアクセス制御を完全に理解する","uri":"/junior-engineers-learning-journal/os-linux-access-controle/"},{"categories":["OS"],"content":"こんにちは、しぶやです。 Linuxのアクセス制御の理解がかなり浅いと気づいたので、これを機にLinuxのアクセス制御を「完全に理解」していきたいと思います。\\ ","date":"20200-03-03","objectID":"/junior-engineers-learning-journal/os-linux-access-controle/:0:0","tags":["OS"],"title":"Linuxのアクセス制御を完全に理解する","uri":"/junior-engineers-learning-journal/os-linux-access-controle/"},{"categories":["OS"],"content":"TL;DR ","date":"20200-03-03","objectID":"/junior-engineers-learning-journal/os-linux-access-controle/:1:0","tags":["OS"],"title":"Linuxのアクセス制御を完全に理解する","uri":"/junior-engineers-learning-journal/os-linux-access-controle/"},{"categories":["OS"],"content":"0　はじめに Linuxに限った話ではないですが、ファイルについて理解することは非常に重要だと思います。 というのも、以下のような有名な考え方があります。 Linuxでは全てをファイルとして扱うようになっています。LPI-JAPAN 僕がLinuxを好きである一番の理由です。 Linuxがかっこ良いからというわけではなく、すべてをファイルとして扱ってくれるLinuxは理解しやすいのです。 Windows等は複雑すぎて僕にはまだ理解できない部分がほとんどです。いずれ勉強したい。。 話を戻して、本記事ではLinuxにおけるアクセス制御、すなわちファイルのアクセス制御について「完全に理解」していきたいと思います。 「少し分かる」レベルの人は軽く読み飛ばしてください。 ※ 本記事では以下の環境で動作検証をしています。 OS：Ubuntu 24.04.1 LTS ルートファイルシステム：ext4 ホスト：AWS EC2 ","date":"20200-03-03","objectID":"/junior-engineers-learning-journal/os-linux-access-controle/:2:0","tags":["OS"],"title":"Linuxのアクセス制御を完全に理解する","uri":"/junior-engineers-learning-journal/os-linux-access-controle/"},{"categories":["OS"],"content":"1　Linuxにおけるアクセス制御の基本 まずは、基本の復習からです。 ","date":"20200-03-03","objectID":"/junior-engineers-learning-journal/os-linux-access-controle/:3:0","tags":["OS"],"title":"Linuxのアクセス制御を完全に理解する","uri":"/junior-engineers-learning-journal/os-linux-access-controle/"},{"categories":["OS"],"content":"1.1　基本のパーミッション Linuxにおけるファイルパーミッションは以下のような形をしています。 drwxrwxrw これは、以下の4つに分けられます。 d + rwx + rwx + rwx (= drwxrwxrwx) d——— ファイルの種類を表す。 … ファイル l … シンボリックリンク d … ディレクトリ etc. -rwx—— 所有ユーザの権限を表す。 … 権限なし r … 読み込み権限 w … 書き込み権限 x … 実行権限 —-rwx— 所有グループの権限を表す。 読み方は所有ユーザと同様。 ——-rwx その他のユーザの権限を表す。 読み方は所有ユーザと同様。 それでは、実際のファイルを見てみましょう。 echo echo chmod, chown 以下の2つはよく使うコマンドですね。 chmod ファイルのアクセス権限を変更する。 例：chmod ./hoge.txt 644 （hoge.txtを所有者のみ読み込み書き込みok、所有グループ、その他のユーザは読み込みのみokに変更） chown ファイルの所有者を変更する。 例：chown hoge:ghoge ./hoge.txt （hoge.txtの所有者をhogeに、所有グループをghogeに変更） ","date":"20200-03-03","objectID":"/junior-engineers-learning-journal/os-linux-access-controle/:3:1","tags":["OS"],"title":"Linuxのアクセス制御を完全に理解する","uri":"/junior-engineers-learning-journal/os-linux-access-controle/"},{"categories":["OS"],"content":"1.2　その他パーミッション setuid, setgid, stickybit ","date":"20200-03-03","objectID":"/junior-engineers-learning-journal/os-linux-access-controle/:3:2","tags":["OS"],"title":"Linuxのアクセス制御を完全に理解する","uri":"/junior-engineers-learning-journal/os-linux-access-controle/"},{"categories":["OS"],"content":"1.3　権限昇格 ","date":"20200-03-03","objectID":"/junior-engineers-learning-journal/os-linux-access-controle/:3:3","tags":["OS"],"title":"Linuxのアクセス制御を完全に理解する","uri":"/junior-engineers-learning-journal/os-linux-access-controle/"},{"categories":["OS"],"content":"1.4　コピー時の動作 ","date":"20200-03-03","objectID":"/junior-engineers-learning-journal/os-linux-access-controle/:3:4","tags":["OS"],"title":"Linuxのアクセス制御を完全に理解する","uri":"/junior-engineers-learning-journal/os-linux-access-controle/"},{"categories":["OS"],"content":"1.5　子プロセスへの継承 ","date":"20200-03-03","objectID":"/junior-engineers-learning-journal/os-linux-access-controle/:3:5","tags":["OS"],"title":"Linuxのアクセス制御を完全に理解する","uri":"/junior-engineers-learning-journal/os-linux-access-controle/"},{"categories":["OS"],"content":"2　Linuxにおけるアクセス制御の深堀 ","date":"20200-03-03","objectID":"/junior-engineers-learning-journal/os-linux-access-controle/:4:0","tags":["OS"],"title":"Linuxのアクセス制御を完全に理解する","uri":"/junior-engineers-learning-journal/os-linux-access-controle/"},{"categories":["OS"],"content":"2.1　ファイルシステム ","date":"20200-03-03","objectID":"/junior-engineers-learning-journal/os-linux-access-controle/:4:1","tags":["OS"],"title":"Linuxのアクセス制御を完全に理解する","uri":"/junior-engineers-learning-journal/os-linux-access-controle/"},{"categories":["OS"],"content":"2.2　VFS vfs, inode ","date":"20200-03-03","objectID":"/junior-engineers-learning-journal/os-linux-access-controle/:4:2","tags":["OS"],"title":"Linuxのアクセス制御を完全に理解する","uri":"/junior-engineers-learning-journal/os-linux-access-controle/"},{"categories":["OS"],"content":"2.3　ファイル操作の流れ app - syscall -\u003e vfs -fs_call-\u003e fs strace ","date":"20200-03-03","objectID":"/junior-engineers-learning-journal/os-linux-access-controle/:4:3","tags":["OS"],"title":"Linuxのアクセス制御を完全に理解する","uri":"/junior-engineers-learning-journal/os-linux-access-controle/"},{"categories":["OS"],"content":"2.4　カーネルの権限管理 capability, getcap, getpcaps カーネルパラメータ ","date":"20200-03-03","objectID":"/junior-engineers-learning-journal/os-linux-access-controle/:4:4","tags":["OS"],"title":"Linuxのアクセス制御を完全に理解する","uri":"/junior-engineers-learning-journal/os-linux-access-controle/"},{"categories":["OS"],"content":"3　その他のアクセス制御 facl selinux ","date":"20200-03-03","objectID":"/junior-engineers-learning-journal/os-linux-access-controle/:5:0","tags":["OS"],"title":"Linuxのアクセス制御を完全に理解する","uri":"/junior-engineers-learning-journal/os-linux-access-controle/"},{"categories":["OS"],"content":"4　まとめ ファイルパミッションの基本、setuid, setgid, そもそものuid, gid, すべてファイルである, コピー時の動作、ファイル管理のビット列、 strace, getpcaps, capability, getcap, カーネルパラメータ、権限昇格、facl ","date":"20200-03-03","objectID":"/junior-engineers-learning-journal/os-linux-access-controle/:6:0","tags":["OS"],"title":"Linuxのアクセス制御を完全に理解する","uri":"/junior-engineers-learning-journal/os-linux-access-controle/"},{"categories":["OS"],"content":"参考 [1] ClamAV [2] WIKIPEDIA Antivirus software [3] [Trellix 脅威対策の主な内容]（https://docs.trellix.com/ja-JP/bundle/endpoint-security-10.6.0-threat-prevention-product-guide-windows/page/GUID-7939E36B-8FC4-42F4-BE70-46AB2B9B0954.html） ","date":"20200-03-03","objectID":"/junior-engineers-learning-journal/os-linux-access-controle/:7:0","tags":["OS"],"title":"Linuxのアクセス制御を完全に理解する","uri":"/junior-engineers-learning-journal/os-linux-access-controle/"},{"categories":["Security"],"content":"ClamAVを完全に理解する。","date":"18180-03-03","objectID":"/junior-engineers-learning-journal/security-clamav/","tags":["Security"],"title":"ClamAVを完全に理解する","uri":"/junior-engineers-learning-journal/security-clamav/"},{"categories":["Security"],"content":"こんにちは、しぶやです。 近いうちにClamAVを利用する機会がありそうなので、これを機にClamAVを「完全に理解」していきたいと思います。 ","date":"18180-03-03","objectID":"/junior-engineers-learning-journal/security-clamav/:0:0","tags":["Security"],"title":"ClamAVを完全に理解する","uri":"/junior-engineers-learning-journal/security-clamav/"},{"categories":["Security"],"content":"TL;DR ","date":"18180-03-03","objectID":"/junior-engineers-learning-journal/security-clamav/:1:0","tags":["Security"],"title":"ClamAVを完全に理解する","uri":"/junior-engineers-learning-journal/security-clamav/"},{"categories":["Security"],"content":"1　ClamAV基礎 ","date":"18180-03-03","objectID":"/junior-engineers-learning-journal/security-clamav/:2:0","tags":["Security"],"title":"ClamAVを完全に理解する","uri":"/junior-engineers-learning-journal/security-clamav/"},{"categories":["Security"],"content":"1.0　マルウェアとは？ そもそもマルウェアの定義は何なのか曖昧であったので、Wikipediaで調べてみます。 （Wikipediaは割と定義が純粋で変な解釈されていないイメージがあるため。また、十分な信頼性を示したいわけでもないので手軽にWikipediaで調べてます。） Wikipediaでは以下のように書かれています。 マルウェア (malware) とは、不正かつ有害に動作させる意図で作成された悪意のあるソフトウェアや悪質なコードの総称。 つまり、悪意のあるソフトウェア = マルウェアのようですね。 マルウェア感染とは？ それでは、マルウェア感染とは何なのでしょうか？ 意外に明確な定義が見つかりませんでした。ChatGPTに聞いてみると以下のように帰ってきました。 マルウェア感染の定義は、悪意のあるソフトウェア（マルウェア）が、ユーザーの意図しない形でデバイス、システム、またはネットワークに侵入し、実行されることによって、その正常な動作を妨害、情報の窃取、システムの破壊、もしくは攻撃者に対する遠隔操作の権限を与える状態を指します。 すなわち、実行されることによって悪意のある動作がされることのようです。 ポイントは侵入したあとに実行までされて初めて感染であり、インストールされただけでは、感染ではないようです。 改めて考えてみると、ウイルス対策ソフトがインストールされたソフトをウイルスと判定し、隔離した際は感染したとは言い難いですものね。 実行環境だけ整えてあとから実行されるパターンなどもありますが、この時点で感染なのでしょうか？ ウイルス対策の視点から考えてみると、「実行環境が整ったがその後のウイルススキャンで実行される前に削除された」となれば感染したとは言わない気がします。 そのため、やはり実行に成功して初めて感染と定義したほうが良さそうです。 では、実行されだけど昔のウイルスなどでまともに動作せずに終わった場合はどうなのでしょう？ ※ ここでの「動作しない」とは、実行に失敗することでなく、実行には成功したがマルウェアが目的としていた動作（C2サーバとの接続等）に成功していないことを考えています。 僕は、これは感染と考えています。感染したけど被害はなかったと。 根拠としては、実際に実行されてプログラムが正常に動作してしまった時点で、コンピュータの隔離や解析等の対応が予想されるからです。 この時点で感染したとして後続対応がはじまるイメージです。 実際には他と整合性をとるための定義の問題でしかないので、正解はないのかもしれません。 現状、実行に成功して初めて感染くらいの定義がしっくり来ていますが、もっと良い定義があるかもしれません。 それでは、具体的なマルウェアの種類をみていきます。 ここでも、Wikipediaの定義を参照します。 （広義の）ウイルス 自己伝染機能、潜伏機能、発病機能のいずれかをもつ加害プログラム （狭義の）ウイルス 他のプログラムやファイルの一部を書き換え（寄生、感染）、自己複製する機能を持つマルウェア ワーム ウイルス同様自己増殖するが、ホストプログラムを持たず、単体で存在するプログラム バックドア 外部からコンピュータを操るために作られたコンピュータへの不正な侵入経路 トロイの木馬 見無害なファイルやプログラムに偽装した上でコンピュータに侵入したあと悪意のある振る舞いをするもの スパイウェア コンピュータの内部情報を外部に勝手に送信する[19]ソフトウェア キーロガー キーボードからの入力を記録するプログラム ボット ボットネットと呼ばれる仕組みにより、IRCなどを利用して攻撃者から命令を受け取り、命令に応じてDDoS攻撃やスパムメール送信などを行うマルウェア ※ ボット自体は常駐してチャットで会話するなどといった機能を持つ任意のプログラムを指すもの ルートキット 攻撃者が被害者のコンピュータに侵入したあとに用いるツールを集めたパッケージで、マルウェアとして被害者のコンピュータにしかけるもの。 侵入の発覚を防ぐログ改ざんツール、バックドアをしかけるツール、キーロガー、パスワードやクレジットカード情報等の窃盗ツールなどがある。 ランサムウェア コンピュータをロックしたり重要なファイルを暗号化して読めなくするなどして被害者を困らせ，身代金 (ransom) を払えば元に戻すと脅迫するマルウェア スケアウェア ユーザの恐怖 (scare) 心を煽る偽の警告メッセージ（「PCから違法ポルノやウイルスが検出された」等）を表示し、問題を解決するには所定の金額を支払うようにと脅すマルウェア ダウンローダー サイズの小さなマルウェアで、攻撃者のサーバから被害者のコンピュータに実行ファイルなどをダウンロードするなどさらなる攻撃の足がかりにするもの。 本体内部に不正なプログラムが格納されており、実行時に実行可能ファイルに展開するはドロッパーともいう。 アドウェア ユーザの望まない広告を勝手に出すソフトウェアである。 ワイパー 感染したコンピュータの補助記憶装置内のデータを完全消去して使用不能にするもの。 ","date":"18180-03-03","objectID":"/junior-engineers-learning-journal/security-clamav/:2:1","tags":["Security"],"title":"ClamAVを完全に理解する","uri":"/junior-engineers-learning-journal/security-clamav/"},{"categories":["Security"],"content":"1.1　ClamAVとは？ まず、「ClamAVとは何か？」についてですが、公式では以下のように書かれています。 ClamAV は、メール ゲートウェイでの電子メール スキャン用に特別に設計されたオープン ソース (GPLv2) のウイルス対策ツールキットです。 柔軟でスケーラブルなマルチスレッド デーモン、コマンド ライン スキャナー、自動データベース更新用の高度なツールなど、多数のユーティリティを提供します。 パッケージの核となるのは、共有ライブラリの形式で利用できるウイルス対策エンジンです。 （Google翻訳） ウイルス対策ツールキットと説明しているようです。 最後の文にもある通り、パッケージの核となるウイルス対策エンジンを中心として、様々な機能/用途をもっているため、このように呼んでいるのでしょうか。 また、ClamAV自体はもともとメールのスキャン用に作れらようです。 ウイルス対策とマルウェア対策 ClamAVは\"ウイルス対策ソフト\"と呼ばれていますが、機能的にはマルウェア対策ソフトです。 実際に、ワームやトロイの木馬などウイルス以外のマルウェアの検出にも対応しています。 これは、昔コンピュータウイルスが最初に流行り始めた際にアンチウイルスという言葉がセキュリティソフトを指す名称として定着したからだとか。 ClamAVは現在、Cisco System, Incによって提供されているようです。もともとメンテナンスを主導していたSourcefireという会社が買収されたのだとか。 また、OSSのメンテナンス以外にも以下のことが行われています。 メーリングリスト ソフトウェアのアップデート情報やデータベースの更新、技術的な議論などをメールで通知しています。 チャット コミュニティ用にDiscordサーバを運営しています。 マルウェア情報の管理 新規のマルウェアや未検出のマルウェアを受け付けてレビュー/管理しています。 有名なウイルス対策ソフト ChatGPTに商用含めウイルス対策ソフトの有名どこを聞いてみました。 製品名 提供元 Microsoft Defender for Endpoint Microsoft Symantec Endpoint Security Broadcom Trend Micro Apex One Trend Micro McAfee Endpoint Security McAfee Cisco Secure Endpoint Cisco SentinelOne SentinelOne CrowdStrike Falcon CrowdStrike Sophos Intercept X Sophos ESET PROTECT ESET ","date":"18180-03-03","objectID":"/junior-engineers-learning-journal/security-clamav/:2:2","tags":["Security"],"title":"ClamAVを完全に理解する","uri":"/junior-engineers-learning-journal/security-clamav/"},{"categories":["Security"],"content":"1.2　ClamAVの機能 それでは、ClamAVの具体的な機能を見ていきましょう。 ClamAVのウイルススキャンは幅広いファイルをカバーしています。 ドキュメント形式：tar, zip, gzip等 アーカイブ、圧縮ファイル：docx, xlsx, PDF等 スクリプト：JS, PHP, HTML, VBS等 実行ファイル：exe, dll, elf等 メール形式：eml, msg等 イメージ：iso, vhd等 docxやxlsxから分かる通り、clamAVはLinux専用ではないです。 ただし、一部機能はLinuxしか対応していなかったりとLinuxに強い感じです。 ウイルススキャンの機能として、ユーザが任意のタイミングで行うウイルススキャンに加え、オンアクセススキャンがあります。 これは、ユーザがファイルにアクセスしたときに該当ファイルをスキャンすることでリアルタイム保護を行うものです。 その他の機能としては、シグネチャデータベースのアップデート機能やclamAVのデーモンのリソースモニタリングなどがあります。 ","date":"18180-03-03","objectID":"/junior-engineers-learning-journal/security-clamav/:2:3","tags":["Security"],"title":"ClamAVを完全に理解する","uri":"/junior-engineers-learning-journal/security-clamav/"},{"categories":["Security"],"content":"1.3　その他のウイルス対策ソフトとの違い ClamAVはOSSであるため、無料で利用できます。 そのためか、高いお金を払ってまではウイルス対策ソフトを導入したくないときにClamAVを入れるイメージがあります。 ここでは、実際にClamAVとその他のウイルス対策ソフトの機能を比較し、ウイルス対策ソフトにお金を払う価値を調べてみようと思います。 ここでは、その他のウイルス対策ソフトの代表として、Trellixを比較してみようと思います。 機能 ClamAV Trellix 静的ヒューリスティック解析 △ ○ 動的ヒューリスティック解析 × ○ リアルタイムスキャン ○ ○ サンドボックス機能 × ○ AI × ○ ホワイトリスト型制御 ○ ○ 管理機能・UI △ ○ 自動修復 × ○ 商用サポート × ○ 価格 ○ × その他 カスタマイズ 保護, 修復 ※ 特定の製品についての記載ではなく、該当機能を持った製品があるかで見ています。 検知という意味では、動的ヒューリスティック解析、AI機能が大きな違いとしてあります。 実際にどれだけ検知できるかは不明ですが、未知のウイルスにも対応できるというの大きいと思います。 特にウイルス対策ソフトの対策として、ウイルスの中身を良い感じに書き換えられたときにも振る舞いが似ていれば検知できるというのは安心につながりますね。 また、その他に書いた保護・修復にも大きな違いがあるかと思います。 以下は、Trellix公式の記載内容です。 保護 脅威対策は、次の機能を使用して環境への侵入を防ぎ、システムを保護します。 アクセス保護 － 指定されたファイル、共有、レジストリ キー、レジストリ値へのアクセスを制限し、プロセスとサービスを脅威動作から防止または制限することにより、クライアント システムへの不要な変更を阻止します。 エクスプロイト防止 － 脅威対策は、コンテンツ更新のシグネチャを使用して、次のエクスプロイトを阻止します。 バッファー オーバーフロー － バッファー オーバーフローを悪用して任意のコードを実行できないようにします。 API の不正利用 － システム上で実行されている未知のアプリケーションまたは侵害されたアプリケーションによる悪質な API 呼び出しを防ぎます。 ネットワーク侵入防止 (ネットワーク IPS) － ネットワーク トラフィックを拒否または低下させる DoS 攻撃および帯域幅指向攻撃から保護します。 エキスパート ルール － 追加のパラメーターを使用して、アクセス保護カスタム ルールよりも柔軟なルールを作成できます。 ただし、エキスパート ルールを作成するには、McAfee 固有の構文を理解する必要があります。 検出 脅威対策は、次の機能を使用して環境内の脅威を検出します。 オンアクセス スキャン － ファイルの読み取り時と書き込み時に脅威をスキャンします。 システムがアイドル状態の場合にのみスキャンします。 マルウェア対策スキャン インターフェース (AMSI) と統合され、ブラウザー ベース以外のスクリプトの脅威に対するスキャン機能を強化しています。 オンデマンド スキャン － 事前定義のスキャンを今すぐまたはスケジュールに従って実行します。スパイウェア関連のレジストリ項目もスキャンし、クリーンアップします。 不審なプログラム － スパイウェアやアドウェアなどの不審なプログラムを検出し、環境内での実行を阻止します。 隔離 － 感染項目を隔離し、駆除または修復を試みます。あるいは、自動的に削除します。 ダッシュボードとモニター － 脅威対策の統計情報を表示します。スキャン時間、コンテンツの更新ステータス、攻撃が最も多いアプリケーションなどの情報が表示されます。 クエリーとレポート － 脅威対策の詳細情報を取得します。脅威数、スキャンの完了、検出に対する応答、誤検知回避イベント、McAfee GTI の感度レベルなどの情報が表示されます。 マルウェア対策の早期読み込み － Windows 8 以降のリリースに含まれている ELAM 機能のサポートを提供します。 ELAM は、ブートサイクル時に読み込まれたデバイス ドライバーのリストを収集します。スキャン サービスが実行されると、これらのドライバーがスキャンされます。 修正 脅威対策は、次の機能を使用してセキュリティ問題を修正し、検出を処理します。また、パフォーマンスを向上させ、保護機能を強化します。 アクション － 検出時に特定のアクションを実行します。 アラート － 検出時に通知を行い、フィルターでトラフィックを制限します。 Extra.DAT ファイル － ウイルスの大量発生を含む新しい脅威から保護します。 スケジュール スキャン － システムのパフォーマンスを低下させず、スキャンを迅速に実行するため、ピーク時以外にスキャンを実行します。 コンテンツ リポジトリ － クライアント システムに近いリポジトリにコンテンツ ファイルを移動することで、会社のインターネットまたはイントラネットで発生するトラフィック量を減らします。 ログ ファイル (Endpoint Security クライアント) － 検出項目の履歴情報を提供します。このファイルを使用して設定を変更し、保護機能を強化したり、システムのパフォーマンスを向上させることができます。 ダッシュボードとモニター － アクティビティを確認して、脅威対策の設定を調整します。 保護のアクセス保護機能はClamAVにはないのではないかと思います。これについては、ClamAVの機能が足りないというより、TrellixはEDRのような機能も持っている感じですかね。 また、修正については、管理機能・UIにもつながりますが、検知後に行う動作を具体的に設定できたり、ダッシュボードを持っていたりします。 他のソフトウェアと組み合わせるなどして自分で作成できる範疇と言われればそこまでなのかも知れないですが、やはりウイルス対策ソフト自身が多機能で、ユーザーフレンドリーに作られていると商用利用しやすいのは事実ですね。 最後にもちろん、ウイルス対策ソフトにコストをかける大きなメリットは商用サポートがあることですね。 これはウイルス対策ソフトにかぎた話ではありませんが。特に、 静的ヒューリスティック解析、動的ヒューリスティック解析 静的ヒューリスティック解析 静的ヒューリスティック解析にも2種類あります。 構造解析 コードやバイナリの中身をそのまま見て、ウイルス定義と一致するかを確認します。 挙動推測型解析 コードやバイナリを解析し、発生するシステムコールなどを予測した上で怪しい構造がないかを確認します。 動的ヒューリスティック解析 実際にウイルスを動作させ、怪しい振る舞いがないかを確認します。 ここで素人の私は、**挙動推測型解析と動的ヒューリスティック解析は同じじゃないか。結局、発生するシステムコールとか見ているだけで結果は一意に定まるのでは？**と思いました。 実際のところ、前者の場合は、動的に生成されるコードの展開であったり、実行環境依存のAPI呼び出しは解析できないという課題があります。 また、難読化についても、コンパイルしたら同じではないかと思いますが、無意味なコードの挿入であったりと解析が難しくなる部分はあるようです。 （ポリモーフィック・メタモーフィックコードという実行時に自分自身を変化させたり、コードの動作を変更させることで静的解析を回避する技術もあるようです。） ","date":"18180-03-03","objectID":"/junior-engineers-learning-journal/security-clamav/:2:4","tags":["Security"],"title":"ClamAVを完全に理解する","uri":"/junior-engineers-learning-journal/security-clamav/"},{"categories":["Security"],"content":"1.3　ClamAVの構成要素 それでは、ClamAVのドキュメントから構成要素を見ていきます。 Daemon The ClamAV Daemon, or clamd, is a multi-threaded daemon that uses libclamav to scan files for viruses. ClamAV provides a number of tools which interface with this daemon. They are, as follows: clamdscan - a simple scanning client on-access scanning - provides real-time protection via a clamd instance clamdtop - a resource monitoring interface for clamd ClamAVのデーモンであるclamdが動いており、内部的にはlibclamavを利用してスキャンを実施しているようです。 スキャン意外にも、clamdのリソースを見るためのclamdtopがあるようです。 Signature Testing and Management A number of tools allow for testing and management of signatures. Of note are the following: clambc - specifically for testing bytecode sigtool - for general signature testing and analysis freshclam - used to update signature database sets to the latest version clambcはバイナリのテストを行うものです。 これは、独自のマルウェア解析ルールなどを書いた際に、それが正しく動作するか（ClamAVが扱えるか）を検証するためのものです。 作成・検証の対象になるのは拡張子が.bcのバイトコードシグネチャというやつらしいです。 sigtoolはシグネチャの管理、分析をするためのツールです。 そもそも「シグネチャってなんやねん。」みたいな話があるので、そこは後ほど見てみようと思います。 freshclamはシグネチャデータベースの更新を行います。 Configuration The more complex tools ClamAV provides each require some degree of configuration. ClamAV supplies two example configuration files: clamd.conf - for configuring the behavior of the ClamAV Daemon clamd and associated tools freschclam.conf - for configuring the behavior of the signature database update tool, freshclam 設定ファイルです。 ","date":"18180-03-03","objectID":"/junior-engineers-learning-journal/security-clamav/:2:5","tags":["Security"],"title":"ClamAVを完全に理解する","uri":"/junior-engineers-learning-journal/security-clamav/"},{"categories":["Security"],"content":"1.4　ClamAVのウイルススキャンを覗いてみる ソースコードベースで何してるか見てみる。 どのような検知手法があるのかとか シグネチャ見てしまったほうがよい？ ","date":"18180-03-03","objectID":"/junior-engineers-learning-journal/security-clamav/:2:6","tags":["Security"],"title":"ClamAVを完全に理解する","uri":"/junior-engineers-learning-journal/security-clamav/"},{"categories":["Security"],"content":"2　検証 ","date":"18180-03-03","objectID":"/junior-engineers-learning-journal/security-clamav/:3:0","tags":["Security"],"title":"ClamAVを完全に理解する","uri":"/junior-engineers-learning-journal/security-clamav/"},{"categories":["Security"],"content":"3　まとめ winもある、dbのパスの中身、設定ファイルの内容、おんアクセススキャン、デーモン、メールフィルタリング、dbとスキャンの例、バージョン ","date":"18180-03-03","objectID":"/junior-engineers-learning-journal/security-clamav/:4:0","tags":["Security"],"title":"ClamAVを完全に理解する","uri":"/junior-engineers-learning-journal/security-clamav/"},{"categories":["Security"],"content":"参考 [1] ClamAV [2] WIKIPEDIA Antivirus software [3] [Trellix 脅威対策の主な内容]（https://docs.trellix.com/ja-JP/bundle/endpoint-security-10.6.0-threat-prevention-product-guide-windows/page/GUID-7939E36B-8FC4-42F4-BE70-46AB2B9B0954.html） ","date":"18180-03-03","objectID":"/junior-engineers-learning-journal/security-clamav/:5:0","tags":["Security"],"title":"ClamAVを完全に理解する","uri":"/junior-engineers-learning-journal/security-clamav/"},{"categories":["Virtualization"],"content":"Dockerを完全に理解する。","date":"18180-03-03","objectID":"/junior-engineers-learning-journal/virtualization-docker/","tags":["Virtualization"],"title":"Dockerを完全に理解する","uri":"/junior-engineers-learning-journal/virtualization-docker/"},{"categories":["Virtualization"],"content":"こんにちは、しぶやです。 学生時代の研究から始まり、社会人になってからも愛用しているDockerについて、気合をいれてまとめようと思います。 ","date":"18180-03-03","objectID":"/junior-engineers-learning-journal/virtualization-docker/:0:0","tags":["Virtualization"],"title":"Dockerを完全に理解する","uri":"/junior-engineers-learning-journal/virtualization-docker/"},{"categories":["Virtualization"],"content":"TL;DR ","date":"18180-03-03","objectID":"/junior-engineers-learning-journal/virtualization-docker/:1:0","tags":["Virtualization"],"title":"Dockerを完全に理解する","uri":"/junior-engineers-learning-journal/virtualization-docker/"},{"categories":["Virtualization"],"content":"1　コンテナ基礎 ","date":"18180-03-03","objectID":"/junior-engineers-learning-journal/virtualization-docker/:2:0","tags":["Virtualization"],"title":"Dockerを完全に理解する","uri":"/junior-engineers-learning-journal/virtualization-docker/"},{"categories":["Virtualization"],"content":"2　Docker ","date":"18180-03-03","objectID":"/junior-engineers-learning-journal/virtualization-docker/:3:0","tags":["Virtualization"],"title":"Dockerを完全に理解する","uri":"/junior-engineers-learning-journal/virtualization-docker/"},{"categories":["Virtualization"],"content":"2.1　","date":"18180-03-03","objectID":"/junior-engineers-learning-journal/virtualization-docker/:3:1","tags":["Virtualization"],"title":"Dockerを完全に理解する","uri":"/junior-engineers-learning-journal/virtualization-docker/"},{"categories":["Virtualization"],"content":"2.2　ClamAVのアーキテクチャ ","date":"18180-03-03","objectID":"/junior-engineers-learning-journal/virtualization-docker/:3:2","tags":["Virtualization"],"title":"Dockerを完全に理解する","uri":"/junior-engineers-learning-journal/virtualization-docker/"},{"categories":["Virtualization"],"content":"2.3　ClamAVのウイルススキャンの仕組み ","date":"18180-03-03","objectID":"/junior-engineers-learning-journal/virtualization-docker/:3:3","tags":["Virtualization"],"title":"Dockerを完全に理解する","uri":"/junior-engineers-learning-journal/virtualization-docker/"},{"categories":["Virtualization"],"content":"2.4　ClamAVのデータベース更新 ","date":"18180-03-03","objectID":"/junior-engineers-learning-journal/virtualization-docker/:3:4","tags":["Virtualization"],"title":"Dockerを完全に理解する","uri":"/junior-engineers-learning-journal/virtualization-docker/"},{"categories":["Virtualization"],"content":"2.5　ClamAVのソースコード ","date":"18180-03-03","objectID":"/junior-engineers-learning-journal/virtualization-docker/:3:5","tags":["Virtualization"],"title":"Dockerを完全に理解する","uri":"/junior-engineers-learning-journal/virtualization-docker/"},{"categories":["Virtualization"],"content":"3　検証 ","date":"18180-03-03","objectID":"/junior-engineers-learning-journal/virtualization-docker/:4:0","tags":["Virtualization"],"title":"Dockerを完全に理解する","uri":"/junior-engineers-learning-journal/virtualization-docker/"},{"categories":["Virtualization"],"content":"4　まとめ ","date":"18180-03-03","objectID":"/junior-engineers-learning-journal/virtualization-docker/:5:0","tags":["Virtualization"],"title":"Dockerを完全に理解する","uri":"/junior-engineers-learning-journal/virtualization-docker/"},{"categories":["Virtualization"],"content":"参考 [1] docker [2] コンテナセキュリティ　コンテナ化されたアプリケーションを保護する要素技術 ","date":"18180-03-03","objectID":"/junior-engineers-learning-journal/virtualization-docker/:6:0","tags":["Virtualization"],"title":"Dockerを完全に理解する","uri":"/junior-engineers-learning-journal/virtualization-docker/"},{"categories":["Database, Storage"],"content":"NASを完全に理解する。","date":"16160-03-03","objectID":"/junior-engineers-learning-journal/database-storage-nas/","tags":["Database, Storage"],"title":"NASを完全に理解する","uri":"/junior-engineers-learning-journal/database-storage-nas/"},{"categories":["Database, Storage"],"content":"こんにちは、しぶやです。 最近、Synologyのnasを中古で安く仕入れたので、これを機にNASを「完全に理解」していきたいと思います。 ","date":"16160-03-03","objectID":"/junior-engineers-learning-journal/database-storage-nas/:0:0","tags":["Database, Storage"],"title":"NASを完全に理解する","uri":"/junior-engineers-learning-journal/database-storage-nas/"},{"categories":["Database, Storage"],"content":"TL;DR NASはファイルサーバみたいなもの。 標準機能として、RAIDが組めたり、バックアップとれたり、いろいろできる。 NAS用ソフトが充実している。 ","date":"16160-03-03","objectID":"/junior-engineers-learning-journal/database-storage-nas/:1:0","tags":["Database, Storage"],"title":"NASを完全に理解する","uri":"/junior-engineers-learning-journal/database-storage-nas/"},{"categories":["Database, Storage"],"content":"1　NASの基本 本章では、NASの基本について学んでいきます。 ","date":"16160-03-03","objectID":"/junior-engineers-learning-journal/database-storage-nas/:2:0","tags":["Database, Storage"],"title":"NASを完全に理解する","uri":"/junior-engineers-learning-journal/database-storage-nas/"},{"categories":["Database, Storage"],"content":"1.1　NASとは NASとは、Network Attached Strorageの略です。その名の通り、ネットワークに接続して利用するストレージです。 代表的なNASメーカーには以下のようなものがあります。 Synology QNAP BUFFALO NETGEAR 何はともあれ、現物を見てイメージの具体化をしてみます。 Synology DiskStation DS223j 小型で静音の省エネ型ストレージ こちらは、家庭用でも利用されているNASです。Youtubeとかもよく見るサイズのものですね。 Synology DiskStation DS3622xs+ どんな環境にも適合する、パワフルで大容量のストレージ こちらは、より高性能な大容量ストレージです。いかつい見た目でかっこよいですね Synology FlashStation FS6400 I/O インテンシブなアプリケーション向けの超高速オールフラッシュサーバー ラックマウント用のNASもあるようです。 Synology Plusシリーズ3.5インチSATA HDD 家庭やスモールオフィス環境のSynologyシステム専用に作られた高信頼性ハードドライブ Synology Enterpriseシリーズ2.5インチSATA SSD SynologyのSSDを使用してストレージ インフラを最新化 NASには上記のようなHDDやSDDを差し込み利用します。nベイというのは、これらを差し込むスロットが何個あるかを表しています。 DAS vs NAS vs SAN NASと比較されるものとして、DASやSANがあります。 DAS：Direct Attached Storage ストレージを直接コンピュータに接続する方式です。容易なセットアップや低コストといった特徴があります。 NAS：Network Attached Storage 本記事で取り上げている通り、ネットワークを通じてアクセス可能なストレージです。ネットワーク経由で複数人で同時にアクセスできる特徴があります。 SAN：Storage Area Network 専用のネットワーク経由で複数のサーバと接続できるストレージです。 こちらについては、あまり詳しくわかっていませんが、データ転送が高速であったり、ブロックレベルでアクセス可能といった特徴があるようです。 ちなみに、どんなプロトコルで通信が行われているのかについてですが、iSCSI（IP over SCSI）やFibre Channel（FC）、Fibre Channel over Ethernet（FCoE）といったものが利用されているようです。 ","date":"16160-03-03","objectID":"/junior-engineers-learning-journal/database-storage-nas/:2:1","tags":["Database, Storage"],"title":"NASを完全に理解する","uri":"/junior-engineers-learning-journal/database-storage-nas/"},{"categories":["Database, Storage"],"content":"1.2　NASの機能 それでは、NASの具体的な機能を見ていきます。 ファイル共有 ネットワーク経由でファイルの読み書きが可能です。スナップショットをとれたり、バージョン管理機能を持っていたりするものなどもあります。 「具体的に中で何が動いているのか」についてですが、NASはSMBやNFSなど複数のプロトコルをサポートしており、中身は一般的なOSSでファイルサーバのように動くようです。 アクセス管理 利用者視点ではもちろん機能ですね。ユーザごとに読み取り専用などアクセス権の管理が可能です。 RAID RAIDによるデータの冗長性を確保できます。もちろん複数ベイが必要になります。 復習：RAID RAIDはRedundant Arrays of Inexpensive Disksの略です。複数のディスクを組み合わせて冗長化するやつですね。 RAIDの主なレベルは以下です。 RAID 0 冗長化していない通常のモードです。 信頼性は失われますが、書き込む量も増えないため、高速でストレージの利用効率も高いです。 RAID 1 2台のディスクを利用したシンプルなミラーリングです。データを二重に保存します。 RAID 5 3台以上のディスクを利用し、データとそのパリティをそれぞれ分散させて保存します。 パリティを保存しているため、容量効率は高いですが、データの復旧には時間がかかってしまいます。 RAID 6 RAID5 + パリティです。RAID1やRIAD5と異なり、2台のディスクが壊れても復旧が可能です。 RAID 10 RAID 1 + RAID 0でRAID 10です。RAID 5/6よりも書き込みが高速で、耐障害性も高いです。 バックアップ バックアップにはPC等のクライアントのバックアップとNAS自身のデータのバックアップの2つ観点があります。 前者は専用のクライアントソフトなどを利用することで、手軽に頻度や対象を指定したバックアップを行えます。 後者は、Google DriveやAWSなど、クラウドストレージへNAS自身のデータをバックアップできます。 Tip NASは標準でRAID機能を持っているものが多いですが、これはあくまで冗長化です。 操作ミスによるNASデータの削除やランサムウェアによる被害が発生した際はデータを失ってしまいます。 これらの対策として別のストレージにバックアップを取ることが重要となり、NASは標準でクラウドストレージへのバップアップを行うことができます。 データの冗長化ではないですが、通信の冗長化としてLAGが組めるのも良い点ですね。 LANポートを複数持っているので、通信経路の冗長化にもなります。 リモートアクセスやVPN 専用ソフトを利用することで、インターネット経由で安全にアクセスできる機能を備えています。 インターネット経由で利用することも考えると当たり前に欲しい機能ですね。 VMやコンテナの実行 高性能のNASの場合は、VMやコンテナを中で動かせるようです。 独自のアプリケーションを中で動かすことで様々なことができるようになります。 セキュリティ NAS自身がファイアウォール機能などを持っていることもあります。 また、高性能なものは2段階認証を利用できたり、ウイルススキャン機能を持っていたりします。 Webサーバやメディアサーバ サーバ機能を持っているものもあるようです。 メンテナンス ファームウェアの自動アップデート機能を持っていたりします。 また、今回Synologyを使ってみてわかりましたが、オンラインからのヘルスチェックサービスなどもあるようです。 NASの性能 NASを買う前は、NASは高性能な高いやつほど読み書き速度が早いと安直に考えていました。 改めて考えてみると、読み書き速度はNASの性能ではなく、HDDやSDDの読み書き速度に依存することがわかります。 ※ 正確には、ネットワークの帯域幅であったり、RAIDの構成、CPUの性能などにも依存します。 ","date":"16160-03-03","objectID":"/junior-engineers-learning-journal/database-storage-nas/:2:2","tags":["Database, Storage"],"title":"NASを完全に理解する","uri":"/junior-engineers-learning-journal/database-storage-nas/"},{"categories":["Database, Storage"],"content":"1.3　NASのメリット・デメリット NASのメリットは何と言っても1.2であげたものが手軽に利用できることです。 外付けHDDだけでは、複数人でデータを共有することはできないですし、ネットワーク経由でデータにアクセスすることもできません。 一方でNASのデメリットは、初期費用が高いことです。高機能なものにもなると、HDD抜きでNAS自身が非常に高いです。 所感 上記で太字で記載しましたが、NASの本質は標準で様々な機能が入っており、手軽に導入できることかと思います。 NAS自身のOSは専用の組み込みOSであることが多いようですが、その気になればPC1台とRAIDに必要な外付けHDDがあれば1.2で上げた機能をすべて実現できると思います。 これらの導入コストを低くできることがNASのメリットだと考えています。※ 静音だとか性能だとかって話はあると思いますが。 ","date":"16160-03-03","objectID":"/junior-engineers-learning-journal/database-storage-nas/:2:3","tags":["Database, Storage"],"title":"NASを完全に理解する","uri":"/junior-engineers-learning-journal/database-storage-nas/"},{"categories":["Database, Storage"],"content":"1.4　外付けストレージ・ファイルサーバとの違い 比較表を書こうと思いましたが、1.3で述べたように、以下のような関係で表すことが適切かと思いました。 外付けHDD ⊂ ファイルサーバ ⊂ NAS 外付けHDDもRAIDが組めるものがありますし、複数台で自分で組むこともできるでしょう。 また、外付けHDDをマウントし、ファイルサーバを建てることもできれば、フアイルサーバに機能を加えNASっぽく運用することもできるでしょう。 これらのことから、それぞれの境界はやや曖昧で、包含関係がしっくりきました。 ","date":"16160-03-03","objectID":"/junior-engineers-learning-journal/database-storage-nas/:2:4","tags":["Database, Storage"],"title":"NASを完全に理解する","uri":"/junior-engineers-learning-journal/database-storage-nas/"},{"categories":["Database, Storage"],"content":"1.5　ユースケース ファイルサーバ 家庭用、企業用問わずファイルサーバとしてデータ共有に利用されています。 バックアップ バックアップの保存用途でNASが利用されています。 その他 メディアサーバ等様々な用途で利用されています。IoTの発展に伴い、カメラデータの保存等にも使われているようです。 Tip NASというよりHDDの話です。 よく壊れやすいと言われているHDDについてですが、動かし続けていないとより壊れやすいようです。 具体的な理由はChatGPTが以下のように教えてくれました。 ヘッドの位置ずれ 潤滑油の劣化 温度管理の不良 結露の問題 機械部品の劣化 家とかも誰も住んでいないとすぐだめになったりしますよね ","date":"16160-03-03","objectID":"/junior-engineers-learning-journal/database-storage-nas/:2:5","tags":["Database, Storage"],"title":"NASを完全に理解する","uri":"/junior-engineers-learning-journal/database-storage-nas/"},{"categories":["Database, Storage"],"content":"2　Synologyを触る 今回はSynology DS120jを中古で安く仕入れたので、こちらを触ります。 1ベイモデルとなっており、RAIDを組めないのが残念ですが、用途としては自宅鯖のバックアップようなのでよいでしょう。 製品名：Synology DS120j バージョン：DSM 7.2.2 HDD容量：2TB OSは初期セットアップ時にダウンロードしました。HDDは別で買うのが面倒だったので、HDD付きを買いました。 Synology DS120j ","date":"16160-03-03","objectID":"/junior-engineers-learning-journal/database-storage-nas/:3:0","tags":["Database, Storage"],"title":"NASを完全に理解する","uri":"/junior-engineers-learning-journal/database-storage-nas/"},{"categories":["Database, Storage"],"content":"2.1　解体 解体（物理）です。 NAS 解体ショー 思っていたより大きめの基盤が張り付いていました。この辺も最低でも登場人物と役割がわかる程度にはなりたいですが、今は電源やファンの接続部分くらいしか分からないです。 近いうちに勉強する予定があるので別記事に書くとして今回はスルーします。 HDD 表 HDD 裏 NAS用のHDDです。やはりHDDは重いですね。 裏面を見るとよりディスクとヘッドの存在が透けてきてテンションが上がりました。 真ん中にピング色の何かがついていますが、これは何なのでしょう。接着剤？ HDDも解体して中身のディスクとか見たかったですが、使う前に壊してしまうのが怖くなりやめました。壊れたらやってみよう。 ","date":"16160-03-03","objectID":"/junior-engineers-learning-journal/database-storage-nas/:3:1","tags":["Database, Storage"],"title":"NASを完全に理解する","uri":"/junior-engineers-learning-journal/database-storage-nas/"},{"categories":["Database, Storage"],"content":"2.2　初期設定 物理を見たところで、いよいよNASを動かしてみます・ 起動時画面 ファームウェアの選択 ファームウェアのインストール 起動するとすぐにファームウェアを要求されました。 公式からダウンロードし、NASへインストールしていきます。\\ Synologyの組み込みOSは**DSM（Disk Station Manager）**というもので.patという拡張子が利用されているようです。 HDDのファームウェア DSMのダウンロード時にSynology HDD/SSD オフラインアップデータという項目を見つけ、.saという拡張子のファイルが存在することを見つけました。 これまで意識したことがなかったですが、HDDもRAMやROMを持っており、ファームウェアが動作しているようです。SynologyはDSMからHDDのファームウェアの管理ができるのだとか。 参考：【技術顧問の小話 ＃004】HDDのファームウェアとは？ アカウント設定 続きまして、ユーザの設定です。一般的なOSをインストールしたときと同じような流れですね。 ファームウェアの自動更新設定 追加機能 NASっぽい設定が始まりました。 左の画像では、1.2 NASの機能でも記載したように、ファームウェアの自動更新ができるようです。選択肢配下。 重要なDSMとパッケージのアップデートのみを自動で行う。（推奨） DSMとパッケージのアップデートを自動で行う。 DSMとパッケージのアップデートの通知のみを行い、手動でアップデートを行う。 右の画像では、Synologyのアカウントを作成することでオンラインで追加の機能を提供してくれるようです。以下、詳細です。 Secure Signin Service 具体的には以下の方法でサインインができるみたいです。 2要素認証 専用アプリにOTPを発行可能。 ハードウェアセキュリティキーによる認証 USB キー、Windows Hello、または Mac Touch IDで認証可能 Access your Synology NAS from anywhere インターネットからアクセスできるようにするものです。 仕組みとしては、NAS → Synology中継サーバ、クライアント → Synology中継サーバで接続を行うことで、安全にアクセスできるようにするというものです。 家にインバウンド通信を許可する必要もないことやSynologyが境界を固めてくれていることを考えると非常に便利で安全ですね。中継サーバが乗っ取られていない前提ですが。 Around-the-clock monitoring and protection Synology側のサーバからNASのヘルスチェックだったり、トラブルシュートの提供だったりを行ってくれるらしい。 ","date":"16160-03-03","objectID":"/junior-engineers-learning-journal/database-storage-nas/:3:2","tags":["Database, Storage"],"title":"NASを完全に理解する","uri":"/junior-engineers-learning-journal/database-storage-nas/"},{"categories":["Database, Storage"],"content":"2.2　検証 Synologyの画面 Synologyの画面です。ブラウザで動くアプリケーションがあるという認識はありましたが、デスクトップlikeなアプリケーションなんですね。 なぜデスクトップlikeにしているのでしょうか。 VM動かしたりとかPCっぽい機能をたくさん利用することを考えるとユーザーフレンドリーなのでしょうか。 共有フォルダ アクセス権 試しに共有フォルダを作成してみました。 LocationにVolume 1: ext4とあることから、裏ではボリューム作ってフォーマットしてファイルシステム作成している感じですかね。 物理ボリューム → ボリュームグループ → 論理ボリューム → ファイルシステムみたいなコマンドベースの手順を踏まずにポチポチで完結するのはらくで良いですね。 アクセス権についてもGUIで簡単に設定できます。 豊富なアプリケーション アプリもかなり豊富な種類がありました。 消費電力 Synology DS120jで消費電力を測ってみました。 通常時の消費電力 書き込み時の消費電力 高いのか低いのか勘所がないです。。 アイドル時：4.68W、負荷時：9.81Wと紹介しているサイトがありました。アイドル状態とやらになったらもう少し消費電力を抑えられたのかもしれません。 ","date":"16160-03-03","objectID":"/junior-engineers-learning-journal/database-storage-nas/:3:3","tags":["Database, Storage"],"title":"NASを完全に理解する","uri":"/junior-engineers-learning-journal/database-storage-nas/"},{"categories":["Database, Storage"],"content":"3　まとめ 記事の途中でも書きましたが、NASの本質は標準で様々な機能が入っており、手軽に導入できるファイルサーバだと思っています。 以上を踏まえ、以下にまとめます。 NASはファイルサーバみたいなもの。 標準機能として、RAIDが組めたり、バックアップとれたり、いろいろできる。 NAS用ソフトが充実している。 ","date":"16160-03-03","objectID":"/junior-engineers-learning-journal/database-storage-nas/:4:0","tags":["Database, Storage"],"title":"NASを完全に理解する","uri":"/junior-engineers-learning-journal/database-storage-nas/"},{"categories":["Database, Storage"],"content":"参考 [1] Synology [2] NAS入門: 初心者でもわかるデータ保存・共有・バックアップの極意 [3] 【技術顧問の小話 ＃004】HDDのファームウェアとは？ [4] SynologyNASの外部アクセスQuickConnectの仕組みと設定方法 ","date":"16160-03-03","objectID":"/junior-engineers-learning-journal/database-storage-nas/:5:0","tags":["Database, Storage"],"title":"NASを完全に理解する","uri":"/junior-engineers-learning-journal/database-storage-nas/"},{"categories":["Others"],"content":"Idea Logs","date":"16160-03-03","objectID":"/junior-engineers-learning-journal/others-idea-log/","tags":["Others"],"title":"執筆検討メモ","uri":"/junior-engineers-learning-journal/others-idea-log/"},{"categories":["Others"],"content":"以下、今後執筆を検討しているものたちです。  OS パッケージマネージャ  Network OSPF RIP STP  Security 堅牢化 ClamAV Suricata  Database, Storage NAS Postgres OracleDB  Data Science 古典学習  Cloud AWSサービス  Virtualization Proxmox K8s Docker  Hardware メモリ  System Design, Deployment, and Management ガイドライン フレームワーク  Finace お金の流れ  Basic Theory 物理  Others 1年目の感想 ","date":"16160-03-03","objectID":"/junior-engineers-learning-journal/others-idea-log/:0:0","tags":["Others"],"title":"執筆検討メモ","uri":"/junior-engineers-learning-journal/others-idea-log/"},{"categories":["Markdown"],"content":"This article shows the basic Markdown syntax and format.","date":"10140-12-12","objectID":"/junior-engineers-learning-journal/others-basic-markdown-syntax/","tags":["Markdown","HTML"],"title":"Basic Markdown Syntax","uri":"/junior-engineers-learning-journal/others-basic-markdown-syntax/"},{"categories":["Markdown"],"content":"This article offers a sample of basic Markdown syntax that can be used in Hugo content files. Note This article is a shameful copy of the great Grav original page. If you want to know about the extended Markdown syntax of LoveIt theme, please read extended Markdown syntax page. Let’s face it: Writing content for the Web is tiresome. WYSIWYG editors help alleviate this task, but they generally result in horrible code, or worse yet, ugly web pages. Markdown is a better way to write HTML, without all the complexities and ugliness that usually accompanies it. Some of the key benefits are: Markdown is simple to learn, with minimal extra characters, so it’s also quicker to write content. Less chance of errors when writing in Markdown. Produces valid XHTML output. Keeps the content and the visual display separate, so you cannot mess up the look of your site. Write in any text editor or Markdown application you like. Markdown is a joy to use! John Gruber, the author of Markdown, puts it like this: The overriding design goal for Markdown’s formatting syntax is to make it as readable as possible. The idea is that a Markdown-formatted document should be publishable as-is, as plain text, without looking like it’s been marked up with tags or formatting instructions. While Markdown’s syntax has been influenced by several existing text-to-HTML filters, the single biggest source of inspiration for Markdown’s syntax is the format of plain text email. – John Gruber Without further delay, let us go over the main elements of Markdown and what the resulting HTML looks like! Tip  Bookmark this page for easy future reference! ","date":"10140-12-12","objectID":"/junior-engineers-learning-journal/others-basic-markdown-syntax/:0:0","tags":["Markdown","HTML"],"title":"Basic Markdown Syntax","uri":"/junior-engineers-learning-journal/others-basic-markdown-syntax/"},{"categories":["Markdown"],"content":"1 Headings Headings from h2 through h6 are constructed with a # for each level: ## h2 Heading ### h3 Heading #### h4 Heading ##### h5 Heading ###### h6 Heading The HTML looks like this: \u003ch2\u003eh2 Heading\u003c/h2\u003e \u003ch3\u003eh3 Heading\u003c/h3\u003e \u003ch4\u003eh4 Heading\u003c/h4\u003e \u003ch5\u003eh5 Heading\u003c/h5\u003e \u003ch6\u003eh6 Heading\u003c/h6\u003e Heading IDs To add a custom heading ID, enclose the custom ID in curly braces on the same line as the heading: ### A Great Heading {#custom-id} The HTML looks like this: \u003ch3 id=\"custom-id\"\u003eA Great Heading\u003c/h3\u003e ","date":"10140-12-12","objectID":"/junior-engineers-learning-journal/others-basic-markdown-syntax/:1:0","tags":["Markdown","HTML"],"title":"Basic Markdown Syntax","uri":"/junior-engineers-learning-journal/others-basic-markdown-syntax/"},{"categories":["Markdown"],"content":"2 Comments Comments should be HTML compatible. \u003c!-- This is a comment --\u003e Comment below should NOT be seen: ","date":"10140-12-12","objectID":"/junior-engineers-learning-journal/others-basic-markdown-syntax/:2:0","tags":["Markdown","HTML"],"title":"Basic Markdown Syntax","uri":"/junior-engineers-learning-journal/others-basic-markdown-syntax/"},{"categories":["Markdown"],"content":"3 Horizontal Rules The HTML \u003chr\u003e element is for creating a “thematic break” between paragraph-level elements. In Markdown, you can create a \u003chr\u003e with any of the following: ___: three consecutive underscores ---: three consecutive dashes ***: three consecutive asterisks The rendered output looks like this: ","date":"10140-12-12","objectID":"/junior-engineers-learning-journal/others-basic-markdown-syntax/:3:0","tags":["Markdown","HTML"],"title":"Basic Markdown Syntax","uri":"/junior-engineers-learning-journal/others-basic-markdown-syntax/"},{"categories":["Markdown"],"content":"4 Body Copy Body copy written as normal, plain text will be wrapped with \u003cp\u003e\u003c/p\u003e tags in the rendered HTML. So this body copy: Lorem ipsum dolor sit amet, graecis denique ei vel, at duo primis mandamus. Et legere ocurreret pri, animal tacimates complectitur ad cum. Cu eum inermis inimicus efficiendi. Labore officiis his ex, soluta officiis concludaturque ei qui, vide sensibus vim ad. The HTML looks like this: \u003cp\u003eLorem ipsum dolor sit amet, graecis denique ei vel, at duo primis mandamus. Et legere ocurreret pri, animal tacimates complectitur ad cum. Cu eum inermis inimicus efficiendi. Labore officiis his ex, soluta officiis concludaturque ei qui, vide sensibus vim ad.\u003c/p\u003e A line break can be done with one blank line. ","date":"10140-12-12","objectID":"/junior-engineers-learning-journal/others-basic-markdown-syntax/:4:0","tags":["Markdown","HTML"],"title":"Basic Markdown Syntax","uri":"/junior-engineers-learning-journal/others-basic-markdown-syntax/"},{"categories":["Markdown"],"content":"5 Inline HTML If you need a certain HTML tag (with a class) you can simply use HTML: Paragraph in Markdown. \u003cdiv class=\"class\"\u003e This is \u003cb\u003eHTML\u003c/b\u003e \u003c/div\u003e Paragraph in Markdown. ","date":"10140-12-12","objectID":"/junior-engineers-learning-journal/others-basic-markdown-syntax/:5:0","tags":["Markdown","HTML"],"title":"Basic Markdown Syntax","uri":"/junior-engineers-learning-journal/others-basic-markdown-syntax/"},{"categories":["Markdown"],"content":"6 Emphasis ","date":"10140-12-12","objectID":"/junior-engineers-learning-journal/others-basic-markdown-syntax/:6:0","tags":["Markdown","HTML"],"title":"Basic Markdown Syntax","uri":"/junior-engineers-learning-journal/others-basic-markdown-syntax/"},{"categories":["Markdown"],"content":"Bold For emphasizing a snippet of text with a heavier font-weight. The following snippet of text is rendered as bold text. **rendered as bold text** __rendered as bold text__ The HTML looks like this: \u003cstrong\u003erendered as bold text\u003c/strong\u003e ","date":"10140-12-12","objectID":"/junior-engineers-learning-journal/others-basic-markdown-syntax/:6:1","tags":["Markdown","HTML"],"title":"Basic Markdown Syntax","uri":"/junior-engineers-learning-journal/others-basic-markdown-syntax/"},{"categories":["Markdown"],"content":"Italics For emphasizing a snippet of text with italics. The following snippet of text is rendered as italicized text. *rendered as italicized text* _rendered as italicized text_ The HTML looks like this: \u003cem\u003erendered as italicized text\u003c/em\u003e ","date":"10140-12-12","objectID":"/junior-engineers-learning-journal/others-basic-markdown-syntax/:6:2","tags":["Markdown","HTML"],"title":"Basic Markdown Syntax","uri":"/junior-engineers-learning-journal/others-basic-markdown-syntax/"},{"categories":["Markdown"],"content":"Strikethrough In GFMGitHub flavored Markdown you can do strikethroughs. ~~Strike through this text.~~ The rendered output looks like this: Strike through this text. The HTML looks like this: \u003cdel\u003eStrike through this text.\u003c/del\u003e ","date":"10140-12-12","objectID":"/junior-engineers-learning-journal/others-basic-markdown-syntax/:6:3","tags":["Markdown","HTML"],"title":"Basic Markdown Syntax","uri":"/junior-engineers-learning-journal/others-basic-markdown-syntax/"},{"categories":["Markdown"],"content":"Combination Bold, italics, and strikethrough can be used in combination. ***bold and italics*** ~~**strikethrough and bold**~~ ~~*strikethrough and italics*~~ ~~***bold, italics and strikethrough***~~ The rendered output looks like this: bold and italics strikethrough and bold strikethrough and italics bold, italics and strikethrough The HTML looks like this: \u003cem\u003e\u003cstrong\u003ebold and italics\u003c/strong\u003e\u003c/em\u003e \u003cdel\u003e\u003cstrong\u003estrikethrough and bold\u003c/strong\u003e\u003c/del\u003e \u003cdel\u003e\u003cem\u003estrikethrough and italics\u003c/em\u003e\u003c/del\u003e \u003cdel\u003e\u003cem\u003e\u003cstrong\u003ebold, italics and strikethrough\u003c/strong\u003e\u003c/em\u003e\u003c/del\u003e ","date":"10140-12-12","objectID":"/junior-engineers-learning-journal/others-basic-markdown-syntax/:6:4","tags":["Markdown","HTML"],"title":"Basic Markdown Syntax","uri":"/junior-engineers-learning-journal/others-basic-markdown-syntax/"},{"categories":["Markdown"],"content":"7 Blockquotes For quoting blocks of content from another source within your document. Add \u003e before any text you want to quote: \u003e **Fusion Drive** combines a hard drive with a flash storage (solid-state drive) and presents it as a single logical volume with the space of both drives combined. The rendered output looks like this: Fusion Drive combines a hard drive with a flash storage (solid-state drive) and presents it as a single logical volume with the space of both drives combined. The HTML looks like this: \u003cblockquote\u003e \u003cp\u003e \u003cstrong\u003eFusion Drive\u003c/strong\u003e combines a hard drive with a flash storage (solid-state drive) and presents it as a single logical volume with the space of both drives combined. \u003c/p\u003e \u003c/blockquote\u003e Blockquotes can also be nested: \u003e Donec massa lacus, ultricies a ullamcorper in, fermentum sed augue. Nunc augue augue, aliquam non hendrerit ac, commodo vel nisi. \u003e\u003e Sed adipiscing elit vitae augue consectetur a gravida nunc vehicula. Donec auctor odio non est accumsan facilisis. Aliquam id turpis in dolor tincidunt mollis ac eu diam. The rendered output looks like this: Donec massa lacus, ultricies a ullamcorper in, fermentum sed augue. Nunc augue augue, aliquam non hendrerit ac, commodo vel nisi. Sed adipiscing elit vitae augue consectetur a gravida nunc vehicula. Donec auctor odio non est accumsan facilisis. Aliquam id turpis in dolor tincidunt mollis ac eu diam. ","date":"10140-12-12","objectID":"/junior-engineers-learning-journal/others-basic-markdown-syntax/:7:0","tags":["Markdown","HTML"],"title":"Basic Markdown Syntax","uri":"/junior-engineers-learning-journal/others-basic-markdown-syntax/"},{"categories":["Markdown"],"content":"8 Lists ","date":"10140-12-12","objectID":"/junior-engineers-learning-journal/others-basic-markdown-syntax/:8:0","tags":["Markdown","HTML"],"title":"Basic Markdown Syntax","uri":"/junior-engineers-learning-journal/others-basic-markdown-syntax/"},{"categories":["Markdown"],"content":"Unordered A list of items in which the order of the items does not explicitly matter. You may use any of the following symbols to denote bullets for each list item: * valid bullet - valid bullet + valid bullet For example: * Lorem ipsum dolor sit amet * Consectetur adipiscing elit * Integer molestie lorem at massa * Facilisis in pretium nisl aliquet * Nulla volutpat aliquam velit * Phasellus iaculis neque * Purus sodales ultricies * Vestibulum laoreet porttitor sem * Ac tristique libero volutpat at * Faucibus porta lacus fringilla vel * Aenean sit amet erat nunc * Eget porttitor lorem The rendered output looks like this: Lorem ipsum dolor sit amet Consectetur adipiscing elit Integer molestie lorem at massa Facilisis in pretium nisl aliquet Nulla volutpat aliquam velit Phasellus iaculis neque Purus sodales ultricies Vestibulum laoreet porttitor sem Ac tristique libero volutpat at Faucibus porta lacus fringilla vel Aenean sit amet erat nunc Eget porttitor lorem The HTML looks like this: \u003cul\u003e \u003cli\u003eLorem ipsum dolor sit amet\u003c/li\u003e \u003cli\u003eConsectetur adipiscing elit\u003c/li\u003e \u003cli\u003eInteger molestie lorem at massa\u003c/li\u003e \u003cli\u003eFacilisis in pretium nisl aliquet\u003c/li\u003e \u003cli\u003eNulla volutpat aliquam velit \u003cul\u003e \u003cli\u003ePhasellus iaculis neque\u003c/li\u003e \u003cli\u003ePurus sodales ultricies\u003c/li\u003e \u003cli\u003eVestibulum laoreet porttitor sem\u003c/li\u003e \u003cli\u003eAc tristique libero volutpat at\u003c/li\u003e \u003c/ul\u003e \u003c/li\u003e \u003cli\u003eFaucibus porta lacus fringilla vel\u003c/li\u003e \u003cli\u003eAenean sit amet erat nunc\u003c/li\u003e \u003cli\u003eEget porttitor lorem\u003c/li\u003e \u003c/ul\u003e ","date":"10140-12-12","objectID":"/junior-engineers-learning-journal/others-basic-markdown-syntax/:8:1","tags":["Markdown","HTML"],"title":"Basic Markdown Syntax","uri":"/junior-engineers-learning-journal/others-basic-markdown-syntax/"},{"categories":["Markdown"],"content":"Ordered A list of items in which the order of items does explicitly matter. 1. Lorem ipsum dolor sit amet 2. Consectetur adipiscing elit 3. Integer molestie lorem at massa 4. Facilisis in pretium nisl aliquet 5. Nulla volutpat aliquam velit 6. Faucibus porta lacus fringilla vel 7. Aenean sit amet erat nunc 8. Eget porttitor lorem The rendered output looks like this: Lorem ipsum dolor sit amet Consectetur adipiscing elit Integer molestie lorem at massa Facilisis in pretium nisl aliquet Nulla volutpat aliquam velit Faucibus porta lacus fringilla vel Aenean sit amet erat nunc Eget porttitor lorem The HTML looks like this: \u003col\u003e \u003cli\u003eLorem ipsum dolor sit amet\u003c/li\u003e \u003cli\u003eConsectetur adipiscing elit\u003c/li\u003e \u003cli\u003eInteger molestie lorem at massa\u003c/li\u003e \u003cli\u003eFacilisis in pretium nisl aliquet\u003c/li\u003e \u003cli\u003eNulla volutpat aliquam velit\u003c/li\u003e \u003cli\u003eFaucibus porta lacus fringilla vel\u003c/li\u003e \u003cli\u003eAenean sit amet erat nunc\u003c/li\u003e \u003cli\u003eEget porttitor lorem\u003c/li\u003e \u003c/ol\u003e Tip If you just use 1. for each number, Markdown will automatically number each item. For example: 1. Lorem ipsum dolor sit amet 1. Consectetur adipiscing elit 1. Integer molestie lorem at massa 1. Facilisis in pretium nisl aliquet 1. Nulla volutpat aliquam velit 1. Faucibus porta lacus fringilla vel 1. Aenean sit amet erat nunc 1. Eget porttitor lorem The rendered output looks like this: Lorem ipsum dolor sit amet Consectetur adipiscing elit Integer molestie lorem at massa Facilisis in pretium nisl aliquet Nulla volutpat aliquam velit Faucibus porta lacus fringilla vel Aenean sit amet erat nunc Eget porttitor lorem ","date":"10140-12-12","objectID":"/junior-engineers-learning-journal/others-basic-markdown-syntax/:8:2","tags":["Markdown","HTML"],"title":"Basic Markdown Syntax","uri":"/junior-engineers-learning-journal/others-basic-markdown-syntax/"},{"categories":["Markdown"],"content":"Task Lists Task lists allow you to create a list of items with checkboxes. To create a task list, add dashes (-) and brackets with a space ([ ]) before task list items. To select a checkbox, add an x in between the brackets ([x]). - [x] Write the press release - [ ] Update the website - [ ] Contact the media The rendered output looks like this: Write the press release Update the website Contact the media ","date":"10140-12-12","objectID":"/junior-engineers-learning-journal/others-basic-markdown-syntax/:8:3","tags":["Markdown","HTML"],"title":"Basic Markdown Syntax","uri":"/junior-engineers-learning-journal/others-basic-markdown-syntax/"},{"categories":["Markdown"],"content":"9 Code ","date":"10140-12-12","objectID":"/junior-engineers-learning-journal/others-basic-markdown-syntax/:9:0","tags":["Markdown","HTML"],"title":"Basic Markdown Syntax","uri":"/junior-engineers-learning-journal/others-basic-markdown-syntax/"},{"categories":["Markdown"],"content":"Inline Code Wrap inline snippets of code with `. In this example, `\u003csection\u003e\u003c/section\u003e` should be wrapped as **code**. The rendered output looks like this: In this example, \u003csection\u003e\u003c/section\u003e should be wrapped as code. The HTML looks like this: \u003cp\u003e In this example, \u003ccode\u003e\u0026lt;section\u0026gt;\u0026lt;/section\u0026gt;\u003c/code\u003e should be wrapped with \u003cstrong\u003ecode\u003c/strong\u003e. \u003c/p\u003e ","date":"10140-12-12","objectID":"/junior-engineers-learning-journal/others-basic-markdown-syntax/:9:1","tags":["Markdown","HTML"],"title":"Basic Markdown Syntax","uri":"/junior-engineers-learning-journal/others-basic-markdown-syntax/"},{"categories":["Markdown"],"content":"Indented Code Or indent several lines of code by at least four spaces, as in: // Some comments line 1 of code line 2 of code line 3 of code The rendered output looks like this: // Some comments line 1 of code line 2 of code line 3 of code The HTML looks like this: \u003cpre\u003e \u003ccode\u003e // Some comments line 1 of code line 2 of code line 3 of code \u003c/code\u003e \u003c/pre\u003e ","date":"10140-12-12","objectID":"/junior-engineers-learning-journal/others-basic-markdown-syntax/:9:2","tags":["Markdown","HTML"],"title":"Basic Markdown Syntax","uri":"/junior-engineers-learning-journal/others-basic-markdown-syntax/"},{"categories":["Markdown"],"content":"Block Fenced Code Use “fences” ``` to block in multiple lines of code with a language attribute. ```markdown Sample text here... ``` The HTML looks like this: \u003cpre language-html\u003e \u003ccode\u003eSample text here...\u003c/code\u003e \u003c/pre\u003e ","date":"10140-12-12","objectID":"/junior-engineers-learning-journal/others-basic-markdown-syntax/:9:3","tags":["Markdown","HTML"],"title":"Basic Markdown Syntax","uri":"/junior-engineers-learning-journal/others-basic-markdown-syntax/"},{"categories":["Markdown"],"content":"Syntax Highlighting GFMGitHub Flavored Markdown also supports syntax highlighting. To activate it, simply add the file extension of the language you want to use directly after the first code “fence”, ```js, and syntax highlighting will automatically be applied in the rendered HTML. For example, to apply syntax highlighting to JavaScript code: ```js grunt.initConfig({ assemble: { options: { assets: 'docs/assets', data: 'src/data/*.{json,yml}', helpers: 'src/custom-helpers.js', partials: ['src/partials/**/*.{hbs,md}'] }, pages: { options: { layout: 'default.hbs' }, files: { './': ['src/templates/pages/index.hbs'] } } } }; ``` The rendered output looks like this: grunt.initConfig({ assemble: { options: { assets: 'docs/assets', data: 'src/data/*.{json,yml}', helpers: 'src/custom-helpers.js', partials: ['src/partials/**/*.{hbs,md}'] }, pages: { options: { layout: 'default.hbs' }, files: { './': ['src/templates/pages/index.hbs'] } } } }; Note Syntax highlighting page in Hugo Docs introduces more about syntax highlighting, including highlight shortcode. ","date":"10140-12-12","objectID":"/junior-engineers-learning-journal/others-basic-markdown-syntax/:9:4","tags":["Markdown","HTML"],"title":"Basic Markdown Syntax","uri":"/junior-engineers-learning-journal/others-basic-markdown-syntax/"},{"categories":["Markdown"],"content":"10 Tables Tables are created by adding pipes as dividers between each cell, and by adding a line of dashes (also separated by bars) beneath the header. Note that the pipes do not need to be vertically aligned. | Option | Description | | ------ | ----------- | | data | path to data files to supply the data that will be passed into templates. | | engine | engine to be used for processing templates. Handlebars is the default. | | ext | extension to be used for dest files. | The rendered output looks like this: Option Description data path to data files to supply the data that will be passed into templates. engine engine to be used for processing templates. Handlebars is the default. ext extension to be used for dest files. The HTML looks like this: \u003ctable\u003e \u003cthead\u003e \u003ctr\u003e \u003cth\u003eOption\u003c/th\u003e \u003cth\u003eDescription\u003c/th\u003e \u003c/tr\u003e \u003c/thead\u003e \u003ctbody\u003e \u003ctr\u003e \u003ctd\u003edata\u003c/td\u003e \u003ctd\u003epath to data files to supply the data that will be passed into templates.\u003c/td\u003e \u003c/tr\u003e \u003ctr\u003e \u003ctd\u003eengine\u003c/td\u003e \u003ctd\u003eengine to be used for processing templates. Handlebars is the default.\u003c/td\u003e \u003c/tr\u003e \u003ctr\u003e \u003ctd\u003eext\u003c/td\u003e \u003ctd\u003eextension to be used for dest files.\u003c/td\u003e \u003c/tr\u003e \u003c/tbody\u003e \u003c/table\u003e Right or center aligned text Adding a colon on the right side of the dashes below any heading will right align text for that column. Adding colons on both sides of the dashes below any heading will center align text for that column. | Option | Description | |:------:| -----------:| | data | path to data files to supply the data that will be passed into templates. | | engine | engine to be used for processing templates. Handlebars is the default. | | ext | extension to be used for dest files. | The rendered output looks like this: Option Description data path to data files to supply the data that will be passed into templates. engine engine to be used for processing templates. Handlebars is the default. ext extension to be used for dest files. ","date":"10140-12-12","objectID":"/junior-engineers-learning-journal/others-basic-markdown-syntax/:10:0","tags":["Markdown","HTML"],"title":"Basic Markdown Syntax","uri":"/junior-engineers-learning-journal/others-basic-markdown-syntax/"},{"categories":["Markdown"],"content":"11 Links ","date":"10140-12-12","objectID":"/junior-engineers-learning-journal/others-basic-markdown-syntax/:11:0","tags":["Markdown","HTML"],"title":"Basic Markdown Syntax","uri":"/junior-engineers-learning-journal/others-basic-markdown-syntax/"},{"categories":["Markdown"],"content":"Basic Link \u003chttps://assemble.io\u003e \u003ccontact@revolunet.com\u003e [Assemble](https://assemble.io) The rendered output looks like this (hover over the link, there is no tooltip): https://assemble.io contact@revolunet.com Assemble The HTML looks like this: \u003ca href=\"https://assemble.io\"\u003ehttps://assemble.io\u003c/a\u003e \u003ca href=\"mailto:contact@revolunet.com\"\u003econtact@revolunet.com\u003c/a\u003e \u003ca href=\"https://assemble.io\"\u003eAssemble\u003c/a\u003e ","date":"10140-12-12","objectID":"/junior-engineers-learning-journal/others-basic-markdown-syntax/:11:1","tags":["Markdown","HTML"],"title":"Basic Markdown Syntax","uri":"/junior-engineers-learning-journal/others-basic-markdown-syntax/"},{"categories":["Markdown"],"content":"Add a Title [Upstage](https://github.com/upstage/ \"Visit Upstage!\") The rendered output looks like this (hover over the link, there should be a tooltip): Upstage The HTML looks like this: \u003ca href=\"https://github.com/upstage/\" title=\"Visit Upstage!\"\u003eUpstage\u003c/a\u003e ","date":"10140-12-12","objectID":"/junior-engineers-learning-journal/others-basic-markdown-syntax/:11:2","tags":["Markdown","HTML"],"title":"Basic Markdown Syntax","uri":"/junior-engineers-learning-journal/others-basic-markdown-syntax/"},{"categories":["Markdown"],"content":"Named Anchors Named anchors enable you to jump to the specified anchor point on the same page. For example, each of these chapters: ## Table of Contents * [Chapter 1](#chapter-1) * [Chapter 2](#chapter-2) * [Chapter 3](#chapter-3) will jump to these sections: ## Chapter 1 \u003ca id=\"chapter-1\"\u003e\u003c/a\u003e Content for chapter one. ## Chapter 2 \u003ca id=\"chapter-2\"\u003e\u003c/a\u003e Content for chapter one. ## Chapter 3 \u003ca id=\"chapter-3\"\u003e\u003c/a\u003e Content for chapter one. Note The specific placement of the anchor tag seems to be arbitrary. They are placed inline here since it seems to be unobtrusive, and it works. ","date":"10140-12-12","objectID":"/junior-engineers-learning-journal/others-basic-markdown-syntax/:11:3","tags":["Markdown","HTML"],"title":"Basic Markdown Syntax","uri":"/junior-engineers-learning-journal/others-basic-markdown-syntax/"},{"categories":["Markdown"],"content":"12 Footnotes Footnotes allow you to add notes and references without cluttering the body of the document. When you create a footnote, a superscript number with a link appears where you added the footnote reference. Readers can click the link to jump to the content of the footnote at the bottom of the page. To create a footnote reference, add a caret and an identifier inside brackets ([^1]). Identifiers can be numbers or words, but they can’t contain spaces or tabs. Identifiers only correlate the footnote reference with the footnote itself — in the output, footnotes are numbered sequentially. Add the footnote using another caret and number inside brackets with a colon and text ([^1]: My footnote.). You don’t have to put footnotes at the end of the document. You can put them anywhere except inside other elements like lists, block quotes, and tables. This is a digital footnote[^1]. This is a footnote with \"label\"[^label] [^1]: This is a digital footnote [^label]: This is a footnote with \"label\" This is a digital footnote1. This is a footnote with “label”2 ","date":"10140-12-12","objectID":"/junior-engineers-learning-journal/others-basic-markdown-syntax/:12:0","tags":["Markdown","HTML"],"title":"Basic Markdown Syntax","uri":"/junior-engineers-learning-journal/others-basic-markdown-syntax/"},{"categories":["Markdown"],"content":"13 Images Images have a similar syntax to links but include a preceding exclamation point. ![Minion](https://octodex.github.com/images/minion.png) or: ![Alt text](https://octodex.github.com/images/stormtroopocat.jpg \"The Stormtroopocat\") The Stormtroopocat Like links, images also have a footnote style syntax: ![Alt text][id] The Dojocat With a reference later in the document defining the URL location: [id]: https://octodex.github.com/images/dojocat.jpg \"The Dojocat\" Tip LoveIt theme has special shortcode for image, which provides more features. This is a digital footnote ↩︎ This is a footnote with “label” ↩︎ ","date":"10140-12-12","objectID":"/junior-engineers-learning-journal/others-basic-markdown-syntax/:13:0","tags":["Markdown","HTML"],"title":"Basic Markdown Syntax","uri":"/junior-engineers-learning-journal/others-basic-markdown-syntax/"},{"categories":null,"content":"About","date":"1010-01-01","objectID":"/junior-engineers-learning-journal/about/","tags":null,"title":"About","uri":"/junior-engineers-learning-journal/about/"},{"categories":null,"content":"このブログについて ","date":"1010-01-01","objectID":"/junior-engineers-learning-journal/about/:1:0","tags":null,"title":"About","uri":"/junior-engineers-learning-journal/about/"},{"categories":null,"content":"目的 学んだ内容をアウトプットすることによる学習効率の向上 外部に公開することによるモチベーションの向上 自己満足 ","date":"1010-01-01","objectID":"/junior-engineers-learning-journal/about/:1:1","tags":null,"title":"About","uri":"/junior-engineers-learning-journal/about/"},{"categories":null,"content":"主な内容 以下のようなカテゴリで、日々の学んだ内容や所感をまとめています。  OS  Network  Security  Database, Storage  Data Science  Cloud  Virtualization  Hardware  System Design, Deployment, and Management  Finace  Basic Theory  Others ","date":"1010-01-01","objectID":"/junior-engineers-learning-journal/about/:1:2","tags":null,"title":"About","uri":"/junior-engineers-learning-journal/about/"},{"categories":null,"content":"基本情報  執筆開始：2025年3月  著者：しぶや ","date":"1010-01-01","objectID":"/junior-engineers-learning-journal/about/:1:3","tags":null,"title":"About","uri":"/junior-engineers-learning-journal/about/"},{"categories":null,"content":"著者 ","date":"1010-01-01","objectID":"/junior-engineers-learning-journal/about/:2:0","tags":null,"title":"About","uri":"/junior-engineers-learning-journal/about/"},{"categories":null,"content":"自己紹介 初めまして、しぶやです。某大手SIerでセキュリティやってます。 名前：しぶや 職種：SIer 分野：金融 部署：セキュリティ技術支援 得意分野：迷走中.. 趣味：自宅鯖いじり / 技術検証 / 配信視聴（ゲームとか技術系とか） ","date":"1010-01-01","objectID":"/junior-engineers-learning-journal/about/:2:1","tags":null,"title":"About","uri":"/junior-engineers-learning-journal/about/"},{"categories":null,"content":"経歴 2024年4月：国立大学 大学院 情報系 卒業 2025年4月~現在: 某大手SIer 金融分野 セキュリティチーム 某大規模金融システムのネットワーク設計? ","date":"1010-01-01","objectID":"/junior-engineers-learning-journal/about/:2:2","tags":null,"title":"About","uri":"/junior-engineers-learning-journal/about/"},{"categories":null,"content":"資格・実績  IPA 基本情報技術者試験  Linuc 101, 102 201, 202 303  AWS AWS Certified Cloud Practitioner AWS Certified AI Practitioner AWS Certified Solutions Architect Associate  Azure Microsoft Certified Azure Fundamentals Microsoft Certified Azure Administrator Associate Microsoft Certified Azure Solutions Architect Expert  GCP Google Cloud Certified Cloud Digital Leader Google Cloud Certified Associate Cloud Engineer Google Cloud Certified Professional Cloud Architect  Other Microsoft PowerPoint (Microsoft 365 Apps) Microsoft Word Expert (Microsoft 365 Apps) 金融IT検定 ","date":"1010-01-01","objectID":"/junior-engineers-learning-journal/about/:2:3","tags":null,"title":"About","uri":"/junior-engineers-learning-journal/about/"},{"categories":null,"content":"参考 このブログは、静的サイトジェネレーターの Hugo と、シンプルで美しいテーマ LoveIt を使って構築しております。  LoveIt is a clean, elegant but advanced blog theme for Hugo developed by  Dillon. It is based on the original LeaveIt Theme and KeepIt Theme. Hugo Theme LoveIt ","date":"1010-01-01","objectID":"/junior-engineers-learning-journal/about/:3:0","tags":null,"title":"About","uri":"/junior-engineers-learning-journal/about/"}]