[{"categories":["Network"],"content":"DNSを完全に理解する","date":"2025-04-13","objectID":"/junior-engineers-learning-journal/network-dns/","tags":["Network"],"title":"DNSを完全に理解する","uri":"/junior-engineers-learning-journal/network-dns/"},{"categories":["Network"],"content":" DNS CAAレコード この意味 RSIGレコード SPFレコード DNS SEC TSIG カミンスキー攻撃 SPF nslookup, digが行っていること。通信の中身 DNSアンプ攻撃 DNSリフレクタ攻撃 DNSSECは権威DNSとキャッシュDNSの間、クライアントとの間はdns over tlsとか キャッシュポイズニングとID的なやつ ポートランダマイゼーション　2.6.1 ファーミング DNSアンプ キャッシュサーバ公開しない どうやってレスをでかくする？ DNSトンネリング 権威DNSも返してくれるけどrecursion noなので、再起問い合わせしてくれない FAST FLUX Domain flux IDNA DDNS こんにちは、しぶやです。 今回はDNSを完全に理解していきます。 本記事では、Linuxをベースに説明を行いますが、本質的な部分はWindowsにも通じる話だと思います。 ","date":"2025-04-13","objectID":"/junior-engineers-learning-journal/network-dns/:0:0","tags":["Network"],"title":"DNSを完全に理解する","uri":"/junior-engineers-learning-journal/network-dns/"},{"categories":["Network"],"content":"TL;DR ","date":"2025-04-13","objectID":"/junior-engineers-learning-journal/network-dns/:1:0","tags":["Network"],"title":"DNSを完全に理解する","uri":"/junior-engineers-learning-journal/network-dns/"},{"categories":["Network"],"content":"0　はじめに 読者のみなさんはDNSについて、どこまで理解していますか？ 「名前解決してくれるやつ」くらいに思っていましたが、メールの認証で使われていたりといろいろと深い部分があるようです。 今回はDNSについて深堀って学んでみます。 ","date":"2025-04-13","objectID":"/junior-engineers-learning-journal/network-dns/:2:0","tags":["Network"],"title":"DNSを完全に理解する","uri":"/junior-engineers-learning-journal/network-dns/"},{"categories":["Network"],"content":"1　DNS基礎 ","date":"2025-04-13","objectID":"/junior-engineers-learning-journal/network-dns/:3:0","tags":["Network"],"title":"DNSを完全に理解する","uri":"/junior-engineers-learning-journal/network-dns/"},{"categories":["Network"],"content":"1.1　DNSとは？ DNSとは何でしょうか？まずは定義を見てみましょう。 DNS(ディーエヌエス: Domain Name System)は、 インターネットの重要な基盤技術の一つで、 ドメイン名とIPアドレスの対応付けや、 メールの宛先ホストを指示するためのシステムです。 名前解決をするためのシステムということですね。 記事にはhosts.txsからDNSへとあることからも分かりますが、\"/etc/hosts\"はDNSではないようです。 システムではなく、テキストファイルという枠組みなのでしょう。 ","date":"2025-04-13","objectID":"/junior-engineers-learning-journal/network-dns/:3:1","tags":["Network"],"title":"DNSを完全に理解する","uri":"/junior-engineers-learning-journal/network-dns/"},{"categories":["Network"],"content":"1.2　名前解決の流れ ここで、Linuxでの名前解決を復習しましょう。Linuxではnsswitch.confで名前解決の優先度が記載されています。 /etc/nsswitch.conf hosts: files dns これは、名前解決の方法の順番を表しています。 アプリケーションのプロセスはlibcライブラリのgetaddrinfo()などから、名前解決を行なっています。 このとき、上記のような設定になっていると、まず\"/etc/hosts\"を確認し、名前解決できなかった場合はDNSに確認しに行きます。 ここでいうDNSは\"/etc/resolv.conf\"に記載されているものです。 “/etc/nsswitch.conf\"に出てくる主なものとその意味は以下です。 files…/etc/hostsに従って名前解決を行う dns…/etc/resolv.confに従ってDNSを利用した名前解決を行う mdns4…マルチキャストDNSを使って名前解決を行う mymachines…systemdによって管理されているローカルの仮想マシンやコンテナの名前解決を行う マルチキャストDNSとは マルチキャストDNS（mDNS）とはその名の通り、マルチキャストで利用するDNSです。 具体的には以下のような特徴があります。 同一セグメント内のみで有効 マルチキャスト宛に送信 受け取ったノードが応答を返す ","date":"2025-04-13","objectID":"/junior-engineers-learning-journal/network-dns/:3:2","tags":["Network"],"title":"DNSを完全に理解する","uri":"/junior-engineers-learning-journal/network-dns/"},{"categories":["Network"],"content":"1.2　DNSの仕組み DNSには大きく2つの種類があります。 権威DNSサーバ キャッシュDNSサーバ 権威DNSサーバはゾーンファイルを持っています。 ゾーンファイルには、名前解決に必要なドメイン名とIPアドレスの組を始め、いくつかの情報を持っています。 権威DNSサーバはこのゾーンファイルの情報を利用し、名前解決に対し応答を行っています。 一方で、キャッシュDNSサーバはゾーンファイルを持ちません。 キャッシュDNSはDNS要求を受け取り、クライアントの変わりに再帰的に権威DNSサーバなどに名前解決を行い、結果をクライアントに返します。 キャッシュという名前にもある通り、過去のデータはキャッシュに保存しており、DNS要求を受け取った際にキャッシュにレコードを持っていれば、再起問い合わせなしにそのままクライアントに返すことができます。 DNSの種類が分かったところで、世の中のDNSの動きを見てみたいと思います。 /etc/resolv.conf 上の図は実際に名前解決をする流れです。 ローカルでの名前解決 Webサイト訪問でも何でも良いですが、クライアントがドメイン名を利用し通信を行おうとした際、1.1で説明した”/etc/nsswitch.conf\"に従った名前解決の方法で名前解決を試みます。 クライアントがDNSキャッシュサーバへDNS要求 “/etc/nsswitch.conf\"でDNSの順番が来た際は、\"/etc/resolv.conf\"に記載されたDNSサーバに対し順番に名前解決を試みます。 一般的なPC利用をしている場合はキャッシュDNSサーバに問い合わせが行われるはずです。 キャッシュDNSサーバによる名前解決 クライアントからのDNS要求に対し、キャッシュを持っていればそれをそのまま返します。 キャッシュを持っていない場合は、ルートDNSサーバに再起問い合わせを行います。 ルートDNSサーバによる名前解決 キャッシュDNSサーバからDNS要求を受け取った際、ルートDNSサーバは受け取ったDNS要求の上位ドメインのDNSサーバの情報を返します。 上の例で言うと、「jpドメインの情報ならhoge.dns.jpが持っているよ〜」みたいな感じです。 権威DNSサーバによる名前解決 受け取ったDNS要求に対し、自身がゾーン情報を持っている場合はその情報を返します。 3と同じように、DNS要求を受けたドメイン情報を持つ、さらに下位のDNSサーバの情報を返す場合もあります。 以上がDNSの仕組みです。 世の中での動きが分かると理解が深まりますね。 キャッシュDNSサーバの登録 普段キャッシュDNSサーバなんて意識せずに利用できています。 これはなぜでしょうか？ 答えはDHCPプロトコルにあります。 PCはWifiなどに接続した際、DCHPによりIPアドレスやデフォルトGWの情報を受けとります。 実はこの際に、DNSサーバの情報も受け取ることが多いのです。 これにより、DNSサーバを自ら設定する必要がなくなります。 家庭用のルータを利用した際は、ルータ自身がキャッシュDNSとしての機能を持っていたり、ISPのキャッシュDNSが利用されていたりします。 ルートDNS ルートDNSサーバは世界に13個あります。 日本にも存在し、m.root-servers.netがJPRS（株式会社日本レジストリサービス）によって運用されています。 ※ 昔は僕の母校にもおいてあったらしい。。（驚） ","date":"2025-04-13","objectID":"/junior-engineers-learning-journal/network-dns/:3:3","tags":["Network"],"title":"DNSを完全に理解する","uri":"/junior-engineers-learning-journal/network-dns/"},{"categories":["Network"],"content":"1.3　DNSレコード では、DNSのゾーンファイルとはどのようなものでしょうか？ 以下はOSSのDNSであるbind vにデフォルトで組み込まれたゾーンファイルのテンプレートです。 具体的なレコードについて例と一緒に見ていきましょう。 ＊ Aレコード example.com. IN A 192.168.0.1 最も一般的なレコードです。ドメイン名に対するIPアドレスを設定し、名前解決に利用されます。 ＊ AAAAレコード example.com. IN AAAA 2001:db8::1 IPv6用のAレコードです。 ＊ CNAMEレコード www.example.com. IN CNAME example.com. ドメイン名のエイリアスを設定するためのレコードです。 最も簡単な例が上記のwww.example.comに訪れても、example.comに訪れるようにするという設定です。 なんとなく想像はつくかもしれませんが、クライアント（基本的にはキャッシュDNSサーバ）の動きとしては、返されたCNAMEに対し再びDNSクエリを送信します。 他にも以下のような例があります。 www.example.comのDNSクエリはCNAMEとしてlb.example.comを返します。lb.example.comは複数のAレコードを持っており、DNSクエリに応じて返すIPアドレスを変えることで負荷分散を行います。 ＊ NSレコード example.com. IN CNAME ns1.example.com NSレコードはドメインを権威DNSサーバに委任するためのレコードです。 すなわち、example.comのドメイン情報はns1.example.comが持っているよーを返すためのレコードです。 CNAMEと同じようにクライアント(キャッシュDNSサーバ)はNSレコードを元に再度DNSクエリを送信します。 ルートDNSサーバのゾーンファイル ルートDNSサーバはトップレベルドメインのDNSサーバの情報を持っています。これにより、DNS要求を各トップレベルドメインのDNSサーバに委任するのです。 具体的なゾーンファイルは以下のようになっているみたいです。 ＊ MXレコード example.com. IN MX 10 mail.example.com MXレコードは送信先ドメインのメールサーバのドメインを得るためのレコードです。 メール送信時の流れは以下です。 送信側のサーバはまずDNSに問い合わせてMXレコードを探す。 見つかったMXレコードに記載されているメールサーバのドメインの名前解決を行う。 ※ すなわち、MXレコードで指定したドメインのAレコード/AAAAレコードも必要です。 2で解決したIPアドレスにメールを送信する。 DNSクエリのQuestion DNSクエリに対し、IPアドレスを返す場合もあれば、メールサーバのドメイン名を返す場合もあると思います。 クライアントはこれをどのように要求し、DNSはどう見分けて返しているのでしょうか？ 答えはDNSクエリの中にあります。 DNSエリにはQuestionセクションというセクションがあり、その中のTypeで要求するレコードタイプを指定します。 これにより、DNSは応答するレコードを判断しているのです。 ＊ TXTレコード ＊ SRVレコード SPFレコード、DKIMレコード、DMARCレコード この辺りはメールの送信ドメイン認証のために使われるレコードです。DNSのレコードタイプとしてはTXTです。 これらの詳細は「メールを完全に理解する」で確認しようと思います。今はテキストとしてメールのドメイン認証に使うレコードを持っているんだなくらいに思っておきましょう。 ＊ SOAレコード soaレコード example.com. IN SOA ns1.example.com. hostmaster.example.com. ( 2025041601 ; serial 3600 ; refresh 600 ; retry 604800 ; expire 86400 ; minimum ) SOAとは「Start of Authority」の略です。権威の起点を示しています。 SOAレコードはゾーンに必ずに一つだけ存在し、ゾーンに関する様々な情報を保持しています。 上記の例の意味は以下です。 ＊ ns1.example.com. … プライマリDNSサーバ ＊ hostmaster.example.com. … 管理者メールアドレス ＊ serial … シリアル番号 ＊ reflesh … リフレッシュ間隔(秒) ＊ retry … リトライ間隔(秒) ＊ expire … 有効期限(秒) ＊ minimum … キャッシュ最小TTL ","date":"2025-04-13","objectID":"/junior-engineers-learning-journal/network-dns/:3:4","tags":["Network"],"title":"DNSを完全に理解する","uri":"/junior-engineers-learning-journal/network-dns/"},{"categories":["Network"],"content":"1.4　運用者からみたDNS ここで、よりイメージを具体化するためにDNS/ドメインの運用を見てみましょう。 ここでは、適当に立てたWebサーバを外部に公開し、ドメイン名でアクセスできるようにするケースを考えます。 公開Webサーバの準備 ここでは詳しい説明は飛ばします。Webサーバを立て、外部からIPアドレスでアクセスできるようにします。 ドメインの取得 まずはドメインを取得します。 この時に利用するのがレジストラです。 有名なレジストラとしては\"お名前.com\"などがありますね。 以下はお名前.comでドメインを取得するときの画面です。 お名前.comの写真 このように、ドメイン名によっては無料で取得できるものも多くあります。アカウントさえ登録すれば、簡単にドメインを取得できます。 DNSへの登録 前節であったようなレコードをDNSにサーバに登録する必要があります。DNSサーバの登録では大きく2つの分岐があります。 ＊ 自前DNSサーバを利用する 自分でDNSサーバを用意し、そこにゾーンファイルを置きます。 ＊ 他社のDNSに相乗りする 他社のDNSにレコードを登録します。今回の例だと簡単なのはレジストラが提供しているDNSサーバを利用する方法です。 以下がお名前.comのDNSサーバの登録画面です。 お名前.comの登録画面 レジストラが提供するDNSサーバ以外の例として、クラウドが提供するDNSサーバがあります。 クラウドでWebサーバを構築している場合はそちらに登録するのが良いと思います。 DNSレコードの伝播/アクセス確認 DNSレコードの伝播には時間がかかる可能性があります。 これはキャッシュDNSサーバが古いレコードの情報を持っている可能性があるためです。 DNSキャッシュサーバはDNSレコードに記載されているTTL(Time to Live)の時間が経つまでは再起問い合わせを行わずキャッシュのデータを返します。 このためDNSキャッシュサーバのキャッシュが更新されるまで待つ必要があるのです。 DNSレコードの伝播が終われば、アクセス確認をして終わりです。 ICANN, レジストラ、レジストリ 先ほどさらっとレジストラが登場しました。この辺りドメイン管理には3つの登場人物 DDNS DDNSとはDynamic DNSの略です。自宅鯖とかでよく見ますね。 DDNSは、ISPから割り当てられた動的IPアドレスをドメインに紐づけるためにあります。これにより、サーバのIPアドレスが変わっても同じドメインでアクセスできるようになります。 仕組みとしては単純です。サーバ側でWAN側IPが変わった時にDDNSサーバに対し、IPアドレスが変わったことを通知し、DDNSがドメインに対応するIPを書き換えるのです。ここでは主にHTTPリクエストでAPIを叩く方式が利用されているようです。 ","date":"2025-04-13","objectID":"/junior-engineers-learning-journal/network-dns/:3:5","tags":["Network"],"title":"DNSを完全に理解する","uri":"/junior-engineers-learning-journal/network-dns/"},{"categories":["Network"],"content":"2　通信 ","date":"2025-04-13","objectID":"/junior-engineers-learning-journal/network-dns/:4:0","tags":["Network"],"title":"DNSを完全に理解する","uri":"/junior-engineers-learning-journal/network-dns/"},{"categories":["Network"],"content":"2.1　プロトコル ルートDNSにはNSレコードがたくさんあるイメージ ","date":"2025-04-13","objectID":"/junior-engineers-learning-journal/network-dns/:4:1","tags":["Network"],"title":"DNSを完全に理解する","uri":"/junior-engineers-learning-journal/network-dns/"},{"categories":["Network"],"content":"2.3　可用性/冗長性 ","date":"2025-04-13","objectID":"/junior-engineers-learning-journal/network-dns/:4:2","tags":["Network"],"title":"DNSを完全に理解する","uri":"/junior-engineers-learning-journal/network-dns/"},{"categories":["Network"],"content":"3　セキュリティ ","date":"2025-04-13","objectID":"/junior-engineers-learning-journal/network-dns/:5:0","tags":["Network"],"title":"DNSを完全に理解する","uri":"/junior-engineers-learning-journal/network-dns/"},{"categories":["Network"],"content":"参考 [1] インターネット10分講座：DNS ","date":"2025-04-13","objectID":"/junior-engineers-learning-journal/network-dns/:6:0","tags":["Network"],"title":"DNSを完全に理解する","uri":"/junior-engineers-learning-journal/network-dns/"},{"categories":["Application"],"content":"HTTPを完全に理解する","date":"2025-04-13","objectID":"/junior-engineers-learning-journal/application-http/","tags":["Application"],"title":"HTTPを完全に理解する","uri":"/junior-engineers-learning-journal/application-http/"},{"categories":["Application"],"content":" こんにちは、しぶやです。 今回はを完全に理解していきます。 ","date":"2025-04-13","objectID":"/junior-engineers-learning-journal/application-http/:0:0","tags":["Application"],"title":"HTTPを完全に理解する","uri":"/junior-engineers-learning-journal/application-http/"},{"categories":["Application"],"content":"TL;DR ","date":"2025-04-13","objectID":"/junior-engineers-learning-journal/application-http/:1:0","tags":["Application"],"title":"HTTPを完全に理解する","uri":"/junior-engineers-learning-journal/application-http/"},{"categories":["Application"],"content":"1　hoge ","date":"2025-04-13","objectID":"/junior-engineers-learning-journal/application-http/:2:0","tags":["Application"],"title":"HTTPを完全に理解する","uri":"/junior-engineers-learning-journal/application-http/"},{"categories":["Application"],"content":"1.1　hoge ","date":"2025-04-13","objectID":"/junior-engineers-learning-journal/application-http/:2:1","tags":["Application"],"title":"HTTPを完全に理解する","uri":"/junior-engineers-learning-journal/application-http/"},{"categories":["Application"],"content":"参考 [1] ","date":"2025-04-13","objectID":"/junior-engineers-learning-journal/application-http/:3:0","tags":["Application"],"title":"HTTPを完全に理解する","uri":"/junior-engineers-learning-journal/application-http/"},{"categories":["Network"],"content":"IPを完全に理解する","date":"2025-04-13","objectID":"/junior-engineers-learning-journal/network-ip/","tags":["Network"],"title":"IPを完全に理解する","uri":"/junior-engineers-learning-journal/network-ip/"},{"categories":["Network"],"content":" こんにちは、しぶやです。 今回はを完全に理解していきます。 ","date":"2025-04-13","objectID":"/junior-engineers-learning-journal/network-ip/:0:0","tags":["Network"],"title":"IPを完全に理解する","uri":"/junior-engineers-learning-journal/network-ip/"},{"categories":["Network"],"content":"TL;DR ","date":"2025-04-13","objectID":"/junior-engineers-learning-journal/network-ip/:1:0","tags":["Network"],"title":"IPを完全に理解する","uri":"/junior-engineers-learning-journal/network-ip/"},{"categories":["Network"],"content":"1　hoge ","date":"2025-04-13","objectID":"/junior-engineers-learning-journal/network-ip/:2:0","tags":["Network"],"title":"IPを完全に理解する","uri":"/junior-engineers-learning-journal/network-ip/"},{"categories":["Network"],"content":"1.1　hoge ","date":"2025-04-13","objectID":"/junior-engineers-learning-journal/network-ip/:2:1","tags":["Network"],"title":"IPを完全に理解する","uri":"/junior-engineers-learning-journal/network-ip/"},{"categories":["Network"],"content":"参考 [1] ","date":"2025-04-13","objectID":"/junior-engineers-learning-journal/network-ip/:3:0","tags":["Network"],"title":"IPを完全に理解する","uri":"/junior-engineers-learning-journal/network-ip/"},{"categories":["Network"],"content":"TCPを完全に理解する","date":"2025-04-13","objectID":"/junior-engineers-learning-journal/network-tcp/","tags":["Network"],"title":"TCPを完全に理解する","uri":"/junior-engineers-learning-journal/network-tcp/"},{"categories":["Network"],"content":" こんにちは、しぶやです。 今回はを完全に理解していきます。 ","date":"2025-04-13","objectID":"/junior-engineers-learning-journal/network-tcp/:0:0","tags":["Network"],"title":"TCPを完全に理解する","uri":"/junior-engineers-learning-journal/network-tcp/"},{"categories":["Network"],"content":"TL;DR ","date":"2025-04-13","objectID":"/junior-engineers-learning-journal/network-tcp/:1:0","tags":["Network"],"title":"TCPを完全に理解する","uri":"/junior-engineers-learning-journal/network-tcp/"},{"categories":["Network"],"content":"1　hoge ","date":"2025-04-13","objectID":"/junior-engineers-learning-journal/network-tcp/:2:0","tags":["Network"],"title":"TCPを完全に理解する","uri":"/junior-engineers-learning-journal/network-tcp/"},{"categories":["Network"],"content":"1.1　hoge ","date":"2025-04-13","objectID":"/junior-engineers-learning-journal/network-tcp/:2:1","tags":["Network"],"title":"TCPを完全に理解する","uri":"/junior-engineers-learning-journal/network-tcp/"},{"categories":["Network"],"content":"参考 [1] ","date":"2025-04-13","objectID":"/junior-engineers-learning-journal/network-tcp/:3:0","tags":["Network"],"title":"TCPを完全に理解する","uri":"/junior-engineers-learning-journal/network-tcp/"},{"categories":["Network"],"content":"UDPを完全に理解する","date":"2025-04-13","objectID":"/junior-engineers-learning-journal/network-udp/","tags":["Network"],"title":"UDPを完全に理解する","uri":"/junior-engineers-learning-journal/network-udp/"},{"categories":["Network"],"content":" こんにちは、しぶやです。 今回はを完全に理解していきます。 ","date":"2025-04-13","objectID":"/junior-engineers-learning-journal/network-udp/:0:0","tags":["Network"],"title":"UDPを完全に理解する","uri":"/junior-engineers-learning-journal/network-udp/"},{"categories":["Network"],"content":"TL;DR ","date":"2025-04-13","objectID":"/junior-engineers-learning-journal/network-udp/:1:0","tags":["Network"],"title":"UDPを完全に理解する","uri":"/junior-engineers-learning-journal/network-udp/"},{"categories":["Network"],"content":"1　hoge ","date":"2025-04-13","objectID":"/junior-engineers-learning-journal/network-udp/:2:0","tags":["Network"],"title":"UDPを完全に理解する","uri":"/junior-engineers-learning-journal/network-udp/"},{"categories":["Network"],"content":"1.1　hoge ","date":"2025-04-13","objectID":"/junior-engineers-learning-journal/network-udp/:2:1","tags":["Network"],"title":"UDPを完全に理解する","uri":"/junior-engineers-learning-journal/network-udp/"},{"categories":["Network"],"content":"参考 [1] ","date":"2025-04-13","objectID":"/junior-engineers-learning-journal/network-udp/:3:0","tags":["Network"],"title":"UDPを完全に理解する","uri":"/junior-engineers-learning-journal/network-udp/"},{"categories":["Application"],"content":"メールを完全に理解する","date":"2025-04-13","objectID":"/junior-engineers-learning-journal/application-mail/","tags":["Application"],"title":"メールを完全に理解する","uri":"/junior-engineers-learning-journal/application-mail/"},{"categories":["Application"],"content":" メール PGP M/MIME SMTP Auth SMTP 587 APOP POP3 IMAPS SMTP Submission OP25B IP25B メールの仕組み・構成 フィッシングについて考える mxレコードとaレコードがどう利用されているのか 中継するサーバは受信者と送信者のもののみなのか。パブリックな中継がある？ こんにちは、しぶやです。 今回はを完全に理解していきます。 ","date":"2025-04-13","objectID":"/junior-engineers-learning-journal/application-mail/:0:0","tags":["Application"],"title":"メールを完全に理解する","uri":"/junior-engineers-learning-journal/application-mail/"},{"categories":["Application"],"content":"TL;DR ","date":"2025-04-13","objectID":"/junior-engineers-learning-journal/application-mail/:1:0","tags":["Application"],"title":"メールを完全に理解する","uri":"/junior-engineers-learning-journal/application-mail/"},{"categories":["Application"],"content":"0　はじめに ","date":"2025-04-13","objectID":"/junior-engineers-learning-journal/application-mail/:2:0","tags":["Application"],"title":"メールを完全に理解する","uri":"/junior-engineers-learning-journal/application-mail/"},{"categories":["Application"],"content":"1　メール基礎 ","date":"2025-04-13","objectID":"/junior-engineers-learning-journal/application-mail/:3:0","tags":["Application"],"title":"メールを完全に理解する","uri":"/junior-engineers-learning-journal/application-mail/"},{"categories":["Application"],"content":"1.1　メールの基本と歴史 ","date":"2025-04-13","objectID":"/junior-engineers-learning-journal/application-mail/:3:1","tags":["Application"],"title":"メールを完全に理解する","uri":"/junior-engineers-learning-journal/application-mail/"},{"categories":["Application"],"content":"1.2　メールシステムの全体構成 ","date":"2025-04-13","objectID":"/junior-engineers-learning-journal/application-mail/:3:2","tags":["Application"],"title":"メールを完全に理解する","uri":"/junior-engineers-learning-journal/application-mail/"},{"categories":["Application"],"content":"1.3　送受信プロトコル ","date":"2025-04-13","objectID":"/junior-engineers-learning-journal/application-mail/:3:3","tags":["Application"],"title":"メールを完全に理解する","uri":"/junior-engineers-learning-journal/application-mail/"},{"categories":["Application"],"content":"2　セキュリティ ","date":"2025-04-13","objectID":"/junior-engineers-learning-journal/application-mail/:4:0","tags":["Application"],"title":"メールを完全に理解する","uri":"/junior-engineers-learning-journal/application-mail/"},{"categories":["Application"],"content":"2.1　暗号化 ","date":"2025-04-13","objectID":"/junior-engineers-learning-journal/application-mail/:4:1","tags":["Application"],"title":"メールを完全に理解する","uri":"/junior-engineers-learning-journal/application-mail/"},{"categories":["Application"],"content":"2.2　認証 ","date":"2025-04-13","objectID":"/junior-engineers-learning-journal/application-mail/:4:2","tags":["Application"],"title":"メールを完全に理解する","uri":"/junior-engineers-learning-journal/application-mail/"},{"categories":["Application"],"content":"参考 [1] ","date":"2025-04-13","objectID":"/junior-engineers-learning-journal/application-mail/:5:0","tags":["Application"],"title":"メールを完全に理解する","uri":"/junior-engineers-learning-journal/application-mail/"},{"categories":["セキュリティ"],"content":"セキュリティソリューションをまとめる","date":"2025-04-13","objectID":"/junior-engineers-learning-journal/security-solution/","tags":["セキュリティ"],"title":"セキュリティソリューションをまとめる","uri":"/junior-engineers-learning-journal/security-solution/"},{"categories":["セキュリティ"],"content":" セキュリティソリューション CASB sase SD-WAN SWG FWAAS ZTNA RBI CASB CSPM DLP UEBA CAASM NIST SP800 207 拡張ゼロトラスト こんにちは、しぶやです。 今回はを完全に理解していきます。 ","date":"2025-04-13","objectID":"/junior-engineers-learning-journal/security-solution/:0:0","tags":["セキュリティ"],"title":"セキュリティソリューションをまとめる","uri":"/junior-engineers-learning-journal/security-solution/"},{"categories":["セキュリティ"],"content":"TL;DR ","date":"2025-04-13","objectID":"/junior-engineers-learning-journal/security-solution/:1:0","tags":["セキュリティ"],"title":"セキュリティソリューションをまとめる","uri":"/junior-engineers-learning-journal/security-solution/"},{"categories":["セキュリティ"],"content":"1　hoge ","date":"2025-04-13","objectID":"/junior-engineers-learning-journal/security-solution/:2:0","tags":["セキュリティ"],"title":"セキュリティソリューションをまとめる","uri":"/junior-engineers-learning-journal/security-solution/"},{"categories":["セキュリティ"],"content":"1.1　hoge ","date":"2025-04-13","objectID":"/junior-engineers-learning-journal/security-solution/:2:1","tags":["セキュリティ"],"title":"セキュリティソリューションをまとめる","uri":"/junior-engineers-learning-journal/security-solution/"},{"categories":["セキュリティ"],"content":"参考 [1] ","date":"2025-04-13","objectID":"/junior-engineers-learning-journal/security-solution/:3:0","tags":["セキュリティ"],"title":"セキュリティソリューションをまとめる","uri":"/junior-engineers-learning-journal/security-solution/"},{"categories":["Security"],"content":"セキュリティ組織をまとめる","date":"2025-04-13","objectID":"/junior-engineers-learning-journal/security-organization/","tags":["Security"],"title":"セキュリティ組織をまとめる","uri":"/junior-engineers-learning-journal/security-organization/"},{"categories":["Security"],"content":" セキュリティ団体 CRYPTOREC NICT ダイダロス NOTICE 総合テストベッド IPA NISC JCSIP JPCERT/CC FIRST 経済産業省 セプターカウンシル こんにちは、しぶやです。 今回はを完全に理解していきます。 ","date":"2025-04-13","objectID":"/junior-engineers-learning-journal/security-organization/:0:0","tags":["Security"],"title":"セキュリティ組織をまとめる","uri":"/junior-engineers-learning-journal/security-organization/"},{"categories":["Security"],"content":"TL;DR ","date":"2025-04-13","objectID":"/junior-engineers-learning-journal/security-organization/:1:0","tags":["Security"],"title":"セキュリティ組織をまとめる","uri":"/junior-engineers-learning-journal/security-organization/"},{"categories":["Security"],"content":"1　hoge ","date":"2025-04-13","objectID":"/junior-engineers-learning-journal/security-organization/:2:0","tags":["Security"],"title":"セキュリティ組織をまとめる","uri":"/junior-engineers-learning-journal/security-organization/"},{"categories":["Security"],"content":"1.1　hoge ","date":"2025-04-13","objectID":"/junior-engineers-learning-journal/security-organization/:2:1","tags":["Security"],"title":"セキュリティ組織をまとめる","uri":"/junior-engineers-learning-journal/security-organization/"},{"categories":["Security"],"content":"参考 [1] ","date":"2025-04-13","objectID":"/junior-engineers-learning-journal/security-organization/:3:0","tags":["Security"],"title":"セキュリティ組織をまとめる","uri":"/junior-engineers-learning-journal/security-organization/"},{"categories":["Security"],"content":"暗号を完全に理解する","date":"2025-04-13","objectID":"/junior-engineers-learning-journal/security-cryptography/","tags":["Security"],"title":"暗号を完全に理解する","uri":"/junior-engineers-learning-journal/security-cryptography/"},{"categories":["Security"],"content":" 暗号 FIPS TLS1.3暗号スイート ハッシュ 衝突困難性 ブロック暗号 CTR TLSの役割 暗号化 改ざん防止 サーバ証明 楕円曲線はリソース低い 耐量子暗号 量子鍵配送 楕円極性 ed25519 モスカの定理 講師暗号 ショアのアルゴリズム 秘密計算 準同型暗号 秘密分散 ハイブリット しきい値秘密分散 チェックサムっぽい MD5 衝突 MAC HMAC CMAC ゼロ知識証明 CHAP こんにちは、しぶやです。 今回はを完全に理解していきます。 ","date":"2025-04-13","objectID":"/junior-engineers-learning-journal/security-cryptography/:0:0","tags":["Security"],"title":"暗号を完全に理解する","uri":"/junior-engineers-learning-journal/security-cryptography/"},{"categories":["Security"],"content":"TL;DR ","date":"2025-04-13","objectID":"/junior-engineers-learning-journal/security-cryptography/:1:0","tags":["Security"],"title":"暗号を完全に理解する","uri":"/junior-engineers-learning-journal/security-cryptography/"},{"categories":["Security"],"content":"1　hoge ","date":"2025-04-13","objectID":"/junior-engineers-learning-journal/security-cryptography/:2:0","tags":["Security"],"title":"暗号を完全に理解する","uri":"/junior-engineers-learning-journal/security-cryptography/"},{"categories":["Security"],"content":"1.1　hoge ","date":"2025-04-13","objectID":"/junior-engineers-learning-journal/security-cryptography/:2:1","tags":["Security"],"title":"暗号を完全に理解する","uri":"/junior-engineers-learning-journal/security-cryptography/"},{"categories":["Security"],"content":"参考 [1] ","date":"2025-04-13","objectID":"/junior-engineers-learning-journal/security-cryptography/:3:0","tags":["Security"],"title":"暗号を完全に理解する","uri":"/junior-engineers-learning-journal/security-cryptography/"},{"categories":["Others"],"content":"開発手法をまとめる","date":"2025-04-13","objectID":"/junior-engineers-learning-journal/others-development-method/","tags":["Others"],"title":"開発手法をまとめる","uri":"/junior-engineers-learning-journal/others-development-method/"},{"categories":["Others"],"content":" 開発手法 ウォークスルー トップダウン ボトムアップ サンドイッチ 並行シミュレーション アジャイル ウォーターフォール テスト駆動開発 DEVOPS カオスエンジニアリング XP 適応型ソフトウェア開発 フィーチャ駆動型開発 非機能 キャパシティ管理 ソフトウェア品質 形式手法 インスペクション ホワイトボックス ブラックボックス こんにちは、しぶやです。 今回はを完全に理解していきます。 ","date":"2025-04-13","objectID":"/junior-engineers-learning-journal/others-development-method/:0:0","tags":["Others"],"title":"開発手法をまとめる","uri":"/junior-engineers-learning-journal/others-development-method/"},{"categories":["Others"],"content":"TL;DR ","date":"2025-04-13","objectID":"/junior-engineers-learning-journal/others-development-method/:1:0","tags":["Others"],"title":"開発手法をまとめる","uri":"/junior-engineers-learning-journal/others-development-method/"},{"categories":["Others"],"content":"1　hoge ","date":"2025-04-13","objectID":"/junior-engineers-learning-journal/others-development-method/:2:0","tags":["Others"],"title":"開発手法をまとめる","uri":"/junior-engineers-learning-journal/others-development-method/"},{"categories":["Others"],"content":"1.1　hoge ","date":"2025-04-13","objectID":"/junior-engineers-learning-journal/others-development-method/:2:1","tags":["Others"],"title":"開発手法をまとめる","uri":"/junior-engineers-learning-journal/others-development-method/"},{"categories":["Others"],"content":"参考 [1] ","date":"2025-04-13","objectID":"/junior-engineers-learning-journal/others-development-method/:3:0","tags":["Others"],"title":"開発手法をまとめる","uri":"/junior-engineers-learning-journal/others-development-method/"},{"categories":["Security"],"content":"攻撃手法をまとめる","date":"2025-04-13","objectID":"/junior-engineers-learning-journal/security-attacks/","tags":["Security"],"title":"攻撃手法をまとめる","uri":"/junior-engineers-learning-journal/security-attacks/"},{"categories":["Security"],"content":" サイドチャネル攻撃 タイミング攻撃 故障利用攻撃 電力解析攻撃 破壊攻撃 AIへの攻撃 IoT タイポスワっティング ホモグラフ攻撃 好き民具 電磁シールド ステガノグラフィ テンペスト攻撃 wi-peep Webセキュリティ 攻撃 SQLインジェクション クロスサイトスクリプティング クロスサイトリクエストフォージェリ HTTPヘッダインジョクション メールヘッダインジェクション ディレクトリトラバーサル サーバーサイドリクエストフォージェリ OSコマンドインジェクション セッションハイジャック マンインサミドル Pass The Hash rat MITM トランザクション署名 モバイルコード 水飲み場攻撃 emotet monero LOTL ｸｲｯｼﾝｸﾞ 防御 CSRFトークン samesite属性 EV SSL見分け HSTS Keep-Alive キャッシュコントロール トランザクション認証 これって同じ秘密鍵的なものをサーバでも持っている感じ? X XSS Protection Client Security Policy Chache Controle: no chacheとか セッションフィくせーション cookie monster bug domain属性 url rewriting ドメインフロンティング 2.8.1 content ecurity policy traceメソッド クリックジャッキング, samesite x frame option PUA ゾーニング DoS synflood http post flood ボットネット optimisticack, duplicate ack, partial ack: firewallとかの送信順序をどうこうするやつ smurf攻撃 メールボム NMAP ステルススキャン BOF DEP return-to-libc アドレス空間ランダム化 PIE 整数オーバーフロー BOFの仕組み stack guard ssp カナリア automatic fotification ルートキット mtm arpスプーフィング tcp, udp, web, 認証 こんにちは、しぶやです。 今回はを完全に理解していきます。 ","date":"2025-04-13","objectID":"/junior-engineers-learning-journal/security-attacks/:0:0","tags":["Security"],"title":"攻撃手法をまとめる","uri":"/junior-engineers-learning-journal/security-attacks/"},{"categories":["Security"],"content":"TL;DR ","date":"2025-04-13","objectID":"/junior-engineers-learning-journal/security-attacks/:1:0","tags":["Security"],"title":"攻撃手法をまとめる","uri":"/junior-engineers-learning-journal/security-attacks/"},{"categories":["Security"],"content":"1　hoge ","date":"2025-04-13","objectID":"/junior-engineers-learning-journal/security-attacks/:2:0","tags":["Security"],"title":"攻撃手法をまとめる","uri":"/junior-engineers-learning-journal/security-attacks/"},{"categories":["Security"],"content":"1.1　hoge ","date":"2025-04-13","objectID":"/junior-engineers-learning-journal/security-attacks/:2:1","tags":["Security"],"title":"攻撃手法をまとめる","uri":"/junior-engineers-learning-journal/security-attacks/"},{"categories":["Security"],"content":"参考 [1] ","date":"2025-04-13","objectID":"/junior-engineers-learning-journal/security-attacks/:3:0","tags":["Security"],"title":"攻撃手法をまとめる","uri":"/junior-engineers-learning-journal/security-attacks/"},{"categories":["Network"],"content":"自動車IoTを完全に理解する","date":"2025-04-13","objectID":"/junior-engineers-learning-journal/iot-automotive-security/","tags":["Network"],"title":"自動車IoTを完全に理解する","uri":"/junior-engineers-learning-journal/iot-automotive-security/"},{"categories":["Network"],"content":" 自動車 自動車の情報セキュリティへの取り組みガイド misra c misra c++ obd2 CAN 車載イーサネット SOM/IP DOIP こんにちは、しぶやです。 今回はを完全に理解していきます。 ","date":"2025-04-13","objectID":"/junior-engineers-learning-journal/iot-automotive-security/:0:0","tags":["Network"],"title":"自動車IoTを完全に理解する","uri":"/junior-engineers-learning-journal/iot-automotive-security/"},{"categories":["Network"],"content":"TL;DR ","date":"2025-04-13","objectID":"/junior-engineers-learning-journal/iot-automotive-security/:1:0","tags":["Network"],"title":"自動車IoTを完全に理解する","uri":"/junior-engineers-learning-journal/iot-automotive-security/"},{"categories":["Network"],"content":"1　hoge ","date":"2025-04-13","objectID":"/junior-engineers-learning-journal/iot-automotive-security/:2:0","tags":["Network"],"title":"自動車IoTを完全に理解する","uri":"/junior-engineers-learning-journal/iot-automotive-security/"},{"categories":["Network"],"content":"1.1　hoge ","date":"2025-04-13","objectID":"/junior-engineers-learning-journal/iot-automotive-security/:2:1","tags":["Network"],"title":"自動車IoTを完全に理解する","uri":"/junior-engineers-learning-journal/iot-automotive-security/"},{"categories":["Network"],"content":"参考 [1] ","date":"2025-04-13","objectID":"/junior-engineers-learning-journal/iot-automotive-security/:3:0","tags":["Network"],"title":"自動車IoTを完全に理解する","uri":"/junior-engineers-learning-journal/iot-automotive-security/"},{"categories":["脆弱性"],"content":"脆弱性を完全に理解する","date":"2025-04-13","objectID":"/junior-engineers-learning-journal/security-vulnerability/","tags":["脆弱性"],"title":"脆弱性を完全に理解する","uri":"/junior-engineers-learning-journal/security-vulnerability/"},{"categories":["脆弱性"],"content":" 脆弱性 CVSS 基本評価基準 現状評価基準 脅威 CVSS-〇〇 SSVC こんにちは、しぶやです。 今回はを完全に理解していきます。 ","date":"2025-04-13","objectID":"/junior-engineers-learning-journal/security-vulnerability/:0:0","tags":["脆弱性"],"title":"脆弱性を完全に理解する","uri":"/junior-engineers-learning-journal/security-vulnerability/"},{"categories":["脆弱性"],"content":"TL;DR ","date":"2025-04-13","objectID":"/junior-engineers-learning-journal/security-vulnerability/:1:0","tags":["脆弱性"],"title":"脆弱性を完全に理解する","uri":"/junior-engineers-learning-journal/security-vulnerability/"},{"categories":["脆弱性"],"content":"1　hoge ","date":"2025-04-13","objectID":"/junior-engineers-learning-journal/security-vulnerability/:2:0","tags":["脆弱性"],"title":"脆弱性を完全に理解する","uri":"/junior-engineers-learning-journal/security-vulnerability/"},{"categories":["脆弱性"],"content":"1.1　hoge ","date":"2025-04-13","objectID":"/junior-engineers-learning-journal/security-vulnerability/:2:1","tags":["脆弱性"],"title":"脆弱性を完全に理解する","uri":"/junior-engineers-learning-journal/security-vulnerability/"},{"categories":["脆弱性"],"content":"参考 [1] ","date":"2025-04-13","objectID":"/junior-engineers-learning-journal/security-vulnerability/:3:0","tags":["脆弱性"],"title":"脆弱性を完全に理解する","uri":"/junior-engineers-learning-journal/security-vulnerability/"},{"categories":["Security"],"content":"認証/認可を完全に理解する","date":"2025-04-13","objectID":"/junior-engineers-learning-journal/security-authentication-and-authorization/","tags":["Security"],"title":"認証/認可を完全に理解する","uri":"/junior-engineers-learning-journal/security-authentication-and-authorization/"},{"categories":["Security"],"content":" 認証基礎 SAML OAuth OpenID Pass The Hash Cookie認証 Kerberos認証 リバースプロキシ型認証 FIDO UAF CATP 1 CATP 2 CAPTHA ロックアウト リスクベース JWT? CHAPリプレイ攻撃、なりすまし レインボーテーブル、ソルト パスワードスプレー パスワードリスト クレデンシャルスタッフィング攻撃 pass tha hash ケルベロス認証 s/key パスキー IDaaS idパスワードはネットワークに流さない。 reflesh token SCIM OIDC samlにはないがodicにはユーザからの同意を得る手順がある SMS認証 課金 拒否 SIMスワップ バイオメトリクス認証 本人拒否率 他人受け入れ率 代替手段が必要 問題点 バイオメトリクス認証 本人拒否率 他人受け入れ率 マスターフェイス ウルフ攻撃 ekyc EKYCのライブネスチェック 犯収法 顧客の指名・住所・生年月日などの「本人特定事項」や「取引を行う目的」 ホ方式、ワ方式 ディープフェイク ハードウェアトークン JWT CSMS認証 認証局のかい総合像 ISO 42001 ジョーアカウント こんにちは、しぶやです。 今回はを完全に理解していきます。 ","date":"2025-04-13","objectID":"/junior-engineers-learning-journal/security-authentication-and-authorization/:0:0","tags":["Security"],"title":"認証/認可を完全に理解する","uri":"/junior-engineers-learning-journal/security-authentication-and-authorization/"},{"categories":["Security"],"content":"TL;DR ","date":"2025-04-13","objectID":"/junior-engineers-learning-journal/security-authentication-and-authorization/:1:0","tags":["Security"],"title":"認証/認可を完全に理解する","uri":"/junior-engineers-learning-journal/security-authentication-and-authorization/"},{"categories":["Security"],"content":"1　hoge ","date":"2025-04-13","objectID":"/junior-engineers-learning-journal/security-authentication-and-authorization/:2:0","tags":["Security"],"title":"認証/認可を完全に理解する","uri":"/junior-engineers-learning-journal/security-authentication-and-authorization/"},{"categories":["Security"],"content":"1.1　hoge ","date":"2025-04-13","objectID":"/junior-engineers-learning-journal/security-authentication-and-authorization/:2:1","tags":["Security"],"title":"認証/認可を完全に理解する","uri":"/junior-engineers-learning-journal/security-authentication-and-authorization/"},{"categories":["Security"],"content":"参考 [1] ","date":"2025-04-13","objectID":"/junior-engineers-learning-journal/security-authentication-and-authorization/:3:0","tags":["Security"],"title":"認証/認可を完全に理解する","uri":"/junior-engineers-learning-journal/security-authentication-and-authorization/"},{"categories":["Security"],"content":"認証局を完全に理解する","date":"2025-04-13","objectID":"/junior-engineers-learning-journal/security-certificate-authority/","tags":["Security"],"title":"認証局を完全に理解する","uri":"/junior-engineers-learning-journal/security-certificate-authority/"},{"categories":["Security"],"content":" こんにちは、しぶやです。 今回はを完全に理解していきます。 ","date":"2025-04-13","objectID":"/junior-engineers-learning-journal/security-certificate-authority/:0:0","tags":["Security"],"title":"認証局を完全に理解する","uri":"/junior-engineers-learning-journal/security-certificate-authority/"},{"categories":["Security"],"content":"TL;DR ","date":"2025-04-13","objectID":"/junior-engineers-learning-journal/security-certificate-authority/:1:0","tags":["Security"],"title":"認証局を完全に理解する","uri":"/junior-engineers-learning-journal/security-certificate-authority/"},{"categories":["Security"],"content":"0　はじめに ","date":"2025-04-13","objectID":"/junior-engineers-learning-journal/security-certificate-authority/:2:0","tags":["Security"],"title":"認証局を完全に理解する","uri":"/junior-engineers-learning-journal/security-certificate-authority/"},{"categories":["Security"],"content":"1　PKI ","date":"2025-04-13","objectID":"/junior-engineers-learning-journal/security-certificate-authority/:3:0","tags":["Security"],"title":"認証局を完全に理解する","uri":"/junior-engineers-learning-journal/security-certificate-authority/"},{"categories":["Security"],"content":"2　証明書 ","date":"2025-04-13","objectID":"/junior-engineers-learning-journal/security-certificate-authority/:4:0","tags":["Security"],"title":"認証局を完全に理解する","uri":"/junior-engineers-learning-journal/security-certificate-authority/"},{"categories":["Security"],"content":"3　実際の認証局 ","date":"2025-04-13","objectID":"/junior-engineers-learning-journal/security-certificate-authority/:5:0","tags":["Security"],"title":"認証局を完全に理解する","uri":"/junior-engineers-learning-journal/security-certificate-authority/"},{"categories":["Security"],"content":"参考 [1] ","date":"2025-04-13","objectID":"/junior-engineers-learning-journal/security-certificate-authority/:6:0","tags":["Security"],"title":"認証局を完全に理解する","uri":"/junior-engineers-learning-journal/security-certificate-authority/"},{"categories":["Network"],"content":"無線LANを完全に理解する","date":"2025-04-13","objectID":"/junior-engineers-learning-journal/network-wireless-lan/","tags":["Network"],"title":"無線LANを完全に理解する","uri":"/junior-engineers-learning-journal/network-wireless-lan/"},{"categories":["Network"],"content":" 無線LANセキュリティ WPA3 WPA2 Enteprise, Personal Enhanced Open EAP MD5 TLS TTLS TOPTP PEAP ジャミング攻撃 隠れ端末問題:https://xtech.nikkei.com/atcl/nxt/column/18/00247/041000003/ 他のキャリアを見つけられない そもそものCSMA/CAは wpa2とwpa3の違い wifi dpp sae iphoneのMACアドレスランダム化 OpenRoaming eduroam こんにちは、しぶやです。 今回はを完全に理解していきます。 ","date":"2025-04-13","objectID":"/junior-engineers-learning-journal/network-wireless-lan/:0:0","tags":["Network"],"title":"無線LANを完全に理解する","uri":"/junior-engineers-learning-journal/network-wireless-lan/"},{"categories":["Network"],"content":"TL;DR ","date":"2025-04-13","objectID":"/junior-engineers-learning-journal/network-wireless-lan/:1:0","tags":["Network"],"title":"無線LANを完全に理解する","uri":"/junior-engineers-learning-journal/network-wireless-lan/"},{"categories":["Network"],"content":"1　hoge ","date":"2025-04-13","objectID":"/junior-engineers-learning-journal/network-wireless-lan/:2:0","tags":["Network"],"title":"無線LANを完全に理解する","uri":"/junior-engineers-learning-journal/network-wireless-lan/"},{"categories":["Network"],"content":"1.1　hoge ","date":"2025-04-13","objectID":"/junior-engineers-learning-journal/network-wireless-lan/:2:1","tags":["Network"],"title":"無線LANを完全に理解する","uri":"/junior-engineers-learning-journal/network-wireless-lan/"},{"categories":["Network"],"content":"参考 [1] ","date":"2025-04-13","objectID":"/junior-engineers-learning-journal/network-wireless-lan/:3:0","tags":["Network"],"title":"無線LANを完全に理解する","uri":"/junior-engineers-learning-journal/network-wireless-lan/"},{"categories":["OS"],"content":"Linuxのアクセス制御を完全に理解する。","date":"2025-03-20","objectID":"/junior-engineers-learning-journal/os-linux-access-controle/","tags":["OS"],"title":"Linuxのアクセス制御を完全に理解する","uri":"/junior-engineers-learning-journal/os-linux-access-controle/"},{"categories":["OS"],"content":" こんにちは、しぶやです。 今回はLinuxのアクセス制御を「完全に理解」していきたいと思います。 ","date":"2025-03-20","objectID":"/junior-engineers-learning-journal/os-linux-access-controle/:0:0","tags":["OS"],"title":"Linuxのアクセス制御を完全に理解する","uri":"/junior-engineers-learning-journal/os-linux-access-controle/"},{"categories":["OS"],"content":"TL;DR Linuxの権限管理の基本を復習 capabilityを利用することで最小権限の原則に従える SELinuxを利用すれば、権限分掌が可能 ","date":"2025-03-20","objectID":"/junior-engineers-learning-journal/os-linux-access-controle/:1:0","tags":["OS"],"title":"Linuxのアクセス制御を完全に理解する","uri":"/junior-engineers-learning-journal/os-linux-access-controle/"},{"categories":["OS"],"content":"0　はじめに Linuxに限った話ではないですが、ファイルについて理解することは非常に重要だと思います。 というのも、以下のような有名な考え方があります。 Linuxでは全てをファイルとして扱うようになっています。by LPI-JAPAN 僕がLinuxを好きである一番の理由です。 Linuxがかっこ良いからというわけではなく、すべてをファイルとして扱ってくれるLinuxは理解しやすいのです。 Windows等は複雑すぎて僕にはまだ理解できない部分がほとんどです。(いずれ勉強したい。。) 話を戻して、本記事ではLinuxにおけるアクセス制御、すなわちファイルのアクセス制御について「完全に理解」していきたいと思います。 「少し分かる」レベルの人は軽く読み飛ばしてください。 ※ 本記事では以下の環境で動作検証をしています。 OS：Ubuntu 24.04.1 LTS ルートファイルシステム：ext4 ホスト：AWS EC2 ","date":"2025-03-20","objectID":"/junior-engineers-learning-journal/os-linux-access-controle/:2:0","tags":["OS"],"title":"Linuxのアクセス制御を完全に理解する","uri":"/junior-engineers-learning-journal/os-linux-access-controle/"},{"categories":["OS"],"content":"1　Linuxにおけるアクセス制御の基本 まずは、基本の復習からです。 ","date":"2025-03-20","objectID":"/junior-engineers-learning-journal/os-linux-access-controle/:3:0","tags":["OS"],"title":"Linuxのアクセス制御を完全に理解する","uri":"/junior-engineers-learning-journal/os-linux-access-controle/"},{"categories":["OS"],"content":"1.1　基本のパーミッション Linuxにおけるファイルパーミッションは以下のような形をしています。 drwxrwxrwx これは、以下の4つに分けられます。 d + rwx + rwx + rwx (= drwxrwxrwx) d——— ファイルの種類を表す。 - … ファイル l … リンク d … ディレクトリ etc. -rwx—— 所有ユーザの権限を表す。 - … 権限なし r … 読み込み権限 w … 書き込み権限 x … 実行権限 —-rwx— 所有グループの権限を表す。 読み方は所有ユーザと同様。 ——-rwx その他のユーザの権限を表す。 読み方は所有ユーザと同様。 それでは、実際のファイルを見てみましょう。 pingの権限 上記から、echoは管理者のみが書き換えも可能、他は読み込みと実行のみが可能です。 書き換えを行うとどうなるでしょうか？ 書き込みの権限エラーその1 権限がないと怒られました。 詳細に見てみましょう。システムコールを追ってみます。 書き込みの権限エラーその2 “openat(AT_FDCWD, “/usr/bin/ping”, O_WRONLY|O_CREAT|O_TRUNC, 0666) = -1 EACCES (Permission denied)” から、書き込み権限でファイルを開こうとしたときに権限エラーが出ていることが分かります。 ファイル実行の場合はどうでしょうか。 Linuxにおいて、基本的にはファイルの実行に読み込み権限が必要です。では、「実行権限は読み込み権限を包含しているのでしょうか？」 「読み込み権限なしに、実行権限だけを持つようなパターンはあるのでしょうか？」 これについては、次節で見ていきたいと思います。 ここでは、アクセス権限意外の部分を復習していきましょう。 （再掲）pingの権限 ファイルの主要な属性には以下のようなものがあります。 リンク数 所有者、所有グループ 最終更新日時 サイズ ファイル名 アクセス権限の横にある数字はリンク数です。 Windowsでいうショートカットに近いものです。 実際にリンクファイルを作成してみましょう。 リンクファイル ここでは、実際にpinglinkというリンクファイルを作成しています。 リンクファイルを作成したことにより、\"/usr/bin/ping\"のリンク数が2になっていることが分かります。 また、pinglink経由でpingが実行できていることが分かります。 ※ リンクファイルの作成に\"sudo\"が必要な理由は本記事を最後まで読むと分かるはずです。 シンボリックリンクとハードリンク Linuxのリンクにはシンボリックリンクとハードリンクがあります。 Windowsのショートカットに近いものはシンボリックリンクの方です。 シンボリックリンク ファイルやディレクトリへのパス情報 参照先が消えるとリンクが使えなくなる。 ハードリンク 元ファイルと同じinodeを指す → もとのファイルが消えても、ハードリンクからはデータにアクセス可能 → リンク先の変更は元ファイルにも影響 ※ inodeについては、2.2 VFSで詳しく話します。 chmod, chown 以下の2つはよく使うコマンドですね。 chmod ファイルのアクセス権限を変更する。 例：chmod ./hoge.txt 644 ※ “hoge.txt\"を所有者のみ読み込み書き込みok、所有グループ、その他のユーザは読み込みのみokに変更 chown ファイルの所有者を変更する。 例：chown hoge:ghoge ./hoge.txt ※ “hoge.txt\"の所有者を\"hoge\"に、所有グループを\"ghoge\"に変更 Tip chmodで存在しないユーザを指定したらどうなのでしょう。 ⇓ chmodのエラー “invalid user: hoge\"と怒られました。 どうやら\"systemd\"がpasswdとかを利用して管理しているuserdbでユーザのチェックを行っているようです。 ","date":"2025-03-20","objectID":"/junior-engineers-learning-journal/os-linux-access-controle/:3:1","tags":["OS"],"title":"Linuxのアクセス制御を完全に理解する","uri":"/junior-engineers-learning-journal/os-linux-access-controle/"},{"categories":["OS"],"content":"1.2　その他パーミッション その他のパーミッションについて見ていきます。 setuid, setgid setuid, setgidは実行時に所有者の権限で実行するためのものです。 passwdを例に見ていきましょう。 passwdの権限 setuidがセットされていると、ファイルの所有者の実行権限が\"s\"になります。 これにより、ファイル所有者の権限でファイルを実行でき、ファイル所有者がアクセスできる全てのファイルにアクセスできるようになります。 setuidがセットされているファイルを実行した場合、所有者の権限を得られることが分かりました。 しかし、自分自身が持つ権限はどうなるのでしょうか？ 言い換えると、これまでアクセスできていた自分のファイルにはアクセスできる状態を保ってくれるのでしょうか？ 実際に見てみましょう。 setuid ここでは、ユーザ\"hoge\"がもつ\"owned_by_hoge.txt\"とユーザ\"ubuntu\"がもつ\"owned_by_ubuntu.txt\"をそれぞれ600のパーミッションで用意しています。 また、“cat\"のバイナリを用意し、setuidを付与しています。 “cat\"経由でそれぞれのファイルを開いた際、“ubuntu\"が所有する\"owned_by_ubuntu.txt\"は開けなくなっていることが分かります。 つまり、setuidで他のユーザ権限で実行した際は、完全に権限が移行され、自分自身の権限はなくなるということです。 ※ この仕組みはシンプルで分かりやすいですね。 RUIDとEUID LinuxのプロセスはプロセスIDの他にRUIDとEUIDというものをもっています。 RUID … 実ユーザID EUID … 実効ユーザID setuidがセットされたファイルを実行した場合は、RUIDは実行ユーザのユーザID、EUIDは借りた権限の持ち主のユーザIDです。 EUIDがプロセスの実行ユーザとなり、その権限でプロセスが動きます。 RUIDとEUID setuidは便利な反面、脆弱性があると権限昇格に利用される恐れがあり非常に危険な存在です。 それでは、なぜsetuidを利用するのでしょうか？実行権限だけ付与すればよいのではないでしょうか？ この答えは、実行プロセスに管理者権限が必要だからです。以下がその例です。 passwd passwdは実行後、\"/etc/shadow\"や\"/etc/passwd\"の書き込みが発生します。 しかし、通常ユーザではこれらのファイルへの書き込み権限がありません。 そのため、setuidを行った\"passwd\"コマンドにより、passwdコマンド経由でroot権限を利用してそれらのファイルの書き換えができるようになります。 uid・gid uid, gidはユーザやグループのための一意の識別子です。 ユーザの情報は\"/etc/passwd\"に、グループの情報は\"/etc/group\"にあります。 /etc/passwd /etc/group 読み方としては、以下です。 /etc/passwd … ユーザー名:パスワード(※):UID:GID:コメント:ホームディレクトリ:ログインシェル /etc/group … グループ名:パスワード(※):GID:グループメンバー ユーザIDは1000以上が割り当てられます。rootは0です。 shadow 先程の\"/etc/passwd\"には実際のパスワードは入っていませんでした。 これは、\"/etc/passwd\"はすべてのユーザから読み込まれてしまうため、パスワードが他のユーザに漏洩してしまうからです。 実際のパスワードは\"/etc/passwd\"に保存されています。 /etc/shadow 読み方は以下です。 ユーザー名:暗号化パスワード:最終変更日:最小日数:最大日数:警告日数:無効日数:有効期限 スティッキービット スティッキービットはディレクトリに適用するものです。 スティッキービットが適用されたディレクトリはすべてのユーザーがファイルの作成・書き込み可能です。 スティッキービットの特徴はファイルの削除は所有者のみが可能ということです。 /tmpなどはステッキービットが適用されている例です。 実際にスティッキービットを試してみましょう。 /tmpのスティッキービット スティッキービットに作成されたファイルの権限は\"—t\"になります。 スティッキービットの効果 また、ファイル所有者以外のユーザはファイルの読み込み、書き込みは可能ですが、削除をしようとすると怒られます。 Tip そもそも、ファイルの削除権限とは何なのでしょうか？ 書き込み権限とは異なるのでしょうか？ ファイルの削除に必要な権限はファイルが置かれたディレクトリの書き込み権限と実行権限があるかです。 Tip スティッキービットはファイルの削除は不可能ですが、書き込みは可能です。 ここで、他のユーザにファイル内容をすべて削除されてしまうと、ファイルを削除されたような状態になります。 スティッキービットは一体何のためにあるのでしょうか？ 結論、スティッキービットは誤って他人のファイルを削除することを防止するためのものです。 ファイルの中身を書き換えられてしまうことに変わりはないので、それを防ぐには通常のアクセス権管理が必要です。 ","date":"2025-03-20","objectID":"/junior-engineers-learning-journal/os-linux-access-controle/:3:2","tags":["OS"],"title":"Linuxのアクセス制御を完全に理解する","uri":"/junior-engineers-learning-journal/os-linux-access-controle/"},{"categories":["OS"],"content":"1.4　sudo 1.3でsetuid, setgidを学んだところで、sudoも復習しておきましょう。 sudoは管理者権限でコマンドを実行するために利用されます。 sudoの管理を行っているのは\"/etc/sudoers\"です。実際に見てみましょう。 sudoers 読み方は以下です。 alice ALL=(ALL:ALL) ALL alice … 権限を与えるユーザー ALL … すべてのホストでコマンドを実行可能 (ALL:ALL) 1つ目の ALL … sudo 実行時に任意のユーザーに切り替え可能 2つ目の ALL … sudo 実行時に任意のグループに切り替え可能 ALL … すべてのコマンド実行可能 それでは、sudoを試してみましょう。 sudo 所有者??? Tip “/etc/sudoers\"を編集する際は、“visudo\"コマンドが推奨されています。 これには以下のような機能があるからのようです。 保存時に構文エラーのチェックを行う 同時編集を禁止する （\"/etc/sudoers\"自体の）パーミッションの自動保護 “/etc/sudoers\"の破壊防止（rootに戻れなくなることを防止） ","date":"2025-03-20","objectID":"/junior-engineers-learning-journal/os-linux-access-controle/:3:3","tags":["OS"],"title":"Linuxのアクセス制御を完全に理解する","uri":"/junior-engineers-learning-journal/os-linux-access-controle/"},{"categories":["OS"],"content":"1.5　コピー時の動作 1.1~1.3ででファイルのアクセス権限について復習しました。 では、ファイルをコピーした際はどのような挙動をするのでしょうか。 デフォルトのcpコマンドの動作は以下です。 コピー元の読み取り権限が必要 コピー元のアクセス権の設定をコピー 所有者、所有グループはコピーを行った人のものに変更 “-p\"オプションをつけると、アクセス権に加え、所有者やタイムスタンプなども完全にコピーされます。 copy リンクファイル作成時はどうでしょうか？ シンボリックリンク シンボリックリンク自体は独立したファイルとして扱われます。※ シンボリックリンクはただのパスのようなものであるため。 所有者はリンク作成者 パーミッションは\"lrwxrwxrwx” リンク先のファイルを操作する際にそちらに左右されるため、リンクファイル自体にパーミッションをもたせる必要がない。 ハードリンク 所有者、パーミッション等はコピー元ファイルと同じ link ","date":"2025-03-20","objectID":"/junior-engineers-learning-journal/os-linux-access-controle/:3:4","tags":["OS"],"title":"Linuxのアクセス制御を完全に理解する","uri":"/junior-engineers-learning-journal/os-linux-access-controle/"},{"categories":["OS"],"content":"2　Linuxにおけるアクセス制御の深堀 それではディープダイブしていきましょう。 そもそもLinuxカーネルくんは、どこでファイルのパミッションを管理し、ファイルアクセスをしているのでしょうか？ ","date":"2025-03-20","objectID":"/junior-engineers-learning-journal/os-linux-access-controle/:4:0","tags":["OS"],"title":"Linuxのアクセス制御を完全に理解する","uri":"/junior-engineers-learning-journal/os-linux-access-controle/"},{"categories":["OS"],"content":"2.1　ファイルシステム まずはファイルシステムです。wikiの定義を見てみましょう。 ファイルシステム（英: file system、filesystem）は、コンピュータのリソースを操作するための、オペレーティングシステム (OS) が持つ機能の一つ 定義の通り、ファイルシステムはOSの機能の一つとして、インストール時に選択できたら、複数のファイルシステムが組み込まれていたりします。 Linuxカーネルに組み込まれたファイルシステム LPI Japanではファイルシステについて、以下のように解説あります。 そもそもデータを扱うということはどういうことなのでしょうか。 通常OSを操作する上において、データを操作するということはファイルを操作することとほぼ同等の意味を持つかと思います。 このため通常はデータが物理的にどのように格納されているかを意識する必要もなく、逆に意識できない作りになっています。 これはOSの機能であるデータの抽象化によってもたらされる結果です。 実際に物理的な記憶装置に格納されているデータを素で扱おうとすると、 HDDのどこのセクタのどの部分とどの部分を取り出して、データをメモリ上に読み込み、メモリに格納できないものは後からまた読む・・・といった大変面倒なことをする必要があります。 現在のHDDの容量を考えてみると、何百ギガバイト（テラになりつつありますが・・・）という巨大なデータを格納できるような物体です。 その中に入っている何かのデータを自力で探しだし、利用することは人間が行う作業として成立しないものだともいえます。 このような物体に存在するデータを人間にわかりやすいファイルというものに抽象化、可視化し、データを永続的に管理しやすくするという役目を持つのがファイルシステムの基本的な考え方です。 一言でいうとファイルの管理をしてくれているようです。 詳細には、ファイルをどのように格納するかや、どのようにアクセスするかなど難しい話が色々あると思います。 具体的なファイルシステムを見ていきましょう。 Linux ext4 Linuxで最も利用されています。 ext3 ext4の前のやつです。 btreefs ファイルシステム自体にスナップショットやraidの機能があります。安定性については議論があるらしい。 xfs 大容量のファイルシステムむけに最適化されているらしい。 Windows NTFS 現在、Windowsでデフォルトで利用されているファイルシステムです。セキュリティであったり、ロギングであったり非常に高機能なイメージです。 FAT32 USBとかで使われていらやつです。ファイルサイズが4GBまでの制約があります。\\ exFat FAT32を改良したもので、大きなファイルもサポートしています。 MacOS APFS 現在のmacosで利用されているもの。 HFS APFSの前に利用されていたもの。 ファイルシステムごとにデータの格納方法だったり、管理方法が異なります。 ファイルシステムについては詳しくないですが、どこかで詳しく調べて記事にできたらと思います ","date":"2025-03-20","objectID":"/junior-engineers-learning-journal/os-linux-access-controle/:4:1","tags":["OS"],"title":"Linuxのアクセス制御を完全に理解する","uri":"/junior-engineers-learning-journal/os-linux-access-controle/"},{"categories":["OS"],"content":"2.2　VFS 2.1でファイルシステムにはいくつか選択肢があることがわかりました。なんなら人によっては自作している人もいます。 ここで、ファイルシステムを変えるたびにOSに大きな変更があっては困らないでしょうか？できるだけ疎結合を意識したくなります。ここで登場するのがVFSです。 VFSとは、Virtual File Systemの略です。 LPIJapanの説明を見てみましょう。 VFSは下位の物理的な媒体を抽象化し、データ、デバイスを含む全てのコンピュータリソースに対して統一的なファイルアクセスという入出力インターフェイスを提供します。 これによりリソースの差異を気にすることなく、様々な対象に対して統一のアクセスを行うことができます。 さらにVFSにはファイルシステムの抽象化という役割もあり、これによってことなる複数のファイルシステムに対して透過的にアクセスすることが可能になっており、ファイルシステムの種類を意識せずに利用することができます すなわち、カーネルとファイルシステムの間に入り、カーネルからのアクセスを抽象化し、ファイルシステムが異なってもカーネルに統一的なアクセスを提供します。 ファイルシステム以外にも、様々な入出力を抽象化し、統一的なアクセスを可能としてくれてます。 実際にVFSではどのように管理されているのでしょうか。 VFSにおいて、重要な役割を果たしているのが\"struct inode\"です。 “sturuct inode\"にはファイルの所有者やタイムスタンプなどオブジェクトの基本情報が格納されます。 実際に\"struct inode\"を見てみましょう。 /* * Keep mostly read-only and often accessed (especially for * the RCU path lookup and 'stat' data) fields at the beginning * of the 'struct inode' */ struct inode { umode_t i_mode; unsigned short i_opflags; kuid_t i_uid; kgid_t i_gid; unsigned int i_flags; #ifdef CONFIG_FS_POSIX_ACL struct posix_acl *i_acl; struct posix_acl *i_default_acl; #endif const struct inode_operations *i_op; struct super_block *i_sb; struct address_space *i_mapping; #ifdef CONFIG_SECURITY void *i_security; #endif /* Stat data, not accessed from path walking */ unsigned long i_ino; /* * Filesystems may only read i_nlink directly. They shall use the * following functions for modification: * * (set|clear|inc|drop)_nlink * inode_(inc|dec)_link_count */ union { const unsigned int i_nlink; unsigned int __i_nlink; }; dev_t i_rdev; loff_t i_size; time64_t i_atime_sec; time64_t i_mtime_sec; time64_t i_ctime_sec; u32 i_atime_nsec; u32 i_mtime_nsec; u32 i_ctime_nsec; u32 i_generation; spinlock_t i_lock; /* i_blocks, i_bytes, maybe i_size */ unsigned short i_bytes; u8 i_blkbits; enum rw_hint i_write_hint; blkcnt_t i_blocks; .....(省略)....... void *i_private; /* fs or device private pointer */ } __randomize_layout; include/linux/fs.h “i_mode\"はファイルの種類とパミッションを、“i_uid\"や\"i_gid\"はファイルの所有者などを表しています。 このように、VFSが提供する\"struct inode\"はオブジェクトに関する統一的な基本情報を保持しています。 ここで、ファイルシステムの関係についても説明したいと思います。 これまで、inodeのことを\"struct inode\"と呼んでいました。 これはinodeにはVFSがもつ\"struct inode\"とファイルシステムがもつinodeがあるからです。 ファイルシステムが持つinodeの方はデータブロックの位置情報やファイルシステム固有の情報などより詳細な情報を持っています。 実際にext4のファイルシステムを見てみましょう。 /* * Structure of an inode on the disk */ struct ext4_inode { __le16 i_mode; /* File mode */ __le16 i_uid; /* Low 16 bits of Owner Uid */ __le32 i_size_lo; /* Size in bytes */ __le32 i_atime; /* Access time */ __le32 i_ctime; /* Inode Change time */ __le32 i_mtime; /* Modification time */ __le32 i_dtime; /* Deletion Time */ __le16 i_gid; /* Low 16 bits of Group Id */ __le16 i_links_count; /* Links count */ __le32 i_blocks_lo; /* Blocks count */ __le32 i_flags; /* File flags */ union { struct { __le32 l_i_version; } linux1; struct { __u32 h_i_translator; } hurd1; struct { __u32 m_i_reserved1; } masix1; } osd1; /* OS dependent 1 */ __le32 i_block[EXT4_N_BLOCKS];/* Pointers to blocks */ __le32 i_generation; /* File version (for NFS) */ __le32 i_file_acl_lo; /* File ACL */ __le32 i_size_high; __le32 i_obso_faddr; /* Obsoleted fragment address */ ... （省略）... __le16 i_extra_isize; __le16 i_checksum_hi; /* crc32c(uuid+inum+inode) BE */ __le32 i_ctime_extra; /* extra Change time (nsec \u003c\u003c 2 | epoch) */ __le32 i_mtime_extra; /* extra Modification time(nsec \u003c\u003c 2 | epoch) */ __le32 i_atime_extra; /* extra Access time (nsec \u003c\u003c 2 | epoch) */ __le32 i_crtime; /* File Creation time */ __le32 i_crtime_extra; /* extra FileCreationtime (nsec \u003c\u003c 2 | epoch) */ __le32 i_version_hi; /* high 32 bits for 64-bit version */ __le32 i_projid; /* Project ID */ }; VFSがもつ\"struct inode\"とファイルシステムのinodeの関係としては、VFSの\"struct inode\"がファイルシステムのinodeから情報を取得する感じです。 これにより、カーネルくんはVFSの\"struct inode\"への統一的なアクセスが可能となります。 ここで、“struct inode\"はアクセス権限を\"imode\"として持っています。 ファイルへアクセスする際はこの\"imode\"の情報を利用し、マスクをかけることで権限のチェックを行っているのです！ 他にもスーパーブロックなど様々な話がありますが、ファイルシステムについての別記事で詳しく書こうと思います。 ","date":"2025-03-20","objectID":"/junior-engineers-learning-journal/os-linux-access-controle/:4:2","tags":["OS"],"title":"Linuxのアクセス制御を完全に理解する","uri":"/junior-engineers-learning-journal/os-linux-access-controle/"},{"categories":["OS"],"content":"2.3　カーネルの権限管理 1.2でsetuidの危険性について説明しました。 同時に、setuidの必要性についても説明しました。 最小権限の原則や権限分離を守りつつアクセス制御をしたいところですが、どうやってアクセス制御を行うのが良いのでしょうか？ 本説ではcapabilityについて説明します。 2.1, 2.2ではinodeについて説明しました。 inodeではimodeで権限情報を持っています。 ここで説明するcapabilityや3章で説明するaclは拡張領域を利用してより細かい権限管理を行います。 capabilitiesについてマニュアルでは以下のように書かれています。 For the purpose of performing permission checks, traditional UNIX implementations distinguish two categories of processes: privileged processes (whose effective user ID is 0, referred to as superuser or root), and unprivileged processes (whose effective UID is nonzero). Privileged processes bypass all kernel permission checks, while unprivileged processes are subject to full permission checking based on the process’s credentials (usually: effective UID, effective GID, and supplementary group list). Starting with Linux 2.2, Linux divides the privileges traditionally associated with superuser into distinct units, known as capabilities, which can be independently enabled and disabled. Capabilities are a per-thread attribute. capabilities(7) — Linux manual page capabilityは従来のルート権限を分割したものです。 ルート権限という強く広い権限を与えるではなく、capabilityによる一部の強い権限を与えることにより、最小権限の原則に従うことができます。 実際に例を見てみましょう。以下はubuntuにもともと入っている\"ping\"です。 pingの権限 特にsetuidが付与されているわけでもなく、一般ユーザとして実行できるように見えます。 実際に、pingは一般ユーザでも実行できると思います。 では、このコマンドを自分のものとしてコピーして実行してみましょう。 一般ユーザとして実行できているファイルなので、コピーができれば問題なく動作するはずです。 ソケットエラー エラーになりました。 ローソケットの操作が許可されていないと怒られており、“capability\"か\"setuid\"がないと言われています。 これは、“ping\"がローソケットを利用しており、その権限がないためエラーが出ているのです。 では、もともと入っていた\"ping\"を見てみましょう。 pingのcapability “cap_net_raw=ep\"とあり、ローソケットを利用するためのcapabilityが割り当てられていることが分かります。 ※ e=Effectve, p=Permitted を意味してます。 これにより、setuidを利用せずにローソケットの利用しており、pingに脆弱性があったとしても権限昇格などの危険性が緩和されます。 ","date":"2025-03-20","objectID":"/junior-engineers-learning-journal/os-linux-access-controle/:5:0","tags":["OS"],"title":"Linuxのアクセス制御を完全に理解する","uri":"/junior-engineers-learning-journal/os-linux-access-controle/"},{"categories":["OS"],"content":"3　その他のアクセス制御 ","date":"2025-03-20","objectID":"/junior-engineers-learning-journal/os-linux-access-controle/:6:0","tags":["OS"],"title":"Linuxのアクセス制御を完全に理解する","uri":"/junior-engineers-learning-journal/os-linux-access-controle/"},{"categories":["OS"],"content":"acl aclはこれまでの1章で復習した標準の権限管理より細かいアクセス制御を実現できます。 具体的には、「その他のユーザーが」ではなく、「誰が」を設定できます。 aclのインストール 標準ではaclが入っていなかったのでインスールしました。 実際に使ってみましょう。 aclの設定 “root_secret.txt\"にユーザ\"hoge\"だけ読み込みと書き込みができるように設定しました。 ","date":"2025-03-20","objectID":"/junior-engineers-learning-journal/os-linux-access-controle/:6:1","tags":["OS"],"title":"Linuxのアクセス制御を完全に理解する","uri":"/junior-engineers-learning-journal/os-linux-access-controle/"},{"categories":["OS"],"content":"SELinux Linuxのアクセス制御は、以下の2種類があります。 任意アクセス制御 強制アクセス制御 これまで紹介してきたものはすべて任意アクセス制御です。 “selinux\"は強制アクセス制御に分類されます。 SELinux (Security-Enhanced Linux) は、システムにアクセスできるユーザーを管理者がよりきめ細かく制御するための、Linux® システム向けセキュリティ・アーキテクチャです。もともとは、Linux Security Modules (LSM) を使用した Linux カーネルへの一連のパッチとして、アメリカ国家安全保障局 (NSA) によって開発されました。 SELinux (Security-Enhanced Linux) とは SELinuxもcapabilityやaclのように標準的な権限管理より細かい設定が可能です。 任意アクセス制御と最も異なる点は、「rootであっても、すべてを自由に操作できるとは限らない」ことです。 すなわち、rootという中央集権を排除し、権限分掌を行うことができます。 SELinuxについては、深く学びたいので別の記事で個別に深堀ることとします。 ","date":"2025-03-20","objectID":"/junior-engineers-learning-journal/os-linux-access-controle/:6:2","tags":["OS"],"title":"Linuxのアクセス制御を完全に理解する","uri":"/junior-engineers-learning-journal/os-linux-access-controle/"},{"categories":["OS"],"content":"4　ユースケース ","date":"2025-03-20","objectID":"/junior-engineers-learning-journal/os-linux-access-controle/:7:0","tags":["OS"],"title":"Linuxのアクセス制御を完全に理解する","uri":"/junior-engineers-learning-journal/os-linux-access-controle/"},{"categories":["OS"],"content":"ACL その他のユーザを細かく分ける。 グループとかたくさん作ってやると便利 ","date":"2025-03-20","objectID":"/junior-engineers-learning-journal/os-linux-access-controle/:7:1","tags":["OS"],"title":"Linuxのアクセス制御を完全に理解する","uri":"/junior-engineers-learning-journal/os-linux-access-controle/"},{"categories":["OS"],"content":"Capability Nginxとかを例にsudoとの差を示す 取られたときの影響範囲をどれだけ抑えられるか 実際は大変な話。ベストプラクティス集みたいなものをつくれれば ","date":"2025-03-20","objectID":"/junior-engineers-learning-journal/os-linux-access-controle/:7:2","tags":["OS"],"title":"Linuxのアクセス制御を完全に理解する","uri":"/junior-engineers-learning-journal/os-linux-access-controle/"},{"categories":["OS"],"content":"5　まとめ 今回はLinuxのアクセス制御について学習しました。 capabilityやSELinuxを利用することで、より細かい制御を行うことができ、最小権限の原則を実現できます。 実際のユースケースまで見えていない部分があるので、追って勉強しようと思います。 ","date":"2025-03-20","objectID":"/junior-engineers-learning-journal/os-linux-access-controle/:8:0","tags":["OS"],"title":"Linuxのアクセス制御を完全に理解する","uri":"/junior-engineers-learning-journal/os-linux-access-controle/"},{"categories":["OS"],"content":"参考 [1] [2] [3] ","date":"2025-03-20","objectID":"/junior-engineers-learning-journal/os-linux-access-controle/:9:0","tags":["OS"],"title":"Linuxのアクセス制御を完全に理解する","uri":"/junior-engineers-learning-journal/os-linux-access-controle/"},{"categories":["Security"],"content":"ClamAVを完全に理解する。","date":"2025-03-18","objectID":"/junior-engineers-learning-journal/security-clamav/","tags":["Security"],"title":"ClamAVを完全に理解する","uri":"/junior-engineers-learning-journal/security-clamav/"},{"categories":["Security"],"content":" こんにちは、しぶやです。 近いうちにClamAVを利用する機会がありそうなので、これを機にClamAVを「完全に理解」していきたいと思います。 ","date":"2025-03-18","objectID":"/junior-engineers-learning-journal/security-clamav/:0:0","tags":["Security"],"title":"ClamAVを完全に理解する","uri":"/junior-engineers-learning-journal/security-clamav/"},{"categories":["Security"],"content":"TL;DR ウイルスは実行されて初めて感染 ClamAVはCiscoが管理するOSSのウイルス対策ソフトであり、シグネチャも リアルタイムスキャンや隔離に対応しているが、振る舞い検知等には未対応 ","date":"2025-03-18","objectID":"/junior-engineers-learning-journal/security-clamav/:1:0","tags":["Security"],"title":"ClamAVを完全に理解する","uri":"/junior-engineers-learning-journal/security-clamav/"},{"categories":["Security"],"content":"1　ClamAV基礎 ","date":"2025-03-18","objectID":"/junior-engineers-learning-journal/security-clamav/:2:0","tags":["Security"],"title":"ClamAVを完全に理解する","uri":"/junior-engineers-learning-journal/security-clamav/"},{"categories":["Security"],"content":"1.0　マルウェアとは？ そもそもマルウェアの定義が何なのか曖昧であったので、Wikipediaで調べてみます。 （個人的にWikipediaは定義が純粋で変な解釈されていないイメージがあります。また、十分な信頼性を示したいわけでもないので手軽にWikipediaで調べてます。） Wikipediaでは以下のように書かれています。 マルウェア (malware) とは、不正かつ有害に動作させる意図で作成された悪意のあるソフトウェアや悪質なコードの総称。 つまり、悪意のあるソフトウェア = マルウェアのようですね。 マルウェア感染とは？ それでは、マルウェア感染とは何なのでしょうか？ 意外に明確な定義が見つかりませんでした。ChatGPTに聞いてみると以下のように返ってきました。 マルウェア感染の定義は、悪意のあるソフトウェア（マルウェア）が、ユーザーの意図しない形でデバイス、システム、またはネットワークに侵入し、実行されることによって、その正常な動作を妨害、情報の窃取、システムの破壊、もしくは攻撃者に対する遠隔操作の権限を与える状態を指します。 すなわち、実行されることによって悪意のある動作がされることのようです。 ポイントは侵入したあとに実行までされて初めて感染であり、インストールされただけでは、感染ではないことです。 改めて考えてみると、ウイルス対策ソフトがインストールされたソフトをウイルスと判定し、隔離した際は感染したとは言い難いですよね。 実行環境だけ整えてあとから実行されるパターンなどもありますが、この時点で感染なのでしょうか？ ウイルス対策の視点から考えてみると、「実行環境が整ったがその後のウイルススキャンで実行される前に削除された」となれば感染したとは言わない気がします。 そのため、やはり実行に成功して初めて感染と定義したほうが良さそうです。※ そもそも環境が整った時点ですでに実行されていると考えられます。この場合は一度実行されてしまっているので感染ですね。 では、実行されだけど昔のウイルスなどでまともに動作せずに終わった場合はどうなのでしょう？ ※ ここでの「動作しない」とは、マルウェアが目的としていた動作（C2サーバとの接続等）に失敗した場合だけでなく、実行ファイルがエラー終了した場合も含めて考えています。 僕は、これも感染と考えています。感染したけど被害はなかったと。 根拠としては、実際に実行されてプログラムが動作したた時点で、コンピュータの隔離や解析等の対応が予想されるからです。 エラー終了していてもどの段階でエラー終了したのか分からないですからね。 この時点で感染したとして後続対応がはじまるイメージです。 実際には他と整合性をとるための定義の問題でしかないので、正解はないのかもしれません。 現状、実行されて初めて感染くらいの定義がしっくりきていますが、もっと良い定義があるかもしれません。 それでは、具体的なマルウェアの種類をみていきます。 ここでも、Wikipediaの定義を参照します。 （広義の）ウイルス 自己伝染機能、潜伏機能、発病機能のいずれかをもつ加害プログラム （狭義の）ウイルス 他のプログラムやファイルの一部を書き換え（寄生、感染）、自己複製する機能を持つマルウェア ワーム ウイルス同様自己増殖するが、ホストプログラムを持たず、単体で存在するプログラム バックドア 外部からコンピュータを操るために作られたコンピュータへの不正な侵入経路 トロイの木馬 無害なファイルやプログラムに偽装した上でコンピュータに侵入したあと悪意のある振る舞いをするもの スパイウェア コンピュータの内部情報を外部に勝手に送信するソフトウェア キーロガー キーボードからの入力を記録するプログラム ボット ボットネットと呼ばれる仕組みにより、IRCなどを利用して攻撃者から命令を受け取り、命令に応じてDDoS攻撃やスパムメール送信などを行うマルウェア ※ ボット自体は常駐してチャットで会話するなどといった機能を持つ任意のプログラムを指すもの ルートキット 攻撃者が被害者のコンピュータに侵入したあとに用いるツールを集めたパッケージで、マルウェアとして被害者のコンピュータにしかけるもの。 侵入の発覚を防ぐログ改ざんツール、バックドアをしかけるツール、キーロガー、パスワードやクレジットカード情報等の窃盗ツールなどがある。 ランサムウェア コンピュータをロックしたり重要なファイルを暗号化して読めなくするなどして被害者を困らせ，身代金 (ransom) を払えば元に戻すと脅迫するマルウェア スケアウェア ユーザの恐怖 (scare) 心を煽る偽の警告メッセージ（「PCから違法ポルノやウイルスが検出された」等）を表示し、問題を解決するには所定の金額を支払うようにと脅すマルウェア ダウンローダー サイズの小さなマルウェアで、攻撃者のサーバから被害者のコンピュータに実行ファイルなどをダウンロードするなどさらなる攻撃の足がかりにするもの。 本体内部に不正なプログラムが格納されており、実行時に実行可能ファイルに展開するはドロッパーともいう。 アドウェア ユーザの望まない広告を勝手に出すソフトウェアである。 ワイパー 感染したコンピュータの補助記憶装置内のデータを完全消去して使用不能にするもの。 ","date":"2025-03-18","objectID":"/junior-engineers-learning-journal/security-clamav/:2:1","tags":["Security"],"title":"ClamAVを完全に理解する","uri":"/junior-engineers-learning-journal/security-clamav/"},{"categories":["Security"],"content":"1.1　ClamAVとは？ まず、「ClamAVとは何か？」についてですが、公式では以下のように書かれています。 ClamAV は、メール ゲートウェイでの電子メール スキャン用に特別に設計されたオープン ソース (GPLv2) のウイルス対策ツールキットです。 柔軟でスケーラブルなマルチスレッド デーモン、コマンド ライン スキャナー、自動データベース更新用の高度なツールなど、多数のユーティリティを提供します。 パッケージの核となるのは、共有ライブラリの形式で利用できるウイルス対策エンジンです。 （Google翻訳） ウイルス対策ツールキットと説明しているようです。 最後の文にもある通り、パッケージの核となるウイルス対策エンジンを中心として、様々な機能/用途をもっているため、このように呼んでいるのでしょうか。 また、ClamAV自体はもともとメールのスキャン用に作れたようです。 ウイルス対策とマルウェア対策 ClamAVは\"ウイルス対策ソフト\"と呼ばれていますが、機能的にはマルウェア対策ソフトです。 実際に、ワームやトロイの木馬などウイルス以外のマルウェアの検出にも対応しています。 これは、昔コンピュータウイルスが最初に流行り始めた際にアンチウイルスという言葉がセキュリティソフトを指す名称として定着したからだそうです。 ClamAVは現在、Cisco System, Incによって提供されているようです。もともとメンテナンスを主導していたSourcefireという会社が買収されたのだとか。 ClamAVではOSSとしてのメンテナンス以外にも以下のことが行われています。 メーリングリスト ソフトウェアのアップデート情報やデータベースの更新、技術的な議論などをメールで通知しています。 チャット コミュニティ用にDiscordサーバを運営しています。 マルウェア情報の管理 新規のマルウェアや未検出のマルウェアを受け付けてレビュー/管理しています。 有名なウイルス対策ソフト ChatGPTに商用を含めウイルス対策ソフトの有名どころを聞いてみました。 製品名 提供元 Microsoft Defender for Endpoint Microsoft Symantec Endpoint Security Broadcom Trend Micro Apex One Trend Micro McAfee Endpoint Security McAfee Cisco Secure Endpoint Cisco SentinelOne SentinelOne CrowdStrike Falcon CrowdStrike Sophos Intercept X Sophos ESET PROTECT ESET ","date":"2025-03-18","objectID":"/junior-engineers-learning-journal/security-clamav/:2:2","tags":["Security"],"title":"ClamAVを完全に理解する","uri":"/junior-engineers-learning-journal/security-clamav/"},{"categories":["Security"],"content":"1.2　ClamAVの機能 それでは、ClamAVの具体的な機能を見ていきましょう。 ClamAVのウイルススキャンは幅広いファイルをカバーしています。 ドキュメント形式：tar, zip, gzip等 アーカイブ、圧縮ファイル：docx, xlsx, PDF等 スクリプト：JS, PHP, HTML, VBS等 実行ファイル：exe, dll, elf等 メール形式：eml, msg等 イメージ：iso, vhd等 docxやxlsxから分かる通り、clamAVはLinux専用ではないです。 ただし、一部機能はLinuxしか対応していなかったりとLinuxに強い感じです。 ウイルススキャンの機能として、ユーザが任意のタイミングで行うウイルススキャンに加え、オンアクセススキャンがあります。 これは、ユーザがファイルにアクセスしたときに該当ファイルをスキャンすることでリアルタイム保護を行うものです。 その他の機能としては、シグネチャデータベースのアップデート機能やClamAVのデーモンのリソースモニタリングなどがあります。 ClamAVのウイルス定義の更新 OSSのウイルス対策ソフトなのでウイルス定義の更新が遅いのでは？と思い調べてみたところ、公式で以下のような文言を見つけました。 How long does it take for a signature change after submitting new malware or submitting a false positive report? In most cases, it takes at least 48 hours from initial submission before any change will be published in the official ClamAV signature databases. 第三者により、発見＆提供されたウイルスに対し、48時間以内にウイルス定義データベースに反映させてくれるようです。 ※ 早いのでしょうか？個人的には、2日もかかると危険に感じてしまいます。ファイルのハッシュ値ベースのものだけでもすぐに更新したいところです。 ","date":"2025-03-18","objectID":"/junior-engineers-learning-journal/security-clamav/:2:3","tags":["Security"],"title":"ClamAVを完全に理解する","uri":"/junior-engineers-learning-journal/security-clamav/"},{"categories":["Security"],"content":"1.3　その他のウイルス対策ソフトとの違い ClamAVはOSSであるため、無料で利用できます。 そのためか、高いお金を払ってまではウイルス対策ソフトを導入したくないときにClamAVを入れるイメージがあります。 ここでは、実際にClamAVとその他のウイルス対策ソフトの機能を比較し、ウイルス対策ソフトにお金を払う価値を調べてみようと思います。 ここでは、その他のウイルス対策ソフトの代表として、Trellixを比較してみようと思います。 機能 ClamAV Trellix 静的ヒューリスティック解析 △ ○ 動的ヒューリスティック解析 × ○ リアルタイムスキャン ○ ○ サンドボックス機能 × ○ AI × ○ ホワイトリスト型制御 ○ ○ 管理機能・UI △ ○ 自動修復 × ○ 商用サポート × ○ 価格 ○ × その他 カスタマイズ 保護, 修復 ※ 特定の製品についての記載ではなく、該当機能を持った製品があるかで見ています。 検知という意味では、動的ヒューリスティック解析、AI機能が大きな違いとしてあります。 実際にどれだけ検知できるかは不明ですが、未知のウイルスにも対応できるというの大きいと思います。 特にウイルス対策ソフトの対策として、ウイルスの中身を良い感じに書き換えられたときにも振る舞いが似ていれば検知できるというのは安心につながりますね。 また、その他に書いた保護・修復にも大きな違いがあるかと思います。 以下は、Trellix公式の記載内容です。 保護 脅威対策は、次の機能を使用して環境への侵入を防ぎ、システムを保護します。 アクセス保護 － 指定されたファイル、共有、レジストリ キー、レジストリ値へのアクセスを制限し、プロセスとサービスを脅威動作から防止または制限することにより、クライアント システムへの不要な変更を阻止します。 エクスプロイト防止 － 脅威対策は、コンテンツ更新のシグネチャを使用して、次のエクスプロイトを阻止します。 バッファー オーバーフロー － バッファー オーバーフローを悪用して任意のコードを実行できないようにします。 API の不正利用 － システム上で実行されている未知のアプリケーションまたは侵害されたアプリケーションによる悪質な API 呼び出しを防ぎます。 ネットワーク侵入防止 (ネットワーク IPS) － ネットワーク トラフィックを拒否または低下させる DoS 攻撃および帯域幅指向攻撃から保護します。 エキスパート ルール － 追加のパラメーターを使用して、アクセス保護カスタム ルールよりも柔軟なルールを作成できます。 ただし、エキスパート ルールを作成するには、McAfee 固有の構文を理解する必要があります。 検出 脅威対策は、次の機能を使用して環境内の脅威を検出します。 オンアクセス スキャン － ファイルの読み取り時と書き込み時に脅威をスキャンします。 システムがアイドル状態の場合にのみスキャンします。 マルウェア対策スキャン インターフェース (AMSI) と統合され、ブラウザー ベース以外のスクリプトの脅威に対するスキャン機能を強化しています。 オンデマンド スキャン － 事前定義のスキャンを今すぐまたはスケジュールに従って実行します。スパイウェア関連のレジストリ項目もスキャンし、クリーンアップします。 不審なプログラム － スパイウェアやアドウェアなどの不審なプログラムを検出し、環境内での実行を阻止します。 隔離 － 感染項目を隔離し、駆除または修復を試みます。あるいは、自動的に削除します。 ダッシュボードとモニター － 脅威対策の統計情報を表示します。スキャン時間、コンテンツの更新ステータス、攻撃が最も多いアプリケーションなどの情報が表示されます。 クエリーとレポート － 脅威対策の詳細情報を取得します。脅威数、スキャンの完了、検出に対する応答、誤検知回避イベント、McAfee GTI の感度レベルなどの情報が表示されます。 マルウェア対策の早期読み込み － Windows 8 以降のリリースに含まれている ELAM 機能のサポートを提供します。 ELAM は、ブートサイクル時に読み込まれたデバイス ドライバーのリストを収集します。スキャン サービスが実行されると、これらのドライバーがスキャンされます。 修正 脅威対策は、次の機能を使用してセキュリティ問題を修正し、検出を処理します。また、パフォーマンスを向上させ、保護機能を強化します。 アクション － 検出時に特定のアクションを実行します。 アラート － 検出時に通知を行い、フィルターでトラフィックを制限します。 Extra.DAT ファイル － ウイルスの大量発生を含む新しい脅威から保護します。 スケジュール スキャン － システムのパフォーマンスを低下させず、スキャンを迅速に実行するため、ピーク時以外にスキャンを実行します。 コンテンツ リポジトリ － クライアント システムに近いリポジトリにコンテンツ ファイルを移動することで、会社のインターネットまたはイントラネットで発生するトラフィック量を減らします。 ログ ファイル (Endpoint Security クライアント) － 検出項目の履歴情報を提供します。このファイルを使用して設定を変更し、保護機能を強化したり、システムのパフォーマンスを向上させることができます。 ダッシュボードとモニター － アクティビティを確認して、脅威対策の設定を調整します。 保護のアクセス保護機能はClamAVにはないのではないかと思います。これについては、ClamAVの機能が足りないというより、TrellixはEDRのような機能も持っている感じですかね。 また、修正については、管理機能・UIにもつながりますが、検知後に行う動作を具体的に設定できたり、ダッシュボードを持っていたりします。 他のソフトウェアと組み合わせるなどして自分で作成できる範疇と言われればそこまでなのかも知れないですが、やはりウイルス対策ソフト自身が多機能で、ユーザーフレンドリーに作られていると商用利用しやすいのは事実ですね。 最後にもちろん、ウイルス対策ソフトにコストをかける大きなメリットは商用サポートがあることですね。 これはウイルス対策ソフトに限った話ではありませんが。 静的ヒューリスティック解析、動的ヒューリスティック解析 比較表にいきなり表れた静的ユーリスティック解析と動的ヒューリスティック解析について説明します。 静的ヒューリスティック解析 静的ヒューリスティック解析にも2種類あります。 構造解析 コードやバイナリの中身をそのまま見て、ウイルス定義と一致するかを確認します。 挙動推測型解析 コードやバイナリを解析し、発生するシステムコールなどを予測した上で怪しい構造がないかを確認します。 動的ヒューリスティック解析 実際にウイルスを動作させ、怪しい振る舞いがないかを確認します。 ここで素人の私は、挙動推測型解析と動的ヒューリスティック解析は同じじゃないか。 **結局、発生するシステムコールとか見ているだけで結果は一意に定まるのでは？**と思いました。 実際のところ、前者の場合は、動的に生成されるコードの展開であったり、実行環境依存のAPI呼び出しは解析できないという課題があります。 また、難読化についても、コンパイルしたら同じではないかと思いますが、無意味なコードの挿入であったりと解析が難しくなる部分はあるようです。 （ポリモーフィック・メタモーフィックコードという実行時に自分自身を変化させたり、コードの動作を変更させることで静的解析を回避する技術もあるようです。） ","date":"2025-03-18","objectID":"/junior-engineers-learning-journal/security-clamav/:2:4","tags":["Security"],"title":"ClamAVを完全に理解する","uri":"/junior-engineers-learning-journal/security-clamav/"},{"categories":["Security"],"content":"1.3　ClamAVの構成要素 それでは、ClamAVのドキュメントから構成要素を見ていきます。 Daemon The ClamAV Daemon, or clamd, is a multi-threaded daemon that uses libclamav to scan files for viruses. ClamAV provides a number of tools which interface with this daemon. They are, as follows: clamdscan - a simple scanning client on-access scanning - provides real-time protection via a clamd instance clamdtop - a resource monitoring interface for clamd ClamAVのデーモンである\"clamd\"が動いており、内部的には\"libclamav\"を利用してスキャンを実施しているようです。 スキャン以外にも、“clamd\"のリソースを見るためのclamdtopがあるようです。 Signature Testing and Management A number of tools allow for testing and management of signatures. Of note are the following: clambc - specifically for testing bytecode sigtool - for general signature testing and analysis freshclam - used to update signature database sets to the latest version “clambc\"はバイナリのテストを行うものです。 これは、独自のマルウェア解析ルールなどを書いた際に、それが正しく動作するか（ClamAVが扱えるか）を検証するためのものです。 作成・検証の対象になるのは拡張子が”.bc\"のバイトコードシグネチャというやつらしいです。 sigtoolはシグネチャの管理、分析をするためのツールです。 そもそも「シグネチャってなんやねん。」みたいな話があるので、そこは後ほど見てみようと思います。 “freshclam\"はシグネチャデータベースの更新を行います。 Configuration The more complex tools ClamAV provides each require some degree of configuration. ClamAV supplies two example configuration files: clamd.conf - for configuring the behavior of the ClamAV Daemon clamd and associated tools freschclam.conf - for configuring the behavior of the signature database update tool, freshclam 設定ファイルです。 ","date":"2025-03-18","objectID":"/junior-engineers-learning-journal/security-clamav/:2:5","tags":["Security"],"title":"ClamAVを完全に理解する","uri":"/junior-engineers-learning-journal/security-clamav/"},{"categories":["Security"],"content":"1.4　ClamAVのウイルススキャンを覗いてみる メモ： ソースコードベースで何してるか見てみる。 どのような検知手法があるのかとか シグネチャ見てしまったほうがよい？ ","date":"2025-03-18","objectID":"/junior-engineers-learning-journal/security-clamav/:2:6","tags":["Security"],"title":"ClamAVを完全に理解する","uri":"/junior-engineers-learning-journal/security-clamav/"},{"categories":["Security"],"content":"2　検証 それでは、実際にClamAVを触っていきましょう。 本記事で扱うClamAVのバージョンはClamAV 1.0.8です。 ","date":"2025-03-18","objectID":"/junior-engineers-learning-journal/security-clamav/:3:0","tags":["Security"],"title":"ClamAVを完全に理解する","uri":"/junior-engineers-learning-journal/security-clamav/"},{"categories":["Security"],"content":"2.1　インストール まずは、ClamAVのインストールをしていきます。 スキャンツールと合わせてデーモンの方もインストールしておきます。 ClamAVのインストール 続いて、テスト用のファイルを取得します。 テストファイルはeicar.orgからダウンロードしたEICAR TEST FILEを利用します。 EICARとは？ EICARは欧州コンピュータウイルス対策研究所 (EICAR) とコンピュータウイルス対策研究機構 (CARO) によって開発された、コンピュータウイルス対策プログラムの応答をテストするためのファイルです。 執筆時点では以下のファイルがダウンロードできることを確認しました。 eicar.com eicar.com.txt eicar_com.zip eicar_com2.zip テスト用ファイルの中身を見てみましょう。 eicar.txt よく分からない文字列が入力されていました。中にはEICARの文字列もあります。 ウイルス対策ソフトがシグネチャとしてこの文字列を登録しており、シグネチャベースのパターンマッチングで検知してくれる感じですかね。 ","date":"2025-03-18","objectID":"/junior-engineers-learning-journal/security-clamav/:3:1","tags":["Security"],"title":"ClamAVを完全に理解する","uri":"/junior-engineers-learning-journal/security-clamav/"},{"categories":["Security"],"content":"2.2　ウイルス定義の更新 インストールが終わったところで、ウイルス定義ファイルを取得していきます。 ClamAVにはウイルス定義ファイルをアップデートするためにfreshclamというツールが入っています。 今回はこちらを利用してウイルス定義ファイルを取得していこうと思います。 freshclamによるウイルス定義の更新 取得したウイルス定義ファイル 簡単にウイルス定義ファイルを更新することができました。バージョン等も表示してくれるので、現在どの段階のウイルス定義が反映されているのかも分かり便利そうですね。 取得したウイルス定義ファイルの”.cvd\"は、ClamAV Virus Database の略で、ClamAVがマルウェア検出に使用するシグネチャデータベースを格納している圧縮ファイルとなっています。 ","date":"2025-03-18","objectID":"/junior-engineers-learning-journal/security-clamav/:3:2","tags":["Security"],"title":"ClamAVを完全に理解する","uri":"/junior-engineers-learning-journal/security-clamav/"},{"categories":["Security"],"content":"2.3　ウイルススキャン いざ、ウイルススキャンを行ってみます！ ClamAVはのスキャンツールである、clamacanを利用し、2.1で取得したeicar.txtをスキャンしてみます。 ウイルススキャン スキャン結果 正しくウイルスが検知されました。 ログに記載されている以下の文字列は、正規表現でのパターンマッチングに成功したことを表しているようです。 matcher_run: performing regexmatching on full map: 0 + 68 \u003e= 68 また、以下の文字列はファイルのハッシュ値ベースで検知されたことを表していそうです。 FP SIGNATURE: 44d886~:68:Win.Test.EICAR_HDB-1 # Name: eicar.txt, Type: CL_TYPE_TEXT_ASCII 今回検知されたウイルス定義ファイルをデータベースから検索してみます。 ClamAVに入っている\"sigtool\"というツールを利用します。 検知された定義ファイル 検知ログにも出ていたウイルス定義がデータベースからも検索できました。 このスキャンツールを利用すれば、cronなどで定期スキャンを実装することができそうです。 実行時間 ClamAVのスキャンの実行時間をみてみます。 実行時間 ","date":"2025-03-18","objectID":"/junior-engineers-learning-journal/security-clamav/:3:3","tags":["Security"],"title":"ClamAVを完全に理解する","uri":"/junior-engineers-learning-journal/security-clamav/"},{"categories":["Security"],"content":"2.4　リアルタイムスキャン ClamAVのにはスキャンツールの実行によるスキャン以外にもオンアクセススキャンというものがあります。 2025年4月現在、こちらはLinuxのみが対応しています。 オンアクセススキャンはfanotifyと呼ばれるカーネルAPIを利用します。 これは、ファイルシステムイベントを監視＆通知するものです。 オンアクセススキャンでは、fanotifyを利用し、ファイルアクセスが起きた際に間に入って対象ファイルのウイルススキャンを行います。 これによってファイルのリアルタイムスキャンを実現するのです。 それでは、オンアクセススキャンを体験してみようと思います。 まずは、clamdの設定ファイルであるclamd.confを書き換えます。 clamd.conf 先程スキャンにも利用した\"eicar.txt\"を開いてみようと思います。 開くのに少し時間がかかりました。 開いたあとにClamAVのログを見るとファイルがウイルス検知されていることが分かります。 ※ 今回は、検知後のアクションとして何もしませんでしたが、隔離を行うこともできるようです。 また、他のツールと組み合わせることで、メールの受信拒否など色々できるみたいです。 リアルタイムスキャン ","date":"2025-03-18","objectID":"/junior-engineers-learning-journal/security-clamav/:3:4","tags":["Security"],"title":"ClamAVを完全に理解する","uri":"/junior-engineers-learning-journal/security-clamav/"},{"categories":["Security"],"content":"2.4　隔離 2.3で少し話したウイルス検知後のアクションを見てみます。 ウイルスの隔離 ベストプラクティス？ ウイルススキャンって対象が多すぎると重いし、どうやって運用するのがベストプラクティスなのでしょうか？ ウイルススキャンのベストプラクティスについて、個人的な意見をまとめようとます。（他に良いアイデアがあれば教えてください。） 頻度\u0026対象 対象のリスクやシステムの可用性、リソース制約に応じて頻度や対象範囲を検討することが望ましいと思います。 変更が多い場所：\"/home/\"、\"/tmp/“など 変更が多かったり、マルウェアがダウンロードされる可能性が高い場所は高頻度でウイルススキャンを行うことが望ましいと思います。 ただし、実行に少しのラグが生まれてしまったりとデメリットがあるのも事実です。 よって、以下のどちらかの選択をとることが望ましいと思います。 可用性が求められたり、リソース制約がある → 日次などの定期スキャン 可用性が求められず、リソース制約もない → リアルタイムスキャン 変更が少ない場所：\"/etc/“や”/bin\"など 変更が少なかったり、管理者しかアクセスできないような場所では、週1や月1でのフルスキャンも検討できるでしょう。 また、システムに大きな変更を加えたとき等の手動スキャンも行うと良いと思います。 ※ 個人的には、「ファイルシステムに変更があった場所のみスキャンをする」とかができれば良いのにと思うのですが、どうなのでしょうか？ アクション システムに求められる可用性次第でアクションを変える必要があると思います。 可用性が求められる場合 ファイルを隔離することにより、システムが停止してしまうことは非常に危険です。 特に、本当にマルウェアであった場合は仕方がないとも思えますが、ご検知出会った場合は最悪です。 このような場合は、検知だけを行い、隔離等のリアルタイムでの後続処理は行わないことが望ましいでしょう。 アラートに応じて、調査を行い、その結果次第でシステムを停止するか判断することができます。 ※ こういう意味だと、保全目的でコピーだけしておくのが良いのかな？ 可用性が求められない場合 隔離なり、ネットワーク遮断なり、システム停止なり、リスクとシステム停止による損失を比較して、対策を講じる。 更新 cronとかでできるだけ頻繁に更新する感じでしょうか。 新種のマルウェアの発見等があれば定期処理を待たずに、手動で更新をかける必要性などもありそうです。 ","date":"2025-03-18","objectID":"/junior-engineers-learning-journal/security-clamav/:3:5","tags":["Security"],"title":"ClamAVを完全に理解する","uri":"/junior-engineers-learning-journal/security-clamav/"},{"categories":["Security"],"content":"3　定義ファイルの作成 ","date":"2025-03-18","objectID":"/junior-engineers-learning-journal/security-clamav/:4:0","tags":["Security"],"title":"ClamAVを完全に理解する","uri":"/junior-engineers-learning-journal/security-clamav/"},{"categories":["Security"],"content":"4　まとめ 今回はClamAVについて、完全に理解していきました。 ClamAVはCiscoによって管理されているOSSで、リアルタイムスキャンや隔離等も標準機能として行えることが分かりました。 今後は、具体的にどうやってウイルスファイルを検知しているのか等も追っていきたいと思います。 ","date":"2025-03-18","objectID":"/junior-engineers-learning-journal/security-clamav/:5:0","tags":["Security"],"title":"ClamAVを完全に理解する","uri":"/junior-engineers-learning-journal/security-clamav/"},{"categories":["Security"],"content":"参考 [1] ClamAV [2] WIKIPEDIA Antivirus software [3] Trellix 脅威対策の主な内容 ","date":"2025-03-18","objectID":"/junior-engineers-learning-journal/security-clamav/:6:0","tags":["Security"],"title":"ClamAVを完全に理解する","uri":"/junior-engineers-learning-journal/security-clamav/"},{"categories":["Virtualization"],"content":"Dockerを完全に理解する。","date":"2025-03-18","objectID":"/junior-engineers-learning-journal/virtualization-docker/","tags":["Virtualization"],"title":"Dockerを完全に理解する","uri":"/junior-engineers-learning-journal/virtualization-docker/"},{"categories":["Virtualization"],"content":"こんにちは、しぶやです。 学生時代の研究から始まり、社会人になってからも愛用しているDockerについて、気合をいれてまとめようと思います。 ","date":"2025-03-18","objectID":"/junior-engineers-learning-journal/virtualization-docker/:0:0","tags":["Virtualization"],"title":"Dockerを完全に理解する","uri":"/junior-engineers-learning-journal/virtualization-docker/"},{"categories":["Virtualization"],"content":"TL;DR ","date":"2025-03-18","objectID":"/junior-engineers-learning-journal/virtualization-docker/:1:0","tags":["Virtualization"],"title":"Dockerを完全に理解する","uri":"/junior-engineers-learning-journal/virtualization-docker/"},{"categories":["Virtualization"],"content":"1　コンテナ基礎 ","date":"2025-03-18","objectID":"/junior-engineers-learning-journal/virtualization-docker/:2:0","tags":["Virtualization"],"title":"Dockerを完全に理解する","uri":"/junior-engineers-learning-journal/virtualization-docker/"},{"categories":["Virtualization"],"content":"2　Docker ","date":"2025-03-18","objectID":"/junior-engineers-learning-journal/virtualization-docker/:3:0","tags":["Virtualization"],"title":"Dockerを完全に理解する","uri":"/junior-engineers-learning-journal/virtualization-docker/"},{"categories":["Virtualization"],"content":"2.1　","date":"2025-03-18","objectID":"/junior-engineers-learning-journal/virtualization-docker/:3:1","tags":["Virtualization"],"title":"Dockerを完全に理解する","uri":"/junior-engineers-learning-journal/virtualization-docker/"},{"categories":["Virtualization"],"content":"2.2　ClamAVのアーキテクチャ ","date":"2025-03-18","objectID":"/junior-engineers-learning-journal/virtualization-docker/:3:2","tags":["Virtualization"],"title":"Dockerを完全に理解する","uri":"/junior-engineers-learning-journal/virtualization-docker/"},{"categories":["Virtualization"],"content":"2.3　ClamAVのウイルススキャンの仕組み ","date":"2025-03-18","objectID":"/junior-engineers-learning-journal/virtualization-docker/:3:3","tags":["Virtualization"],"title":"Dockerを完全に理解する","uri":"/junior-engineers-learning-journal/virtualization-docker/"},{"categories":["Virtualization"],"content":"2.4　ClamAVのデータベース更新 ","date":"2025-03-18","objectID":"/junior-engineers-learning-journal/virtualization-docker/:3:4","tags":["Virtualization"],"title":"Dockerを完全に理解する","uri":"/junior-engineers-learning-journal/virtualization-docker/"},{"categories":["Virtualization"],"content":"2.5　ClamAVのソースコード ","date":"2025-03-18","objectID":"/junior-engineers-learning-journal/virtualization-docker/:3:5","tags":["Virtualization"],"title":"Dockerを完全に理解する","uri":"/junior-engineers-learning-journal/virtualization-docker/"},{"categories":["Virtualization"],"content":"3　検証 ","date":"2025-03-18","objectID":"/junior-engineers-learning-journal/virtualization-docker/:4:0","tags":["Virtualization"],"title":"Dockerを完全に理解する","uri":"/junior-engineers-learning-journal/virtualization-docker/"},{"categories":["Virtualization"],"content":"4　まとめ ","date":"2025-03-18","objectID":"/junior-engineers-learning-journal/virtualization-docker/:5:0","tags":["Virtualization"],"title":"Dockerを完全に理解する","uri":"/junior-engineers-learning-journal/virtualization-docker/"},{"categories":["Virtualization"],"content":"参考 [1] docker [2] コンテナセキュリティ　コンテナ化されたアプリケーションを保護する要素技術 ","date":"2025-03-18","objectID":"/junior-engineers-learning-journal/virtualization-docker/:6:0","tags":["Virtualization"],"title":"Dockerを完全に理解する","uri":"/junior-engineers-learning-journal/virtualization-docker/"},{"categories":["Security"],"content":"セキュリティの基本の基本","date":"2025-03-18","objectID":"/junior-engineers-learning-journal/security-very-basics/","tags":["Security"],"title":"セキュリティの基本の基本","uri":"/junior-engineers-learning-journal/security-very-basics/"},{"categories":["Security"],"content":" こんにちは、しぶやです。 今回はセキュリティの基本の基本をまとめます。 話の流れは意識せず、思いつくものをつらつら書いていこうと思います。 ","date":"2025-03-18","objectID":"/junior-engineers-learning-journal/security-very-basics/:0:0","tags":["Security"],"title":"セキュリティの基本の基本","uri":"/junior-engineers-learning-journal/security-very-basics/"},{"categories":["Security"],"content":"TL;DR ","date":"2025-03-18","objectID":"/junior-engineers-learning-journal/security-very-basics/:1:0","tags":["Security"],"title":"セキュリティの基本の基本","uri":"/junior-engineers-learning-journal/security-very-basics/"},{"categories":["Security"],"content":"1 セキュリティ ","date":"2025-03-18","objectID":"/junior-engineers-learning-journal/security-very-basics/:2:0","tags":["Security"],"title":"セキュリティの基本の基本","uri":"/junior-engineers-learning-journal/security-very-basics/"},{"categories":["Security"],"content":"1.1　セキュリティとは？ 「セキュリティ」とは何でしょうか？ 辞書によるとセキュリティは「安全」や「保安」、「防犯」などを意味するものだそうです。 ","date":"2025-03-18","objectID":"/junior-engineers-learning-journal/security-very-basics/:2:1","tags":["Security"],"title":"セキュリティの基本の基本","uri":"/junior-engineers-learning-journal/security-very-basics/"},{"categories":["Security"],"content":"1.2　情報セキュリティとは？ では、「情報セキュリティ」とは何でしょうか？ ISO/IEC27000によると情報セキュリティとは、「情報の機密性，完全性及び可用性を維持すること。」と定義されているようです。 すなわち、情報セキュリティの特性であるCIAを維持することこそが情報セキュリティであるようです。 情報セキュリティは大きく以下の2つに分類できます。 物理的セキュリティ 物理的に安全性です。 扉やゲートのロックによる侵入防止、ICカードや指紋による認証などは利用者としてすぐに思いつきますね。 開発者としてより経験しやすい部分としてはラックやサーバ周りの物理セキュリティでしょうか。 例えば、ポートの閉塞であったり、ラックの施錠など。 記憶媒体の破壊なども物理的セキュリティと言えるかもしれません。 論理的セキュリティ [1]では論理的セキュリティには以下の3種類に分類しています。 システム的セキュリティ セキュリティと言われたらダイレクトにこれを考えてしまいますね。 マルウェア対策やアクセス制御など様々な要素があります。 管理的セキュリティ 運用などの管理的なセキュリティです。 ガイドラインとかでよく記されているやつですね。 体制の整備やソフトウェア管理など様々な要素があります。 人的セキュリティ 人に対するセキュリティです。 教育や契約など様々なものがあります。 ","date":"2025-03-18","objectID":"/junior-engineers-learning-journal/security-very-basics/:2:2","tags":["Security"],"title":"セキュリティの基本の基本","uri":"/junior-engineers-learning-journal/security-very-basics/"},{"categories":["Security"],"content":"1.3　CIAと付加的な特性 1.2の情報セキュリティの定義でもあったCIAについてです。 情報セキュリティの特性は以下のCIAと付加的ば特性に分けられます。 機密性(Confidentiality) 権限をもったものだけが許可された範囲内で活動できるようにする特性 完全性(Integrity) データの正当性、正確性、網羅性、一貫性を維持する特性 可用性(Avalability) 正常なサービスを提供できる状態を維持する特性 真正性(Authenticity) 情報が主張通りであることを確実にする特性 責任追跡性(Accountability) 起こった動作に対して、動作の主体と動作内容を一意に追跡できる特性 否認防止(Non-Repudiation) 起きた事象を跡から否認されないように証明できる特性 信頼性(reliability) 期待される結果と整合が取れていることを確実にする特性 ","date":"2025-03-18","objectID":"/junior-engineers-learning-journal/security-very-basics/:2:3","tags":["Security"],"title":"セキュリティの基本の基本","uri":"/junior-engineers-learning-journal/security-very-basics/"},{"categories":["Security"],"content":"参考 [1] 情報処理教科書 情報処理安全確保支援士 2025年版 ","date":"2025-03-18","objectID":"/junior-engineers-learning-journal/security-very-basics/:3:0","tags":["Security"],"title":"セキュリティの基本の基本","uri":"/junior-engineers-learning-journal/security-very-basics/"},{"categories":["Security"],"content":"制度/フレームワーク/ガイドライン","date":"2025-03-18","objectID":"/junior-engineers-learning-journal/security-system-framework-guidline/","tags":["Security"],"title":"制度/フレームワーク/ガイドライン","uri":"/junior-engineers-learning-journal/security-system-framework-guidline/"},{"categories":["Security"],"content":" 制度/フレームワーク/ガイドライン ISMS 27000シリーズ 27001 27002 27017 27018 クラウドセキュリティ認証 JIS Q 27017 20000 15001 27014 ISMAP ismap liu SP800-53を参照 防衛産業サイバーセキュリティ基準 能動的サイバー防御 ISMS適合性評価制度 範囲はISMS適用範囲定義書 ISMSクラウドセキュリティ認証 AI事業者ガイドライン NIST ZTA ZTNA SDPコントローラ SOC保証制度 SIM3 cmmc cmmi samm NIST SP 800-40 金融庁 財務報告に関わる内部統制の評価及び監査に関する実施基準 金融庁 サイバーセキュリティ対策のための統一基準群 SCAP SOAR サイバーキルチェーン 偵察 武器化 MITER NIST サイバーセキュリティフレームワーク コンピュータセキュリティインシデントガイド 証拠保全のやつ STIX サイバー攻撃活動 攻撃者 攻撃手口 検知指標 観測事象 インシデント 対処措置 攻撃対象 内部不正ガイドライン 電子商取引及び情報財取引等に関する準則 JIPDEC JCMVP ウィーケストリンクモデル ドベネックの桶 ISO/IEC 15408 こんにちは、しぶやです。 今回はセキュリティに関する制度やフレームワーク、ガイドラインについてまとめていこうと思います。 ストーリーは気にせずに、思いついたものをつらつら書いていこうと思います。 ","date":"2025-03-18","objectID":"/junior-engineers-learning-journal/security-system-framework-guidline/:0:0","tags":["Security"],"title":"制度/フレームワーク/ガイドライン","uri":"/junior-engineers-learning-journal/security-system-framework-guidline/"},{"categories":["Security"],"content":"TL;DR ","date":"2025-03-18","objectID":"/junior-engineers-learning-journal/security-system-framework-guidline/:1:0","tags":["Security"],"title":"制度/フレームワーク/ガイドライン","uri":"/junior-engineers-learning-journal/security-system-framework-guidline/"},{"categories":["Security"],"content":"0　制度 vs フレームワーク vs ガイドライン まとめるにあたり、制度、フレームワーク、ガイドラインの違いとは何なのでしょうか？ 某生成AIに聞いてみました。 意味 制度 社会・組織の中の仕組みやルールの体系 フレームワーク 何かを進めるための枠組みや構造 ガイドライン 指針。参考となる助言や方針 目的 制度 運用をルールで規定する フレームワーク 設計や考え方を共通化する ガイドライン 迷わないように方向を示す 拘束力 制度 強い フレームワーク 中〜強 ガイドライン 弱い 中身 制度 法律や社内規定 フレームワーク モデル、考え方、プロセスの流れ ガイドライン チェックリスト、ノウハウ、推奨策 ","date":"2025-03-18","objectID":"/junior-engineers-learning-journal/security-system-framework-guidline/:2:0","tags":["Security"],"title":"制度/フレームワーク/ガイドライン","uri":"/junior-engineers-learning-journal/security-system-framework-guidline/"},{"categories":["Security"],"content":"1 制度 ","date":"2025-03-18","objectID":"/junior-engineers-learning-journal/security-system-framework-guidline/:3:0","tags":["Security"],"title":"制度/フレームワーク/ガイドライン","uri":"/junior-engineers-learning-journal/security-system-framework-guidline/"},{"categories":["Security"],"content":"1.1　ISMS ISMSとは\"Information Security Management System\"の略で日本語では情報セキュリティマネジメントシステムです。 ISMSはISMS-AC（一般社団法人情報マネジメントシステム認定センター）により運用/管理されている制度です。 ISMS-ACではISMSを以下のように説明しています。 近年、ITシステムやネットワークは社会インフラとして不可欠なものとなっているが、一方で標的型攻撃やランサムウェアなどによる被害・影響も多発している。こうした中、これらの脅威に対して適切にリスクアセスメントを実施して、企業における総合的な情報セキュリティを確保するためには、ISMSの構築・運用が必須事項となっている。 ISMSとは、個別の問題毎の技術対策の他に、組織のマネジメントとして、自らのリスクアセスメントにより必要なセキュリティレベルを決め、プランを持ち、資源を配分して、システムを運用することである。 ISMSが達成すべきことは、リスクマネジメントプロセスを適用することによって情報の機密性、完全性及び可用性をバランス良く維持・改善し、リスクを適切に管理しているという信頼を利害関係者に与えることにある。そのためには、ISMSを、組織のプロセス及びマネジメント構造全体の一部とし、かつ、その中に組み込むことが重要である。 ","date":"2025-03-18","objectID":"/junior-engineers-learning-journal/security-system-framework-guidline/:3:1","tags":["Security"],"title":"制度/フレームワーク/ガイドライン","uri":"/junior-engineers-learning-journal/security-system-framework-guidline/"},{"categories":["Security"],"content":"1.2　JIS Q ","date":"2025-03-18","objectID":"/junior-engineers-learning-journal/security-system-framework-guidline/:3:2","tags":["Security"],"title":"制度/フレームワーク/ガイドライン","uri":"/junior-engineers-learning-journal/security-system-framework-guidline/"},{"categories":["Security"],"content":"1.3　ISMS ","date":"2025-03-18","objectID":"/junior-engineers-learning-journal/security-system-framework-guidline/:3:3","tags":["Security"],"title":"制度/フレームワーク/ガイドライン","uri":"/junior-engineers-learning-journal/security-system-framework-guidline/"},{"categories":["Security"],"content":"1.4　SOC保証制度 ","date":"2025-03-18","objectID":"/junior-engineers-learning-journal/security-system-framework-guidline/:3:4","tags":["Security"],"title":"制度/フレームワーク/ガイドライン","uri":"/junior-engineers-learning-journal/security-system-framework-guidline/"},{"categories":["Security"],"content":"1.5　CMMC ","date":"2025-03-18","objectID":"/junior-engineers-learning-journal/security-system-framework-guidline/:3:5","tags":["Security"],"title":"制度/フレームワーク/ガイドライン","uri":"/junior-engineers-learning-journal/security-system-framework-guidline/"},{"categories":["Security"],"content":"1.6　CMMI ","date":"2025-03-18","objectID":"/junior-engineers-learning-journal/security-system-framework-guidline/:3:6","tags":["Security"],"title":"制度/フレームワーク/ガイドライン","uri":"/junior-engineers-learning-journal/security-system-framework-guidline/"},{"categories":["Security"],"content":"1.7　SAMM ","date":"2025-03-18","objectID":"/junior-engineers-learning-journal/security-system-framework-guidline/:3:7","tags":["Security"],"title":"制度/フレームワーク/ガイドライン","uri":"/junior-engineers-learning-journal/security-system-framework-guidline/"},{"categories":["Security"],"content":"2 フレームワーク ","date":"2025-03-18","objectID":"/junior-engineers-learning-journal/security-system-framework-guidline/:4:0","tags":["Security"],"title":"制度/フレームワーク/ガイドライン","uri":"/junior-engineers-learning-journal/security-system-framework-guidline/"},{"categories":["Security"],"content":"2.1　SIM3 ","date":"2025-03-18","objectID":"/junior-engineers-learning-journal/security-system-framework-guidline/:4:1","tags":["Security"],"title":"制度/フレームワーク/ガイドライン","uri":"/junior-engineers-learning-journal/security-system-framework-guidline/"},{"categories":["Security"],"content":"2.2　NIST SP 800-40 ","date":"2025-03-18","objectID":"/junior-engineers-learning-journal/security-system-framework-guidline/:4:2","tags":["Security"],"title":"制度/フレームワーク/ガイドライン","uri":"/junior-engineers-learning-journal/security-system-framework-guidline/"},{"categories":["Security"],"content":"2.3　サイバーキルチェーン ","date":"2025-03-18","objectID":"/junior-engineers-learning-journal/security-system-framework-guidline/:4:3","tags":["Security"],"title":"制度/フレームワーク/ガイドライン","uri":"/junior-engineers-learning-journal/security-system-framework-guidline/"},{"categories":["Security"],"content":"MITER ","date":"2025-03-18","objectID":"/junior-engineers-learning-journal/security-system-framework-guidline/:4:4","tags":["Security"],"title":"制度/フレームワーク/ガイドライン","uri":"/junior-engineers-learning-journal/security-system-framework-guidline/"},{"categories":["Security"],"content":"NIST サイバーセキュリティフレームワーク ","date":"2025-03-18","objectID":"/junior-engineers-learning-journal/security-system-framework-guidline/:4:5","tags":["Security"],"title":"制度/フレームワーク/ガイドライン","uri":"/junior-engineers-learning-journal/security-system-framework-guidline/"},{"categories":["Security"],"content":"3　ガイドライン ","date":"2025-03-18","objectID":"/junior-engineers-learning-journal/security-system-framework-guidline/:5:0","tags":["Security"],"title":"制度/フレームワーク/ガイドライン","uri":"/junior-engineers-learning-journal/security-system-framework-guidline/"},{"categories":["Security"],"content":"3.1　金融庁 財務報告に関わる内部統制の評価及び監査に監査する実施基準 ","date":"2025-03-18","objectID":"/junior-engineers-learning-journal/security-system-framework-guidline/:5:1","tags":["Security"],"title":"制度/フレームワーク/ガイドライン","uri":"/junior-engineers-learning-journal/security-system-framework-guidline/"},{"categories":["Security"],"content":"3.2　サイバーセキュリティ対策のための統一基準群 ","date":"2025-03-18","objectID":"/junior-engineers-learning-journal/security-system-framework-guidline/:5:2","tags":["Security"],"title":"制度/フレームワーク/ガイドライン","uri":"/junior-engineers-learning-journal/security-system-framework-guidline/"},{"categories":["Security"],"content":"3.3　SCAP ","date":"2025-03-18","objectID":"/junior-engineers-learning-journal/security-system-framework-guidline/:5:3","tags":["Security"],"title":"制度/フレームワーク/ガイドライン","uri":"/junior-engineers-learning-journal/security-system-framework-guidline/"},{"categories":["Security"],"content":"3.4　コンピュータセキュリティインシデント対応ガイド ","date":"2025-03-18","objectID":"/junior-engineers-learning-journal/security-system-framework-guidline/:5:4","tags":["Security"],"title":"制度/フレームワーク/ガイドライン","uri":"/junior-engineers-learning-journal/security-system-framework-guidline/"},{"categories":["Security"],"content":"参考 [1] ","date":"2025-03-18","objectID":"/junior-engineers-learning-journal/security-system-framework-guidline/:6:0","tags":["Security"],"title":"制度/フレームワーク/ガイドライン","uri":"/junior-engineers-learning-journal/security-system-framework-guidline/"},{"categories":["Database, Storage"],"content":"NASを完全に理解する。","date":"2025-03-16","objectID":"/junior-engineers-learning-journal/database-storage-nas/","tags":["Database, Storage"],"title":"NASを完全に理解する","uri":"/junior-engineers-learning-journal/database-storage-nas/"},{"categories":["Database, Storage"],"content":"こんにちは、しぶやです。 最近、Synologyのnasを中古で安く仕入れたので、これを機にNASを「完全に理解」していきたいと思います。 ","date":"2025-03-16","objectID":"/junior-engineers-learning-journal/database-storage-nas/:0:0","tags":["Database, Storage"],"title":"NASを完全に理解する","uri":"/junior-engineers-learning-journal/database-storage-nas/"},{"categories":["Database, Storage"],"content":"TL;DR NASはファイルサーバみたいなもの。 標準機能として、RAIDが組めたり、バックアップとれたり、いろいろできる。 NAS用ソフトが充実している。 ","date":"2025-03-16","objectID":"/junior-engineers-learning-journal/database-storage-nas/:1:0","tags":["Database, Storage"],"title":"NASを完全に理解する","uri":"/junior-engineers-learning-journal/database-storage-nas/"},{"categories":["Database, Storage"],"content":"1　NASの基本 本章では、NASの基本について学んでいきます。 ","date":"2025-03-16","objectID":"/junior-engineers-learning-journal/database-storage-nas/:2:0","tags":["Database, Storage"],"title":"NASを完全に理解する","uri":"/junior-engineers-learning-journal/database-storage-nas/"},{"categories":["Database, Storage"],"content":"1.1　NASとは NASとは、Network Attached Strorageの略です。その名の通り、ネットワークに接続して利用するストレージです。 代表的なNASメーカーには以下のようなものがあります。 Synology QNAP BUFFALO NETGEAR 何はともあれ、現物を見てイメージの具体化をしてみます。 Synology DiskStation DS223j 小型で静音の省エネ型ストレージ こちらは、家庭用でも利用されているNASです。Youtubeとかもよく見るサイズのものですね。 Synology DiskStation DS3622xs+ どんな環境にも適合する、パワフルで大容量のストレージ こちらは、より高性能な大容量ストレージです。いかつい見た目でかっこよいですね Synology FlashStation FS6400 I/O インテンシブなアプリケーション向けの超高速オールフラッシュサーバー ラックマウント用のNASもあるようです。 Synology Plusシリーズ3.5インチSATA HDD 家庭やスモールオフィス環境のSynologyシステム専用に作られた高信頼性ハードドライブ Synology Enterpriseシリーズ2.5インチSATA SSD SynologyのSSDを使用してストレージ インフラを最新化 NASには上記のようなHDDやSDDを差し込み利用します。nベイというのは、これらを差し込むスロットが何個あるかを表しています。 DAS vs NAS vs SAN NASと比較されるものとして、DASやSANがあります。 DAS：Direct Attached Storage ストレージを直接コンピュータに接続する方式です。容易なセットアップや低コストといった特徴があります。 NAS：Network Attached Storage 本記事で取り上げている通り、ネットワークを通じてアクセス可能なストレージです。ネットワーク経由で複数人で同時にアクセスできる特徴があります。 SAN：Storage Area Network 専用のネットワーク経由で複数のサーバと接続できるストレージです。 こちらについては、あまり詳しくわかっていませんが、データ転送が高速であったり、ブロックレベルでアクセス可能といった特徴があるようです。 ちなみに、どんなプロトコルで通信が行われているのかについてですが、iSCSI（IP over SCSI）やFibre Channel（FC）、Fibre Channel over Ethernet（FCoE）といったものが利用されているようです。 ","date":"2025-03-16","objectID":"/junior-engineers-learning-journal/database-storage-nas/:2:1","tags":["Database, Storage"],"title":"NASを完全に理解する","uri":"/junior-engineers-learning-journal/database-storage-nas/"},{"categories":["Database, Storage"],"content":"1.2　NASの機能 それでは、NASの具体的な機能を見ていきます。 ファイル共有 ネットワーク経由でファイルの読み書きが可能です。スナップショットをとれたり、バージョン管理機能を持っていたりするものなどもあります。 「具体的に中で何が動いているのか」についてですが、NASはSMBやNFSなど複数のプロトコルをサポートしており、中身は一般的なOSSでファイルサーバのように動くようです。 アクセス管理 利用者視点ではもちろん機能ですね。ユーザごとに読み取り専用などアクセス権の管理が可能です。 RAID RAIDによるデータの冗長性を確保できます。もちろん複数ベイが必要になります。 復習：RAID RAIDはRedundant Arrays of Inexpensive Disksの略です。複数のディスクを組み合わせて冗長化するやつですね。 RAIDの主なレベルは以下です。 RAID 0 冗長化していない通常のモードです。 信頼性は失われますが、書き込む量も増えないため、高速でストレージの利用効率も高いです。 RAID 1 2台のディスクを利用したシンプルなミラーリングです。データを二重に保存します。 RAID 5 3台以上のディスクを利用し、データとそのパリティをそれぞれ分散させて保存します。 パリティを保存しているため、容量効率は高いですが、データの復旧には時間がかかってしまいます。 RAID 6 RAID5 + パリティです。RAID1やRIAD5と異なり、2台のディスクが壊れても復旧が可能です。 RAID 10 RAID 1 + RAID 0でRAID 10です。RAID 5/6よりも書き込みが高速で、耐障害性も高いです。 バックアップ バックアップにはPC等のクライアントのバックアップとNAS自身のデータのバックアップの2つ観点があります。 前者は専用のクライアントソフトなどを利用することで、手軽に頻度や対象を指定したバックアップを行えます。 後者は、Google DriveやAWSなど、クラウドストレージへNAS自身のデータをバックアップできます。 Tip NASは標準でRAID機能を持っているものが多いですが、これはあくまで冗長化です。 操作ミスによるNASデータの削除やランサムウェアによる被害が発生した際はデータを失ってしまいます。 これらの対策として別のストレージにバックアップを取ることが重要となり、NASは標準でクラウドストレージへのバップアップを行うことができます。 データの冗長化ではないですが、通信の冗長化としてLAGが組めるのも良い点ですね。 LANポートを複数持っているので、通信経路の冗長化にもなります。 リモートアクセスやVPN 専用ソフトを利用することで、インターネット経由で安全にアクセスできる機能を備えています。 インターネット経由で利用することも考えると当たり前に欲しい機能ですね。 VMやコンテナの実行 高性能のNASの場合は、VMやコンテナを中で動かせるようです。 独自のアプリケーションを中で動かすことで様々なことができるようになります。 セキュリティ NAS自身がファイアウォール機能などを持っていることもあります。 また、高性能なものは2段階認証を利用できたり、ウイルススキャン機能を持っていたりします。 Webサーバやメディアサーバ サーバ機能を持っているものもあるようです。 メンテナンス ファームウェアの自動アップデート機能を持っていたりします。 また、今回Synologyを使ってみてわかりましたが、オンラインからのヘルスチェックサービスなどもあるようです。 NASの性能 NASを買う前は、NASは高性能な高いやつほど読み書き速度が早いと安直に考えていました。 改めて考えてみると、読み書き速度はNASの性能ではなく、HDDやSDDの読み書き速度に依存することがわかります。 ※ 正確には、ネットワークの帯域幅であったり、RAIDの構成、CPUの性能などにも依存します。 ","date":"2025-03-16","objectID":"/junior-engineers-learning-journal/database-storage-nas/:2:2","tags":["Database, Storage"],"title":"NASを完全に理解する","uri":"/junior-engineers-learning-journal/database-storage-nas/"},{"categories":["Database, Storage"],"content":"1.3　NASのメリット・デメリット NASのメリットは何と言っても1.2であげたものが手軽に利用できることです。 外付けHDDだけでは、複数人でデータを共有することはできないですし、ネットワーク経由でデータにアクセスすることもできません。 一方でNASのデメリットは、初期費用が高いことです。高機能なものにもなると、HDD抜きでNAS自身が非常に高いです。 所感 上記で太字で記載しましたが、NASの本質は標準で様々な機能が入っており、手軽に導入できることかと思います。 NAS自身のOSは専用の組み込みOSであることが多いようですが、その気になればPC1台とRAIDに必要な外付けHDDがあれば1.2で上げた機能をすべて実現できると思います。 これらの導入コストを低くできることがNASのメリットだと考えています。※ 静音だとか性能だとかって話はあると思いますが。 ","date":"2025-03-16","objectID":"/junior-engineers-learning-journal/database-storage-nas/:2:3","tags":["Database, Storage"],"title":"NASを完全に理解する","uri":"/junior-engineers-learning-journal/database-storage-nas/"},{"categories":["Database, Storage"],"content":"1.4　外付けストレージ・ファイルサーバとの違い 比較表を書こうと思いましたが、1.3で述べたように、以下のような関係で表すことが適切かと思いました。 外付けHDD ⊂ ファイルサーバ ⊂ NAS 外付けHDDもRAIDが組めるものがありますし、複数台で自分で組むこともできるでしょう。 また、外付けHDDをマウントし、ファイルサーバを建てることもできれば、フアイルサーバに機能を加えNASっぽく運用することもできるでしょう。 これらのことから、それぞれの境界はやや曖昧で、包含関係がしっくりきました。 ","date":"2025-03-16","objectID":"/junior-engineers-learning-journal/database-storage-nas/:2:4","tags":["Database, Storage"],"title":"NASを完全に理解する","uri":"/junior-engineers-learning-journal/database-storage-nas/"},{"categories":["Database, Storage"],"content":"1.5　ユースケース ファイルサーバ 家庭用、企業用問わずファイルサーバとしてデータ共有に利用されています。 バックアップ バックアップの保存用途でNASが利用されています。 その他 メディアサーバ等様々な用途で利用されています。IoTの発展に伴い、カメラデータの保存等にも使われているようです。 Tip NASというよりHDDの話です。 よく壊れやすいと言われているHDDについてですが、動かし続けていないとより壊れやすいようです。 具体的な理由はChatGPTが以下のように教えてくれました。 ヘッドの位置ずれ 潤滑油の劣化 温度管理の不良 結露の問題 機械部品の劣化 家とかも誰も住んでいないとすぐだめになったりしますよね ","date":"2025-03-16","objectID":"/junior-engineers-learning-journal/database-storage-nas/:2:5","tags":["Database, Storage"],"title":"NASを完全に理解する","uri":"/junior-engineers-learning-journal/database-storage-nas/"},{"categories":["Database, Storage"],"content":"2　Synologyを触る 今回はSynology DS120jを中古で安く仕入れたので、こちらを触ります。 1ベイモデルとなっており、RAIDを組めないのが残念ですが、用途としては自宅鯖のバックアップようなのでよいでしょう。 製品名：Synology DS120j バージョン：DSM 7.2.2 HDD容量：2TB OSは初期セットアップ時にダウンロードしました。HDDは別で買うのが面倒だったので、HDD付きを買いました。 Synology DS120j ","date":"2025-03-16","objectID":"/junior-engineers-learning-journal/database-storage-nas/:3:0","tags":["Database, Storage"],"title":"NASを完全に理解する","uri":"/junior-engineers-learning-journal/database-storage-nas/"},{"categories":["Database, Storage"],"content":"2.1　解体 解体（物理）です。 NAS 解体ショー 思っていたより大きめの基盤が張り付いていました。この辺も最低でも登場人物と役割がわかる程度にはなりたいですが、今は電源やファンの接続部分くらいしか分からないです。 近いうちに勉強する予定があるので別記事に書くとして今回はスルーします。 HDD 表 HDD 裏 NAS用のHDDです。やはりHDDは重いですね。 裏面を見るとよりディスクとヘッドの存在が透けてきてテンションが上がりました。 真ん中にピング色の何かがついていますが、これは何なのでしょう。接着剤？ HDDも解体して中身のディスクとか見たかったですが、使う前に壊してしまうのが怖くなりやめました。壊れたらやってみよう。 ","date":"2025-03-16","objectID":"/junior-engineers-learning-journal/database-storage-nas/:3:1","tags":["Database, Storage"],"title":"NASを完全に理解する","uri":"/junior-engineers-learning-journal/database-storage-nas/"},{"categories":["Database, Storage"],"content":"2.2　初期設定 物理を見たところで、いよいよNASを動かしてみます・ 起動時画面 ファームウェアの選択 ファームウェアのインストール 起動するとすぐにファームウェアを要求されました。 公式からダウンロードし、NASへインストールしていきます。\\ Synologyの組み込みOSは**DSM（Disk Station Manager）**というもので.patという拡張子が利用されているようです。 HDDのファームウェア DSMのダウンロード時にSynology HDD/SSD オフラインアップデータという項目を見つけ、.saという拡張子のファイルが存在することを見つけました。 これまで意識したことがなかったですが、HDDもRAMやROMを持っており、ファームウェアが動作しているようです。SynologyはDSMからHDDのファームウェアの管理ができるのだとか。 参考：【技術顧問の小話 ＃004】HDDのファームウェアとは？ アカウント設定 続きまして、ユーザの設定です。一般的なOSをインストールしたときと同じような流れですね。 ファームウェアの自動更新設定 追加機能 NASっぽい設定が始まりました。 左の画像では、1.2 NASの機能でも記載したように、ファームウェアの自動更新ができるようです。選択肢配下。 重要なDSMとパッケージのアップデートのみを自動で行う。（推奨） DSMとパッケージのアップデートを自動で行う。 DSMとパッケージのアップデートの通知のみを行い、手動でアップデートを行う。 右の画像では、Synologyのアカウントを作成することでオンラインで追加の機能を提供してくれるようです。以下、詳細です。 Secure Signin Service 具体的には以下の方法でサインインができるみたいです。 2要素認証 専用アプリにOTPを発行可能。 ハードウェアセキュリティキーによる認証 USB キー、Windows Hello、または Mac Touch IDで認証可能 Access your Synology NAS from anywhere インターネットからアクセスできるようにするものです。 仕組みとしては、NAS → Synology中継サーバ、クライアント → Synology中継サーバで接続を行うことで、安全にアクセスできるようにするというものです。 家にインバウンド通信を許可する必要もないことやSynologyが境界を固めてくれていることを考えると非常に便利で安全ですね。中継サーバが乗っ取られていない前提ですが。 Around-the-clock monitoring and protection Synology側のサーバからNASのヘルスチェックだったり、トラブルシュートの提供だったりを行ってくれるらしい。 ","date":"2025-03-16","objectID":"/junior-engineers-learning-journal/database-storage-nas/:3:2","tags":["Database, Storage"],"title":"NASを完全に理解する","uri":"/junior-engineers-learning-journal/database-storage-nas/"},{"categories":["Database, Storage"],"content":"2.2　検証 Synologyの画面 Synologyの画面です。ブラウザで動くアプリケーションがあるという認識はありましたが、デスクトップlikeなアプリケーションなんですね。 なぜデスクトップlikeにしているのでしょうか。 VM動かしたりとかPCっぽい機能をたくさん利用することを考えるとユーザーフレンドリーなのでしょうか。 共有フォルダ アクセス権 試しに共有フォルダを作成してみました。 LocationにVolume 1: ext4とあることから、裏ではボリューム作ってフォーマットしてファイルシステム作成している感じですかね。 物理ボリューム → ボリュームグループ → 論理ボリューム → ファイルシステムみたいなコマンドベースの手順を踏まずにポチポチで完結するのはらくで良いですね。 アクセス権についてもGUIで簡単に設定できます。 豊富なアプリケーション アプリもかなり豊富な種類がありました。 消費電力 Synology DS120jで消費電力を測ってみました。 通常時の消費電力 書き込み時の消費電力 高いのか低いのか勘所がないです。。 アイドル時：4.68W、負荷時：9.81Wと紹介しているサイトがありました。アイドル状態とやらになったらもう少し消費電力を抑えられたのかもしれません。 ","date":"2025-03-16","objectID":"/junior-engineers-learning-journal/database-storage-nas/:3:3","tags":["Database, Storage"],"title":"NASを完全に理解する","uri":"/junior-engineers-learning-journal/database-storage-nas/"},{"categories":["Database, Storage"],"content":"3　まとめ 記事の途中でも書きましたが、NASの本質は標準で様々な機能が入っており、手軽に導入できるファイルサーバだと思っています。 以上を踏まえ、以下にまとめます。 NASはファイルサーバみたいなもの。 標準機能として、RAIDが組めたり、バックアップとれたり、いろいろできる。 NAS用ソフトが充実している。 ","date":"2025-03-16","objectID":"/junior-engineers-learning-journal/database-storage-nas/:4:0","tags":["Database, Storage"],"title":"NASを完全に理解する","uri":"/junior-engineers-learning-journal/database-storage-nas/"},{"categories":["Database, Storage"],"content":"参考 [1] Synology [2] NAS入門: 初心者でもわかるデータ保存・共有・バックアップの極意 [3] 【技術顧問の小話 ＃004】HDDのファームウェアとは？ [4] SynologyNASの外部アクセスQuickConnectの仕組みと設定方法 ","date":"2025-03-16","objectID":"/junior-engineers-learning-journal/database-storage-nas/:5:0","tags":["Database, Storage"],"title":"NASを完全に理解する","uri":"/junior-engineers-learning-journal/database-storage-nas/"},{"categories":["Others"],"content":"Idea Logs","date":"2025-03-16","objectID":"/junior-engineers-learning-journal/others-idea-log/","tags":["Others"],"title":"執筆検討メモ","uri":"/junior-engineers-learning-journal/others-idea-log/"},{"categories":["Others"],"content":"以下、今後執筆を検討しているものたちです。  OS パッケージマネージャ  Network OSPF RIP STP  Security 堅牢化 ClamAV Suricata  Database, Storage NAS Postgres OracleDB  Data Science 古典学習  Cloud AWSサービス  Virtualization Proxmox K8s Docker  Hardware メモリ  System Design, Deployment, and Management ガイドライン フレームワーク  Finace お金の流れ  Basic Theory 物理  Others 1年目の感想 メモ NDA IRC 3-2-1ルール マルウェア検知手法 ノーウェアランサム ct, security.txt ACME, SCEP IRR RPKI ROA ROV rootでログインさせるとだれが使ったのか分からない。 IPHNEはMACアドレス地をランダム化させているらしい JC-STAR NPU インシデント対応 BCP BCM IRP コンティンジェンシープラン ディザスタリカバリ Cookie FAPI FAPI 2.0 HOK MTLS DPOP SOAP ","date":"2025-03-16","objectID":"/junior-engineers-learning-journal/others-idea-log/:0:0","tags":["Others"],"title":"執筆検討メモ","uri":"/junior-engineers-learning-journal/others-idea-log/"},{"categories":["Markdown"],"content":"This article shows the basic Markdown syntax and format.","date":"2019-12-01","objectID":"/junior-engineers-learning-journal/others-basic-markdown-syntax/","tags":["Markdown","HTML"],"title":"Basic Markdown Syntax","uri":"/junior-engineers-learning-journal/others-basic-markdown-syntax/"},{"categories":["Markdown"],"content":"This article offers a sample of basic Markdown syntax that can be used in Hugo content files. Note This article is a shameful copy of the great Grav original page. If you want to know about the extended Markdown syntax of LoveIt theme, please read extended Markdown syntax page. Let’s face it: Writing content for the Web is tiresome. WYSIWYG editors help alleviate this task, but they generally result in horrible code, or worse yet, ugly web pages. Markdown is a better way to write HTML, without all the complexities and ugliness that usually accompanies it. Some of the key benefits are: Markdown is simple to learn, with minimal extra characters, so it’s also quicker to write content. Less chance of errors when writing in Markdown. Produces valid XHTML output. Keeps the content and the visual display separate, so you cannot mess up the look of your site. Write in any text editor or Markdown application you like. Markdown is a joy to use! John Gruber, the author of Markdown, puts it like this: The overriding design goal for Markdown’s formatting syntax is to make it as readable as possible. The idea is that a Markdown-formatted document should be publishable as-is, as plain text, without looking like it’s been marked up with tags or formatting instructions. While Markdown’s syntax has been influenced by several existing text-to-HTML filters, the single biggest source of inspiration for Markdown’s syntax is the format of plain text email. – John Gruber Without further delay, let us go over the main elements of Markdown and what the resulting HTML looks like! Tip  Bookmark this page for easy future reference! ","date":"2019-12-01","objectID":"/junior-engineers-learning-journal/others-basic-markdown-syntax/:0:0","tags":["Markdown","HTML"],"title":"Basic Markdown Syntax","uri":"/junior-engineers-learning-journal/others-basic-markdown-syntax/"},{"categories":["Markdown"],"content":"1 Headings Headings from h2 through h6 are constructed with a # for each level: ## h2 Heading ### h3 Heading #### h4 Heading ##### h5 Heading ###### h6 Heading The HTML looks like this: \u003ch2\u003eh2 Heading\u003c/h2\u003e \u003ch3\u003eh3 Heading\u003c/h3\u003e \u003ch4\u003eh4 Heading\u003c/h4\u003e \u003ch5\u003eh5 Heading\u003c/h5\u003e \u003ch6\u003eh6 Heading\u003c/h6\u003e Heading IDs To add a custom heading ID, enclose the custom ID in curly braces on the same line as the heading: ### A Great Heading {#custom-id} The HTML looks like this: \u003ch3 id=\"custom-id\"\u003eA Great Heading\u003c/h3\u003e ","date":"2019-12-01","objectID":"/junior-engineers-learning-journal/others-basic-markdown-syntax/:1:0","tags":["Markdown","HTML"],"title":"Basic Markdown Syntax","uri":"/junior-engineers-learning-journal/others-basic-markdown-syntax/"},{"categories":["Markdown"],"content":"2 Comments Comments should be HTML compatible. \u003c!-- This is a comment --\u003e Comment below should NOT be seen: ","date":"2019-12-01","objectID":"/junior-engineers-learning-journal/others-basic-markdown-syntax/:2:0","tags":["Markdown","HTML"],"title":"Basic Markdown Syntax","uri":"/junior-engineers-learning-journal/others-basic-markdown-syntax/"},{"categories":["Markdown"],"content":"3 Horizontal Rules The HTML \u003chr\u003e element is for creating a “thematic break” between paragraph-level elements. In Markdown, you can create a \u003chr\u003e with any of the following: ___: three consecutive underscores ---: three consecutive dashes ***: three consecutive asterisks The rendered output looks like this: ","date":"2019-12-01","objectID":"/junior-engineers-learning-journal/others-basic-markdown-syntax/:3:0","tags":["Markdown","HTML"],"title":"Basic Markdown Syntax","uri":"/junior-engineers-learning-journal/others-basic-markdown-syntax/"},{"categories":["Markdown"],"content":"4 Body Copy Body copy written as normal, plain text will be wrapped with \u003cp\u003e\u003c/p\u003e tags in the rendered HTML. So this body copy: Lorem ipsum dolor sit amet, graecis denique ei vel, at duo primis mandamus. Et legere ocurreret pri, animal tacimates complectitur ad cum. Cu eum inermis inimicus efficiendi. Labore officiis his ex, soluta officiis concludaturque ei qui, vide sensibus vim ad. The HTML looks like this: \u003cp\u003eLorem ipsum dolor sit amet, graecis denique ei vel, at duo primis mandamus. Et legere ocurreret pri, animal tacimates complectitur ad cum. Cu eum inermis inimicus efficiendi. Labore officiis his ex, soluta officiis concludaturque ei qui, vide sensibus vim ad.\u003c/p\u003e A line break can be done with one blank line. ","date":"2019-12-01","objectID":"/junior-engineers-learning-journal/others-basic-markdown-syntax/:4:0","tags":["Markdown","HTML"],"title":"Basic Markdown Syntax","uri":"/junior-engineers-learning-journal/others-basic-markdown-syntax/"},{"categories":["Markdown"],"content":"5 Inline HTML If you need a certain HTML tag (with a class) you can simply use HTML: Paragraph in Markdown. \u003cdiv class=\"class\"\u003e This is \u003cb\u003eHTML\u003c/b\u003e \u003c/div\u003e Paragraph in Markdown. ","date":"2019-12-01","objectID":"/junior-engineers-learning-journal/others-basic-markdown-syntax/:5:0","tags":["Markdown","HTML"],"title":"Basic Markdown Syntax","uri":"/junior-engineers-learning-journal/others-basic-markdown-syntax/"},{"categories":["Markdown"],"content":"6 Emphasis ","date":"2019-12-01","objectID":"/junior-engineers-learning-journal/others-basic-markdown-syntax/:6:0","tags":["Markdown","HTML"],"title":"Basic Markdown Syntax","uri":"/junior-engineers-learning-journal/others-basic-markdown-syntax/"},{"categories":["Markdown"],"content":"Bold For emphasizing a snippet of text with a heavier font-weight. The following snippet of text is rendered as bold text. **rendered as bold text** __rendered as bold text__ The HTML looks like this: \u003cstrong\u003erendered as bold text\u003c/strong\u003e ","date":"2019-12-01","objectID":"/junior-engineers-learning-journal/others-basic-markdown-syntax/:6:1","tags":["Markdown","HTML"],"title":"Basic Markdown Syntax","uri":"/junior-engineers-learning-journal/others-basic-markdown-syntax/"},{"categories":["Markdown"],"content":"Italics For emphasizing a snippet of text with italics. The following snippet of text is rendered as italicized text. *rendered as italicized text* _rendered as italicized text_ The HTML looks like this: \u003cem\u003erendered as italicized text\u003c/em\u003e ","date":"2019-12-01","objectID":"/junior-engineers-learning-journal/others-basic-markdown-syntax/:6:2","tags":["Markdown","HTML"],"title":"Basic Markdown Syntax","uri":"/junior-engineers-learning-journal/others-basic-markdown-syntax/"},{"categories":["Markdown"],"content":"Strikethrough In GFMGitHub flavored Markdown you can do strikethroughs. ~~Strike through this text.~~ The rendered output looks like this: Strike through this text. The HTML looks like this: \u003cdel\u003eStrike through this text.\u003c/del\u003e ","date":"2019-12-01","objectID":"/junior-engineers-learning-journal/others-basic-markdown-syntax/:6:3","tags":["Markdown","HTML"],"title":"Basic Markdown Syntax","uri":"/junior-engineers-learning-journal/others-basic-markdown-syntax/"},{"categories":["Markdown"],"content":"Combination Bold, italics, and strikethrough can be used in combination. ***bold and italics*** ~~**strikethrough and bold**~~ ~~*strikethrough and italics*~~ ~~***bold, italics and strikethrough***~~ The rendered output looks like this: bold and italics strikethrough and bold strikethrough and italics bold, italics and strikethrough The HTML looks like this: \u003cem\u003e\u003cstrong\u003ebold and italics\u003c/strong\u003e\u003c/em\u003e \u003cdel\u003e\u003cstrong\u003estrikethrough and bold\u003c/strong\u003e\u003c/del\u003e \u003cdel\u003e\u003cem\u003estrikethrough and italics\u003c/em\u003e\u003c/del\u003e \u003cdel\u003e\u003cem\u003e\u003cstrong\u003ebold, italics and strikethrough\u003c/strong\u003e\u003c/em\u003e\u003c/del\u003e ","date":"2019-12-01","objectID":"/junior-engineers-learning-journal/others-basic-markdown-syntax/:6:4","tags":["Markdown","HTML"],"title":"Basic Markdown Syntax","uri":"/junior-engineers-learning-journal/others-basic-markdown-syntax/"},{"categories":["Markdown"],"content":"7 Blockquotes For quoting blocks of content from another source within your document. Add \u003e before any text you want to quote: \u003e **Fusion Drive** combines a hard drive with a flash storage (solid-state drive) and presents it as a single logical volume with the space of both drives combined. The rendered output looks like this: Fusion Drive combines a hard drive with a flash storage (solid-state drive) and presents it as a single logical volume with the space of both drives combined. The HTML looks like this: \u003cblockquote\u003e \u003cp\u003e \u003cstrong\u003eFusion Drive\u003c/strong\u003e combines a hard drive with a flash storage (solid-state drive) and presents it as a single logical volume with the space of both drives combined. \u003c/p\u003e \u003c/blockquote\u003e Blockquotes can also be nested: \u003e Donec massa lacus, ultricies a ullamcorper in, fermentum sed augue. Nunc augue augue, aliquam non hendrerit ac, commodo vel nisi. \u003e\u003e Sed adipiscing elit vitae augue consectetur a gravida nunc vehicula. Donec auctor odio non est accumsan facilisis. Aliquam id turpis in dolor tincidunt mollis ac eu diam. The rendered output looks like this: Donec massa lacus, ultricies a ullamcorper in, fermentum sed augue. Nunc augue augue, aliquam non hendrerit ac, commodo vel nisi. Sed adipiscing elit vitae augue consectetur a gravida nunc vehicula. Donec auctor odio non est accumsan facilisis. Aliquam id turpis in dolor tincidunt mollis ac eu diam. ","date":"2019-12-01","objectID":"/junior-engineers-learning-journal/others-basic-markdown-syntax/:7:0","tags":["Markdown","HTML"],"title":"Basic Markdown Syntax","uri":"/junior-engineers-learning-journal/others-basic-markdown-syntax/"},{"categories":["Markdown"],"content":"8 Lists ","date":"2019-12-01","objectID":"/junior-engineers-learning-journal/others-basic-markdown-syntax/:8:0","tags":["Markdown","HTML"],"title":"Basic Markdown Syntax","uri":"/junior-engineers-learning-journal/others-basic-markdown-syntax/"},{"categories":["Markdown"],"content":"Unordered A list of items in which the order of the items does not explicitly matter. You may use any of the following symbols to denote bullets for each list item: * valid bullet - valid bullet + valid bullet For example: * Lorem ipsum dolor sit amet * Consectetur adipiscing elit * Integer molestie lorem at massa * Facilisis in pretium nisl aliquet * Nulla volutpat aliquam velit * Phasellus iaculis neque * Purus sodales ultricies * Vestibulum laoreet porttitor sem * Ac tristique libero volutpat at * Faucibus porta lacus fringilla vel * Aenean sit amet erat nunc * Eget porttitor lorem The rendered output looks like this: Lorem ipsum dolor sit amet Consectetur adipiscing elit Integer molestie lorem at massa Facilisis in pretium nisl aliquet Nulla volutpat aliquam velit Phasellus iaculis neque Purus sodales ultricies Vestibulum laoreet porttitor sem Ac tristique libero volutpat at Faucibus porta lacus fringilla vel Aenean sit amet erat nunc Eget porttitor lorem The HTML looks like this: \u003cul\u003e \u003cli\u003eLorem ipsum dolor sit amet\u003c/li\u003e \u003cli\u003eConsectetur adipiscing elit\u003c/li\u003e \u003cli\u003eInteger molestie lorem at massa\u003c/li\u003e \u003cli\u003eFacilisis in pretium nisl aliquet\u003c/li\u003e \u003cli\u003eNulla volutpat aliquam velit \u003cul\u003e \u003cli\u003ePhasellus iaculis neque\u003c/li\u003e \u003cli\u003ePurus sodales ultricies\u003c/li\u003e \u003cli\u003eVestibulum laoreet porttitor sem\u003c/li\u003e \u003cli\u003eAc tristique libero volutpat at\u003c/li\u003e \u003c/ul\u003e \u003c/li\u003e \u003cli\u003eFaucibus porta lacus fringilla vel\u003c/li\u003e \u003cli\u003eAenean sit amet erat nunc\u003c/li\u003e \u003cli\u003eEget porttitor lorem\u003c/li\u003e \u003c/ul\u003e ","date":"2019-12-01","objectID":"/junior-engineers-learning-journal/others-basic-markdown-syntax/:8:1","tags":["Markdown","HTML"],"title":"Basic Markdown Syntax","uri":"/junior-engineers-learning-journal/others-basic-markdown-syntax/"},{"categories":["Markdown"],"content":"Ordered A list of items in which the order of items does explicitly matter. 1. Lorem ipsum dolor sit amet 2. Consectetur adipiscing elit 3. Integer molestie lorem at massa 4. Facilisis in pretium nisl aliquet 5. Nulla volutpat aliquam velit 6. Faucibus porta lacus fringilla vel 7. Aenean sit amet erat nunc 8. Eget porttitor lorem The rendered output looks like this: Lorem ipsum dolor sit amet Consectetur adipiscing elit Integer molestie lorem at massa Facilisis in pretium nisl aliquet Nulla volutpat aliquam velit Faucibus porta lacus fringilla vel Aenean sit amet erat nunc Eget porttitor lorem The HTML looks like this: \u003col\u003e \u003cli\u003eLorem ipsum dolor sit amet\u003c/li\u003e \u003cli\u003eConsectetur adipiscing elit\u003c/li\u003e \u003cli\u003eInteger molestie lorem at massa\u003c/li\u003e \u003cli\u003eFacilisis in pretium nisl aliquet\u003c/li\u003e \u003cli\u003eNulla volutpat aliquam velit\u003c/li\u003e \u003cli\u003eFaucibus porta lacus fringilla vel\u003c/li\u003e \u003cli\u003eAenean sit amet erat nunc\u003c/li\u003e \u003cli\u003eEget porttitor lorem\u003c/li\u003e \u003c/ol\u003e Tip If you just use 1. for each number, Markdown will automatically number each item. For example: 1. Lorem ipsum dolor sit amet 1. Consectetur adipiscing elit 1. Integer molestie lorem at massa 1. Facilisis in pretium nisl aliquet 1. Nulla volutpat aliquam velit 1. Faucibus porta lacus fringilla vel 1. Aenean sit amet erat nunc 1. Eget porttitor lorem The rendered output looks like this: Lorem ipsum dolor sit amet Consectetur adipiscing elit Integer molestie lorem at massa Facilisis in pretium nisl aliquet Nulla volutpat aliquam velit Faucibus porta lacus fringilla vel Aenean sit amet erat nunc Eget porttitor lorem ","date":"2019-12-01","objectID":"/junior-engineers-learning-journal/others-basic-markdown-syntax/:8:2","tags":["Markdown","HTML"],"title":"Basic Markdown Syntax","uri":"/junior-engineers-learning-journal/others-basic-markdown-syntax/"},{"categories":["Markdown"],"content":"Task Lists Task lists allow you to create a list of items with checkboxes. To create a task list, add dashes (-) and brackets with a space ([ ]) before task list items. To select a checkbox, add an x in between the brackets ([x]). - [x] Write the press release - [ ] Update the website - [ ] Contact the media The rendered output looks like this: Write the press release Update the website Contact the media ","date":"2019-12-01","objectID":"/junior-engineers-learning-journal/others-basic-markdown-syntax/:8:3","tags":["Markdown","HTML"],"title":"Basic Markdown Syntax","uri":"/junior-engineers-learning-journal/others-basic-markdown-syntax/"},{"categories":["Markdown"],"content":"9 Code ","date":"2019-12-01","objectID":"/junior-engineers-learning-journal/others-basic-markdown-syntax/:9:0","tags":["Markdown","HTML"],"title":"Basic Markdown Syntax","uri":"/junior-engineers-learning-journal/others-basic-markdown-syntax/"},{"categories":["Markdown"],"content":"Inline Code Wrap inline snippets of code with `. In this example, `\u003csection\u003e\u003c/section\u003e` should be wrapped as **code**. The rendered output looks like this: In this example, \u003csection\u003e\u003c/section\u003e should be wrapped as code. The HTML looks like this: \u003cp\u003e In this example, \u003ccode\u003e\u0026lt;section\u0026gt;\u0026lt;/section\u0026gt;\u003c/code\u003e should be wrapped with \u003cstrong\u003ecode\u003c/strong\u003e. \u003c/p\u003e ","date":"2019-12-01","objectID":"/junior-engineers-learning-journal/others-basic-markdown-syntax/:9:1","tags":["Markdown","HTML"],"title":"Basic Markdown Syntax","uri":"/junior-engineers-learning-journal/others-basic-markdown-syntax/"},{"categories":["Markdown"],"content":"Indented Code Or indent several lines of code by at least four spaces, as in: // Some comments line 1 of code line 2 of code line 3 of code The rendered output looks like this: // Some comments line 1 of code line 2 of code line 3 of code The HTML looks like this: \u003cpre\u003e \u003ccode\u003e // Some comments line 1 of code line 2 of code line 3 of code \u003c/code\u003e \u003c/pre\u003e ","date":"2019-12-01","objectID":"/junior-engineers-learning-journal/others-basic-markdown-syntax/:9:2","tags":["Markdown","HTML"],"title":"Basic Markdown Syntax","uri":"/junior-engineers-learning-journal/others-basic-markdown-syntax/"},{"categories":["Markdown"],"content":"Block Fenced Code Use “fences” ``` to block in multiple lines of code with a language attribute. ```markdown Sample text here... ``` The HTML looks like this: \u003cpre language-html\u003e \u003ccode\u003eSample text here...\u003c/code\u003e \u003c/pre\u003e ","date":"2019-12-01","objectID":"/junior-engineers-learning-journal/others-basic-markdown-syntax/:9:3","tags":["Markdown","HTML"],"title":"Basic Markdown Syntax","uri":"/junior-engineers-learning-journal/others-basic-markdown-syntax/"},{"categories":["Markdown"],"content":"Syntax Highlighting GFMGitHub Flavored Markdown also supports syntax highlighting. To activate it, simply add the file extension of the language you want to use directly after the first code “fence”, ```js, and syntax highlighting will automatically be applied in the rendered HTML. For example, to apply syntax highlighting to JavaScript code: ```js grunt.initConfig({ assemble: { options: { assets: 'docs/assets', data: 'src/data/*.{json,yml}', helpers: 'src/custom-helpers.js', partials: ['src/partials/**/*.{hbs,md}'] }, pages: { options: { layout: 'default.hbs' }, files: { './': ['src/templates/pages/index.hbs'] } } } }; ``` The rendered output looks like this: grunt.initConfig({ assemble: { options: { assets: 'docs/assets', data: 'src/data/*.{json,yml}', helpers: 'src/custom-helpers.js', partials: ['src/partials/**/*.{hbs,md}'] }, pages: { options: { layout: 'default.hbs' }, files: { './': ['src/templates/pages/index.hbs'] } } } }; Note Syntax highlighting page in Hugo Docs introduces more about syntax highlighting, including highlight shortcode. ","date":"2019-12-01","objectID":"/junior-engineers-learning-journal/others-basic-markdown-syntax/:9:4","tags":["Markdown","HTML"],"title":"Basic Markdown Syntax","uri":"/junior-engineers-learning-journal/others-basic-markdown-syntax/"},{"categories":["Markdown"],"content":"10 Tables Tables are created by adding pipes as dividers between each cell, and by adding a line of dashes (also separated by bars) beneath the header. Note that the pipes do not need to be vertically aligned. | Option | Description | | ------ | ----------- | | data | path to data files to supply the data that will be passed into templates. | | engine | engine to be used for processing templates. Handlebars is the default. | | ext | extension to be used for dest files. | The rendered output looks like this: Option Description data path to data files to supply the data that will be passed into templates. engine engine to be used for processing templates. Handlebars is the default. ext extension to be used for dest files. The HTML looks like this: \u003ctable\u003e \u003cthead\u003e \u003ctr\u003e \u003cth\u003eOption\u003c/th\u003e \u003cth\u003eDescription\u003c/th\u003e \u003c/tr\u003e \u003c/thead\u003e \u003ctbody\u003e \u003ctr\u003e \u003ctd\u003edata\u003c/td\u003e \u003ctd\u003epath to data files to supply the data that will be passed into templates.\u003c/td\u003e \u003c/tr\u003e \u003ctr\u003e \u003ctd\u003eengine\u003c/td\u003e \u003ctd\u003eengine to be used for processing templates. Handlebars is the default.\u003c/td\u003e \u003c/tr\u003e \u003ctr\u003e \u003ctd\u003eext\u003c/td\u003e \u003ctd\u003eextension to be used for dest files.\u003c/td\u003e \u003c/tr\u003e \u003c/tbody\u003e \u003c/table\u003e Right or center aligned text Adding a colon on the right side of the dashes below any heading will right align text for that column. Adding colons on both sides of the dashes below any heading will center align text for that column. | Option | Description | |:------:| -----------:| | data | path to data files to supply the data that will be passed into templates. | | engine | engine to be used for processing templates. Handlebars is the default. | | ext | extension to be used for dest files. | The rendered output looks like this: Option Description data path to data files to supply the data that will be passed into templates. engine engine to be used for processing templates. Handlebars is the default. ext extension to be used for dest files. ","date":"2019-12-01","objectID":"/junior-engineers-learning-journal/others-basic-markdown-syntax/:10:0","tags":["Markdown","HTML"],"title":"Basic Markdown Syntax","uri":"/junior-engineers-learning-journal/others-basic-markdown-syntax/"},{"categories":["Markdown"],"content":"11 Links ","date":"2019-12-01","objectID":"/junior-engineers-learning-journal/others-basic-markdown-syntax/:11:0","tags":["Markdown","HTML"],"title":"Basic Markdown Syntax","uri":"/junior-engineers-learning-journal/others-basic-markdown-syntax/"},{"categories":["Markdown"],"content":"Basic Link \u003chttps://assemble.io\u003e \u003ccontact@revolunet.com\u003e [Assemble](https://assemble.io) The rendered output looks like this (hover over the link, there is no tooltip): https://assemble.io contact@revolunet.com Assemble The HTML looks like this: \u003ca href=\"https://assemble.io\"\u003ehttps://assemble.io\u003c/a\u003e \u003ca href=\"mailto:contact@revolunet.com\"\u003econtact@revolunet.com\u003c/a\u003e \u003ca href=\"https://assemble.io\"\u003eAssemble\u003c/a\u003e ","date":"2019-12-01","objectID":"/junior-engineers-learning-journal/others-basic-markdown-syntax/:11:1","tags":["Markdown","HTML"],"title":"Basic Markdown Syntax","uri":"/junior-engineers-learning-journal/others-basic-markdown-syntax/"},{"categories":["Markdown"],"content":"Add a Title [Upstage](https://github.com/upstage/ \"Visit Upstage!\") The rendered output looks like this (hover over the link, there should be a tooltip): Upstage The HTML looks like this: \u003ca href=\"https://github.com/upstage/\" title=\"Visit Upstage!\"\u003eUpstage\u003c/a\u003e ","date":"2019-12-01","objectID":"/junior-engineers-learning-journal/others-basic-markdown-syntax/:11:2","tags":["Markdown","HTML"],"title":"Basic Markdown Syntax","uri":"/junior-engineers-learning-journal/others-basic-markdown-syntax/"},{"categories":["Markdown"],"content":"Named Anchors Named anchors enable you to jump to the specified anchor point on the same page. For example, each of these chapters: ## Table of Contents * [Chapter 1](#chapter-1) * [Chapter 2](#chapter-2) * [Chapter 3](#chapter-3) will jump to these sections: ## Chapter 1 \u003ca id=\"chapter-1\"\u003e\u003c/a\u003e Content for chapter one. ## Chapter 2 \u003ca id=\"chapter-2\"\u003e\u003c/a\u003e Content for chapter one. ## Chapter 3 \u003ca id=\"chapter-3\"\u003e\u003c/a\u003e Content for chapter one. Note The specific placement of the anchor tag seems to be arbitrary. They are placed inline here since it seems to be unobtrusive, and it works. ","date":"2019-12-01","objectID":"/junior-engineers-learning-journal/others-basic-markdown-syntax/:11:3","tags":["Markdown","HTML"],"title":"Basic Markdown Syntax","uri":"/junior-engineers-learning-journal/others-basic-markdown-syntax/"},{"categories":["Markdown"],"content":"12 Footnotes Footnotes allow you to add notes and references without cluttering the body of the document. When you create a footnote, a superscript number with a link appears where you added the footnote reference. Readers can click the link to jump to the content of the footnote at the bottom of the page. To create a footnote reference, add a caret and an identifier inside brackets ([^1]). Identifiers can be numbers or words, but they can’t contain spaces or tabs. Identifiers only correlate the footnote reference with the footnote itself — in the output, footnotes are numbered sequentially. Add the footnote using another caret and number inside brackets with a colon and text ([^1]: My footnote.). You don’t have to put footnotes at the end of the document. You can put them anywhere except inside other elements like lists, block quotes, and tables. This is a digital footnote[^1]. This is a footnote with \"label\"[^label] [^1]: This is a digital footnote [^label]: This is a footnote with \"label\" This is a digital footnote1. This is a footnote with “label”2 ","date":"2019-12-01","objectID":"/junior-engineers-learning-journal/others-basic-markdown-syntax/:12:0","tags":["Markdown","HTML"],"title":"Basic Markdown Syntax","uri":"/junior-engineers-learning-journal/others-basic-markdown-syntax/"},{"categories":["Markdown"],"content":"13 Images Images have a similar syntax to links but include a preceding exclamation point. ![Minion](https://octodex.github.com/images/minion.png) or: ![Alt text](https://octodex.github.com/images/stormtroopocat.jpg \"The Stormtroopocat\") The Stormtroopocat Like links, images also have a footnote style syntax: ![Alt text][id] The Dojocat With a reference later in the document defining the URL location: [id]: https://octodex.github.com/images/dojocat.jpg \"The Dojocat\" Tip LoveIt theme has special shortcode for image, which provides more features. This is a digital footnote ↩︎ This is a footnote with “label” ↩︎ ","date":"2019-12-01","objectID":"/junior-engineers-learning-journal/others-basic-markdown-syntax/:13:0","tags":["Markdown","HTML"],"title":"Basic Markdown Syntax","uri":"/junior-engineers-learning-journal/others-basic-markdown-syntax/"},{"categories":null,"content":"About","date":"2025-01-01","objectID":"/junior-engineers-learning-journal/about/","tags":null,"title":"About","uri":"/junior-engineers-learning-journal/about/"},{"categories":null,"content":"このブログについて ","date":"2025-01-01","objectID":"/junior-engineers-learning-journal/about/:1:0","tags":null,"title":"About","uri":"/junior-engineers-learning-journal/about/"},{"categories":null,"content":"目的 学んだ内容をアウトプットすることによる学習効率の向上 外部に公開することによるモチベーションの向上 自己満足 ","date":"2025-01-01","objectID":"/junior-engineers-learning-journal/about/:1:1","tags":null,"title":"About","uri":"/junior-engineers-learning-journal/about/"},{"categories":null,"content":"主な内容 以下のようなカテゴリで、日々の学んだ内容や所感をまとめています。  OS  Network  Security  Database, Storage  Data Science  Cloud  Virtualization  Hardware  System Design, Deployment, and Management  Finace  Basic Theory  Others ","date":"2025-01-01","objectID":"/junior-engineers-learning-journal/about/:1:2","tags":null,"title":"About","uri":"/junior-engineers-learning-journal/about/"},{"categories":null,"content":"基本情報  執筆開始：2025年3月  著者：しぶや ","date":"2025-01-01","objectID":"/junior-engineers-learning-journal/about/:1:3","tags":null,"title":"About","uri":"/junior-engineers-learning-journal/about/"},{"categories":null,"content":"著者 ","date":"2025-01-01","objectID":"/junior-engineers-learning-journal/about/:2:0","tags":null,"title":"About","uri":"/junior-engineers-learning-journal/about/"},{"categories":null,"content":"自己紹介 初めまして、しぶやです。某大手SIerでセキュリティやってます。 名前：しぶや 職種：SIer 分野：金融 部署：セキュリティ技術支援 得意分野：迷走中.. 趣味：自宅鯖いじり / 技術検証 / 配信視聴（ゲームとか技術系とか） ","date":"2025-01-01","objectID":"/junior-engineers-learning-journal/about/:2:1","tags":null,"title":"About","uri":"/junior-engineers-learning-journal/about/"},{"categories":null,"content":"経歴 2024年4月：国立大学 大学院 情報系 卒業 2025年4月~現在: 某大手SIer 金融分野 セキュリティチーム 某大規模金融システムのネットワーク設計? ","date":"2025-01-01","objectID":"/junior-engineers-learning-journal/about/:2:2","tags":null,"title":"About","uri":"/junior-engineers-learning-journal/about/"},{"categories":null,"content":"資格・実績  IPA 基本情報技術者試験  Linuc 101, 102 201, 202 303  AWS AWS Certified Cloud Practitioner AWS Certified AI Practitioner AWS Certified Solutions Architect Associate  Azure Microsoft Certified Azure Fundamentals Microsoft Certified Azure Administrator Associate Microsoft Certified Azure Solutions Architect Expert  GCP Google Cloud Certified Cloud Digital Leader Google Cloud Certified Associate Cloud Engineer Google Cloud Certified Professional Cloud Architect  Other Microsoft PowerPoint (Microsoft 365 Apps) Microsoft Word Expert (Microsoft 365 Apps) 金融IT検定 ","date":"2025-01-01","objectID":"/junior-engineers-learning-journal/about/:2:3","tags":null,"title":"About","uri":"/junior-engineers-learning-journal/about/"},{"categories":null,"content":"参考 このブログは、静的サイトジェネレーターの Hugo と、シンプルで美しいテーマ LoveIt を使って構築しております。  LoveIt is a clean, elegant but advanced blog theme for Hugo developed by  Dillon. It is based on the original LeaveIt Theme and KeepIt Theme. Hugo Theme LoveIt ","date":"2025-01-01","objectID":"/junior-engineers-learning-journal/about/:3:0","tags":null,"title":"About","uri":"/junior-engineers-learning-journal/about/"}]